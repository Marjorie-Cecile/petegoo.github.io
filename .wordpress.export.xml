<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.8.3" created="2014-04-25 20:56" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>PeteGoo</title>
	<link>http://blog.petegoo.com</link>
	<description>.Net Heebie Jeebies</description>
	<pubDate>Fri, 25 Apr 2014 20:56:24 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://blog.petegoo.com</wp:base_site_url>
	<wp:base_blog_url>http://blog.petegoo.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>admin</wp:author_login><wp:author_email>pete@petegoo.com</wp:author_email><wp:author_display_name><![CDATA[PeteGoo]]></wp:author_display_name><wp:author_first_name><![CDATA[Peter]]></wp:author_first_name><wp:author_last_name><![CDATA[Goodman]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>15</wp:term_id><wp:category_nicename>ajax</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[AJAX]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>16</wp:term_id><wp:category_nicename>asp-net</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ASP.Net]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>8</wp:term_id><wp:category_nicename>c</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[C#]]></wp:cat_name><wp:category_description><![CDATA[C#]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>51</wp:term_id><wp:category_nicename>dev11</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Dev11]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>48</wp:term_id><wp:category_nicename>dsl</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[DSL]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>46</wp:term_id><wp:category_nicename>enterprise-workflow</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Enterprise Workflow]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>45</wp:term_id><wp:category_nicename>entity-framework</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Entity Framework]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>13</wp:term_id><wp:category_nicename>head-melter</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Head Melter]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>69</wp:term_id><wp:category_nicename>linq-2</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[LINQ]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>6</wp:term_id><wp:category_nicename>main-page</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Main Page]]></wp:cat_name><wp:category_description><![CDATA[Main Page]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>44</wp:term_id><wp:category_nicename>mvc</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[MVC]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>43</wp:term_id><wp:category_nicename>mysql</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[MySQL]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>10</wp:term_id><wp:category_nicename>nhibernate</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[NHibernate]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>59</wp:term_id><wp:category_nicename>odata</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ODAta]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>78</wp:term_id><wp:category_nicename>oss</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[OSS]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>9</wp:term_id><wp:category_nicename>patterns-practices</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Patterns &amp; Practices]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>4</wp:term_id><wp:category_nicename>personal</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Personal]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>24</wp:term_id><wp:category_nicename>presentations</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Presentations]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>18</wp:term_id><wp:category_nicename>productivity</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Productivity]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>3</wp:term_id><wp:category_nicename>programming</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Programming]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>65</wp:term_id><wp:category_nicename>pushqa</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Pushqa]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>68</wp:term_id><wp:category_nicename>rant</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Rant]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>57</wp:term_id><wp:category_nicename>rx</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Rx]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>37</wp:term_id><wp:category_nicename>t4</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[T4]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>11</wp:term_id><wp:category_nicename>team-foundation-server</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Team Foundation Server]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>70</wp:term_id><wp:category_nicename>tech</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Tech]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>21</wp:term_id><wp:category_nicename>teched</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[TechEd]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>22</wp:term_id><wp:category_nicename>tenz</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[tenz]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>20</wp:term_id><wp:category_nicename>unit-testing</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Unit Testing]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>12</wp:term_id><wp:category_nicename>visual-studio</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Visual Studio]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>5</wp:term_id><wp:category_nicename>vs2008</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[VS2008]]></wp:cat_name><wp:category_description><![CDATA[VS2008]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>47</wp:term_id><wp:category_nicename>vsx</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[VSX]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>7</wp:term_id><wp:category_nicename>wcf</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[WCF]]></wp:cat_name><wp:category_description><![CDATA[WCF]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>58</wp:term_id><wp:category_nicename>web-api</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Web API]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>17</wp:term_id><wp:category_nicename>web-silverlight</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Web Silverlight]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>19</wp:term_id><wp:category_nicename>wf4</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[WF4]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>67</wp:term_id><wp:category_nicename>windows-store</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Windows Store]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>49</wp:term_id><wp:category_nicename>workflow-service-tracking-viewer</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Workflow Service Tracking Viewer]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>14</wp:term_id><wp:category_nicename>wpf</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[WPF]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>54</wp:term_id><wp:tag_slug>net</wp:tag_slug><wp:tag_name><![CDATA[.Net]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>15</wp:term_id><wp:tag_slug>ajax</wp:tag_slug><wp:tag_name><![CDATA[AJAX]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>27</wp:term_id><wp:tag_slug>appfabric</wp:tag_slug><wp:tag_name><![CDATA[AppFabric]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>16</wp:term_id><wp:tag_slug>asp-net</wp:tag_slug><wp:tag_name><![CDATA[ASP.Net]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>56</wp:term_id><wp:tag_slug>bcl</wp:tag_slug><wp:tag_name><![CDATA[BCL]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>42</wp:term_id><wp:tag_slug>blog</wp:tag_slug><wp:tag_name><![CDATA[blog]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>80</wp:term_id><wp:tag_slug>bot</wp:tag_slug><wp:tag_name><![CDATA[bot]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>8</wp:term_id><wp:tag_slug>c</wp:tag_slug><wp:tag_name><![CDATA[C#]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>51</wp:term_id><wp:tag_slug>dev11</wp:tag_slug><wp:tag_name><![CDATA[Dev11]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>32</wp:term_id><wp:tag_slug>dsl-tools</wp:tag_slug><wp:tag_name><![CDATA[DSL Tools]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>31</wp:term_id><wp:tag_slug>dynamic</wp:tag_slug><wp:tag_name><![CDATA[Dynamic]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>41</wp:term_id><wp:tag_slug>enterprise-library</wp:tag_slug><wp:tag_name><![CDATA[Enterprise Library]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>46</wp:term_id><wp:tag_slug>enterprise-workflow</wp:tag_slug><wp:tag_name><![CDATA[Enterprise Workflow]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>64</wp:term_id><wp:tag_slug>entity-framewok</wp:tag_slug><wp:tag_name><![CDATA[Entity Framewok]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>55</wp:term_id><wp:tag_slug>file-system</wp:tag_slug><wp:tag_name><![CDATA[File System]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>83</wp:term_id><wp:tag_slug>github</wp:tag_slug><wp:tag_name><![CDATA[github]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>73</wp:term_id><wp:tag_slug>htc</wp:tag_slug><wp:tag_name><![CDATA[HTC]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>82</wp:term_id><wp:tag_slug>hubot</wp:tag_slug><wp:tag_name><![CDATA[hubot]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>52</wp:term_id><wp:tag_slug>iis</wp:tag_slug><wp:tag_name><![CDATA[IIS]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>81</wp:term_id><wp:tag_slug>jabbr</wp:tag_slug><wp:tag_name><![CDATA[jabbr]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>40</wp:term_id><wp:tag_slug>javascript</wp:tag_slug><wp:tag_name><![CDATA[Javascript]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>30</wp:term_id><wp:tag_slug>json</wp:tag_slug><wp:tag_name><![CDATA[JSON]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>62</wp:term_id><wp:tag_slug>linq</wp:tag_slug><wp:tag_name><![CDATA[Linq]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>61</wp:term_id><wp:tag_slug>linq2rest</wp:tag_slug><wp:tag_name><![CDATA[Linq2Rest]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>79</wp:term_id><wp:tag_slug>mmbot</wp:tag_slug><wp:tag_name><![CDATA[mmbot]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>35</wp:term_id><wp:tag_slug>ms-test</wp:tag_slug><wp:tag_name><![CDATA[MS Test]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>10</wp:term_id><wp:tag_slug>nhibernate</wp:tag_slug><wp:tag_name><![CDATA[NHibernate]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>72</wp:term_id><wp:tag_slug>nokia</wp:tag_slug><wp:tag_name><![CDATA[Nokia]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>63</wp:term_id><wp:tag_slug>odata-2</wp:tag_slug><wp:tag_name><![CDATA[oData]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>36</wp:term_id><wp:tag_slug>office</wp:tag_slug><wp:tag_name><![CDATA[Office]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>38</wp:term_id><wp:tag_slug>orm</wp:tag_slug><wp:tag_name><![CDATA[ORM]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>65</wp:term_id><wp:tag_slug>pushqa</wp:tag_slug><wp:tag_name><![CDATA[Pushqa]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>60</wp:term_id><wp:tag_slug>rest</wp:tag_slug><wp:tag_name><![CDATA[REST]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>57</wp:term_id><wp:tag_slug>rx</wp:tag_slug><wp:tag_name><![CDATA[Rx]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>34</wp:term_id><wp:tag_slug>serialization</wp:tag_slug><wp:tag_name><![CDATA[Serialization]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>53</wp:term_id><wp:tag_slug>signalr</wp:tag_slug><wp:tag_name><![CDATA[SignalR]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>33</wp:term_id><wp:tag_slug>silverlight</wp:tag_slug><wp:tag_name><![CDATA[Silverlight]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>37</wp:term_id><wp:tag_slug>t4</wp:tag_slug><wp:tag_name><![CDATA[T4]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>28</wp:term_id><wp:tag_slug>task</wp:tag_slug><wp:tag_name><![CDATA[Task]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>29</wp:term_id><wp:tag_slug>tdd</wp:tag_slug><wp:tag_name><![CDATA[TDD]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>39</wp:term_id><wp:tag_slug>tfs</wp:tag_slug><wp:tag_name><![CDATA[TFS]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>50</wp:term_id><wp:tag_slug>trackingviewer</wp:tag_slug><wp:tag_name><![CDATA[TrackingViewer]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>20</wp:term_id><wp:tag_slug>unit-testing</wp:tag_slug><wp:tag_name><![CDATA[Unit Testing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>12</wp:term_id><wp:tag_slug>visual-studio</wp:tag_slug><wp:tag_name><![CDATA[Visual Studio]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>47</wp:term_id><wp:tag_slug>vsx</wp:tag_slug><wp:tag_name><![CDATA[VSX]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>7</wp:term_id><wp:tag_slug>wcf</wp:tag_slug><wp:tag_name><![CDATA[WCF]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>58</wp:term_id><wp:tag_slug>web-api</wp:tag_slug><wp:tag_name><![CDATA[Web API]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>26</wp:term_id><wp:tag_slug>wf</wp:tag_slug><wp:tag_name><![CDATA[WF]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug>wf4</wp:tag_slug><wp:tag_name><![CDATA[WF4]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>25</wp:term_id><wp:tag_slug>workflow</wp:tag_slug><wp:tag_name><![CDATA[Workflow]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>71</wp:term_id><wp:tag_slug>wp8</wp:tag_slug><wp:tag_name><![CDATA[WP8]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>14</wp:term_id><wp:tag_slug>wpf</wp:tag_slug><wp:tag_name><![CDATA[WPF]]></wp:tag_name></wp:tag>
	<wp:term><wp:term_id>66</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>primary-navigation</wp:term_slug><wp:term_name><![CDATA[Primary Navigation]]></wp:term_name></wp:term>

	<generator>http://wordpress.org/?v=3.8.3</generator>

	<item>
				<title>EnterpriseWorkflowDemo.zip</title>
		<link>http://blog.petegoo.com/index.php/2011/08/29/code-and-slides-for-teched-nz-2011dev-404-hardcore-workflow/enterpriseworkflowdemo-zip/</link>
		<pubDate>Sun, 28 Aug 2011 23:32:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/08/EnterpriseWorkflowDemo.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>214</wp:post_id>
		<wp:post_date>2011-08-29 12:32:59</wp:post_date>
		<wp:post_date_gmt>2011-08-28 23:32:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>enterpriseworkflowdemo-zip</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>216</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/08/EnterpriseWorkflowDemo.zip</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/08/EnterpriseWorkflowDemo.zip]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>DEV404-HardCoreWorkflow4.pptx</title>
		<link>http://blog.petegoo.com/index.php/2011/08/29/code-and-slides-for-teched-nz-2011dev-404-hardcore-workflow/dev404-hardcoreworkflow4-pptx/</link>
		<pubDate>Sun, 28 Aug 2011 23:33:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/08/DEV404-HardCoreWorkflow4.pptx</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>215</wp:post_id>
		<wp:post_date>2011-08-29 12:33:12</wp:post_date>
		<wp:post_date_gmt>2011-08-28 23:33:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dev404-hardcoreworkflow4-pptx</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>216</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/08/DEV404-HardCoreWorkflow4.pptx</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/08/DEV404-HardCoreWorkflow4.pptx]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture1.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/09/03/activities-vs-wf-services-in-search-of-the-ideal-authoring-experience/croppercapture1-jpg/</link>
		<pubDate>Sat, 03 Sep 2011 04:55:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>219</wp:post_id>
		<wp:post_date>2011-09-03 17:55:13</wp:post_date>
		<wp:post_date_gmt>2011-09-03 04:55:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture1-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>229</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/CropperCapture1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"699";s:6:"height";s:3:"257";s:14:"hwstring_small";s:23:"height='47' width='128'";s:4:"file";s:27:"2011/09/CropperCapture1.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"CropperCapture1-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"CropperCapture1-300x110.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"110";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture1_thumb.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/09/03/activities-vs-wf-services-in-search-of-the-ideal-authoring-experience/croppercapture1_thumb-jpg/</link>
		<pubDate>Sat, 03 Sep 2011 04:55:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture1_thumb.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>220</wp:post_id>
		<wp:post_date>2011-09-03 17:55:15</wp:post_date>
		<wp:post_date_gmt>2011-09-03 04:55:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture1_thumb-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>229</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture1_thumb.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/CropperCapture1_thumb.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"504";s:6:"height";s:3:"188";s:14:"hwstring_small";s:23:"height='47' width='128'";s:4:"file";s:33:"2011/09/CropperCapture1_thumb.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:33:"CropperCapture1_thumb-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:33:"CropperCapture1_thumb-300x111.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"111";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture3.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/09/03/activities-vs-wf-services-in-search-of-the-ideal-authoring-experience/croppercapture3-jpg/</link>
		<pubDate>Sat, 03 Sep 2011 04:55:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture3.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>221</wp:post_id>
		<wp:post_date>2011-09-03 17:55:17</wp:post_date>
		<wp:post_date_gmt>2011-09-03 04:55:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture3-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>229</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture3.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/CropperCapture3.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"280";s:6:"height";s:3:"136";s:14:"hwstring_small";s:23:"height='62' width='128'";s:4:"file";s:27:"2011/09/CropperCapture3.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"CropperCapture3-150x136.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"136";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture3_thumb.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/09/03/activities-vs-wf-services-in-search-of-the-ideal-authoring-experience/croppercapture3_thumb-jpg/</link>
		<pubDate>Sat, 03 Sep 2011 04:55:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture3_thumb.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>222</wp:post_id>
		<wp:post_date>2011-09-03 17:55:18</wp:post_date>
		<wp:post_date_gmt>2011-09-03 04:55:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture3_thumb-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>229</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture3_thumb.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"244";s:6:"height";s:3:"121";s:14:"hwstring_small";s:23:"height='63' width='128'";s:4:"file";s:33:"2011/09/CropperCapture3_thumb.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:33:"CropperCapture3_thumb-150x121.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"121";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/CropperCapture3_thumb.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture4.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/09/03/activities-vs-wf-services-in-search-of-the-ideal-authoring-experience/croppercapture4-jpg/</link>
		<pubDate>Sat, 03 Sep 2011 04:55:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture4.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>223</wp:post_id>
		<wp:post_date>2011-09-03 17:55:20</wp:post_date>
		<wp:post_date_gmt>2011-09-03 04:55:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture4-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>229</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture4.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/CropperCapture4.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"356";s:6:"height";s:3:"504";s:14:"hwstring_small";s:22:"height='96' width='67'";s:4:"file";s:27:"2011/09/CropperCapture4.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"CropperCapture4-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"CropperCapture4-211x300.jpg";s:5:"width";s:3:"211";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture4_thumb.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/09/03/activities-vs-wf-services-in-search-of-the-ideal-authoring-experience/croppercapture4_thumb-jpg/</link>
		<pubDate>Sat, 03 Sep 2011 04:55:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture4_thumb.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>224</wp:post_id>
		<wp:post_date>2011-09-03 17:55:22</wp:post_date>
		<wp:post_date_gmt>2011-09-03 04:55:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture4_thumb-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>229</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture4_thumb.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/CropperCapture4_thumb.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"304";s:6:"height";s:3:"428";s:14:"hwstring_small";s:22:"height='96' width='68'";s:4:"file";s:33:"2011/09/CropperCapture4_thumb.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:33:"CropperCapture4_thumb-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:33:"CropperCapture4_thumb-213x300.jpg";s:5:"width";s:3:"213";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture5.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/09/03/activities-vs-wf-services-in-search-of-the-ideal-authoring-experience/croppercapture5-jpg/</link>
		<pubDate>Sat, 03 Sep 2011 04:55:24 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture5.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date>2011-09-03 17:55:24</wp:post_date>
		<wp:post_date_gmt>2011-09-03 04:55:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture5-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>229</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture5.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/CropperCapture5.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"284";s:6:"height";s:3:"605";s:14:"hwstring_small";s:22:"height='96' width='45'";s:4:"file";s:27:"2011/09/CropperCapture5.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"CropperCapture5-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"CropperCapture5-140x300.jpg";s:5:"width";s:3:"140";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture5_thumb.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/09/03/activities-vs-wf-services-in-search-of-the-ideal-authoring-experience/croppercapture5_thumb-jpg/</link>
		<pubDate>Sat, 03 Sep 2011 04:55:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture5_thumb.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date>2011-09-03 17:55:26</wp:post_date>
		<wp:post_date_gmt>2011-09-03 04:55:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture5_thumb-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>229</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture5_thumb.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/CropperCapture5_thumb.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"229";s:6:"height";s:3:"484";s:14:"hwstring_small";s:22:"height='96' width='45'";s:4:"file";s:33:"2011/09/CropperCapture5_thumb.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:33:"CropperCapture5_thumb-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:33:"CropperCapture5_thumb-141x300.jpg";s:5:"width";s:3:"141";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture6.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/09/03/activities-vs-wf-services-in-search-of-the-ideal-authoring-experience/croppercapture6-jpg/</link>
		<pubDate>Sat, 03 Sep 2011 04:55:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture6.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>227</wp:post_id>
		<wp:post_date>2011-09-03 17:55:28</wp:post_date>
		<wp:post_date_gmt>2011-09-03 04:55:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture6-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>229</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture6.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/CropperCapture6.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"697";s:6:"height";s:3:"237";s:14:"hwstring_small";s:23:"height='43' width='128'";s:4:"file";s:27:"2011/09/CropperCapture6.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"CropperCapture6-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"CropperCapture6-300x102.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"102";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture6_thumb.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/09/03/activities-vs-wf-services-in-search-of-the-ideal-authoring-experience/croppercapture6_thumb-jpg/</link>
		<pubDate>Sat, 03 Sep 2011 04:55:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture6_thumb.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date>2011-09-03 17:55:30</wp:post_date>
		<wp:post_date_gmt>2011-09-03 04:55:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture6_thumb-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>229</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture6_thumb.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/CropperCapture6_thumb.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"504";s:6:"height";s:3:"174";s:14:"hwstring_small";s:23:"height='44' width='128'";s:4:"file";s:33:"2011/09/CropperCapture6_thumb.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:33:"CropperCapture6_thumb-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:33:"CropperCapture6_thumb-300x103.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"103";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture7.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/09/07/hosting-an-activity-as-a-service-using-the-workflowservicehostfactory/croppercapture7-jpg/</link>
		<pubDate>Wed, 07 Sep 2011 08:57:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture7.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>236</wp:post_id>
		<wp:post_date>2011-09-07 21:57:38</wp:post_date>
		<wp:post_date_gmt>2011-09-07 08:57:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture7-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture7.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/CropperCapture7.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"405";s:6:"height";s:3:"343";s:14:"hwstring_small";s:23:"height='96' width='113'";s:4:"file";s:27:"2011/09/CropperCapture7.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"CropperCapture7-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"CropperCapture7-300x254.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"254";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture7_thumb.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/09/07/hosting-an-activity-as-a-service-using-the-workflowservicehostfactory/croppercapture7_thumb-jpg/</link>
		<pubDate>Wed, 07 Sep 2011 08:57:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture7_thumb.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>237</wp:post_id>
		<wp:post_date>2011-09-07 21:57:39</wp:post_date>
		<wp:post_date_gmt>2011-09-07 08:57:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture7_thumb-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture7_thumb.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/CropperCapture7_thumb.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"304";s:6:"height";s:3:"258";s:14:"hwstring_small";s:23:"height='96' width='113'";s:4:"file";s:33:"2011/09/CropperCapture7_thumb.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:33:"CropperCapture7_thumb-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:33:"CropperCapture7_thumb-300x254.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"254";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture8.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/09/19/starting-wf-instances-using-the-creation-endpoint/croppercapture8-jpg/</link>
		<pubDate>Mon, 19 Sep 2011 10:56:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture8.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>245</wp:post_id>
		<wp:post_date>2011-09-19 23:56:38</wp:post_date>
		<wp:post_date_gmt>2011-09-19 10:56:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture8-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>247</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture8.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/CropperCapture8.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"638";s:6:"height";s:3:"354";s:14:"hwstring_small";s:23:"height='71' width='128'";s:4:"file";s:27:"2011/09/CropperCapture8.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"CropperCapture8-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"CropperCapture8-300x166.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"166";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture8_thumb.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/09/19/starting-wf-instances-using-the-creation-endpoint/croppercapture8_thumb-jpg/</link>
		<pubDate>Mon, 19 Sep 2011 10:56:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture8_thumb.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>246</wp:post_id>
		<wp:post_date>2011-09-19 23:56:42</wp:post_date>
		<wp:post_date_gmt>2011-09-19 10:56:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture8_thumb-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>247</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture8_thumb.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/CropperCapture8_thumb.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"504";s:6:"height";s:3:"281";s:14:"hwstring_small";s:23:"height='71' width='128'";s:4:"file";s:33:"2011/09/CropperCapture8_thumb.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:33:"CropperCapture8_thumb-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:33:"CropperCapture8_thumb-300x167.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"167";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>EnterpriseWorkflowDemo.zip</title>
		<link>http://blog.petegoo.com/index.php/2011/09/23/responding-to-wf-completion-using-the-creation-context/enterpriseworkflowdemo-zip-2/</link>
		<pubDate>Thu, 22 Sep 2011 11:39:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/EnterpriseWorkflowDemo.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date>2011-09-23 00:39:08</wp:post_date>
		<wp:post_date_gmt>2011-09-22 11:39:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>enterpriseworkflowdemo-zip-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>252</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/EnterpriseWorkflowDemo.zip</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/EnterpriseWorkflowDemo.zip]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>download</title>
		<link>http://blog.petegoo.com/?attachment_id=253</link>
		<pubDate>Thu, 22 Sep 2011 11:52:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/download.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>253</wp:post_id>
		<wp:post_date>2011-09-23 00:52:54</wp:post_date>
		<wp:post_date_gmt>2011-09-22 11:52:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>download</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/download.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/download.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:2:"16";s:6:"height";s:2:"16";s:14:"hwstring_small";s:22:"height='16' width='16'";s:4:"file";s:20:"2011/09/download.gif";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>EnterpriseWorkflowDemo.zip</title>
		<link>http://blog.petegoo.com/index.php/2011/09/23/responding-to-wf-completion-using-the-creation-context/enterpriseworkflowdemo-zip-3/</link>
		<pubDate>Thu, 22 Sep 2011 11:58:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/EnterpriseWorkflowDemo1.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>254</wp:post_id>
		<wp:post_date>2011-09-23 00:58:44</wp:post_date>
		<wp:post_date_gmt>2011-09-22 11:58:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>enterpriseworkflowdemo-zip-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>252</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/EnterpriseWorkflowDemo1.zip</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/EnterpriseWorkflowDemo1.zip]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Visual-Studio-Extensibility-DSL-Tools-and-T4.pptx</title>
		<link>http://blog.petegoo.com/?attachment_id=261</link>
		<pubDate>Wed, 28 Sep 2011 06:48:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/Visual-Studio-Extensibility-DSL-Tools-and-T4.pptx</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>261</wp:post_id>
		<wp:post_date>2011-09-28 19:48:05</wp:post_date>
		<wp:post_date_gmt>2011-09-28 06:48:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>visual-studio-extensibility-dsl-tools-and-t4-pptx</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/Visual-Studio-Extensibility-DSL-Tools-and-T4.pptx</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/Visual-Studio-Extensibility-DSL-Tools-and-T4.pptx]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Visual-Studio-Extensibility-DSL-Tools-and-T4.pptx</title>
		<link>http://blog.petegoo.com/?attachment_id=262</link>
		<pubDate>Wed, 28 Sep 2011 06:48:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/Visual-Studio-Extensibility-DSL-Tools-and-T41.pptx</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>262</wp:post_id>
		<wp:post_date>2011-09-28 19:48:53</wp:post_date>
		<wp:post_date_gmt>2011-09-28 06:48:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>visual-studio-extensibility-dsl-tools-and-t4-pptx-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/Visual-Studio-Extensibility-DSL-Tools-and-T41.pptx</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/Visual-Studio-Extensibility-DSL-Tools-and-T41.pptx]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Visual-Studio-Extensibility-DSL-Tools-and-T4.pptx</title>
		<link>http://blog.petegoo.com/index.php/2011/09/28/slides-and-code-for-visual-studio-extensibility-dsl-and-t4/visual-studio-extensibility-dsl-tools-and-t4-pptx-3/</link>
		<pubDate>Wed, 28 Sep 2011 06:53:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/Visual-Studio-Extensibility-DSL-Tools-and-T42.pptx</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>263</wp:post_id>
		<wp:post_date>2011-09-28 19:53:51</wp:post_date>
		<wp:post_date_gmt>2011-09-28 06:53:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>visual-studio-extensibility-dsl-tools-and-t4-pptx-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>266</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/Visual-Studio-Extensibility-DSL-Tools-and-T42.pptx</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/Visual-Studio-Extensibility-DSL-Tools-and-T42.pptx]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>SnippetFile1.snippet.txt</title>
		<link>http://blog.petegoo.com/index.php/2011/09/28/slides-and-code-for-visual-studio-extensibility-dsl-and-t4/snippetfile1-snippet-txt/</link>
		<pubDate>Wed, 28 Sep 2011 06:53:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/SnippetFile1.snippet.txt</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>264</wp:post_id>
		<wp:post_date>2011-09-28 19:53:52</wp:post_date>
		<wp:post_date_gmt>2011-09-28 06:53:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>snippetfile1-snippet-txt</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>266</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/SnippetFile1.snippet.txt</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/SnippetFile1.snippet.txt]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>ViewModels.tt_.txt</title>
		<link>http://blog.petegoo.com/index.php/2011/09/28/slides-and-code-for-visual-studio-extensibility-dsl-and-t4/viewmodels-tt_-txt/</link>
		<pubDate>Wed, 28 Sep 2011 06:53:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/ViewModels.tt_.txt</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>265</wp:post_id>
		<wp:post_date>2011-09-28 19:53:53</wp:post_date>
		<wp:post_date_gmt>2011-09-28 06:53:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>viewmodels-tt_-txt</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>266</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/ViewModels.tt_.txt</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/ViewModels.tt_.txt]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Language4</title>
		<link>http://blog.petegoo.com/?attachment_id=267</link>
		<pubDate>Wed, 28 Sep 2011 21:25:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/09/Language4.zip</guid>
		<description></description>
		<content:encoded><![CDATA[A DSL Tools class designer project with a debugging solution that contains a viewmodels.tt file to generate a view model]]></content:encoded>
		<excerpt:encoded><![CDATA[DSL Class Designer Sample]]></excerpt:encoded>
		<wp:post_id>267</wp:post_id>
		<wp:post_date>2011-09-29 10:25:26</wp:post_date>
		<wp:post_date_gmt>2011-09-28 21:25:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>language4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/09/Language4.zip</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/Language4.zip]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture9.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/10/02/workflow-service-tracking-viewer/croppercapture9-jpg/</link>
		<pubDate>Sun, 02 Oct 2011 01:27:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/10/CropperCapture9.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>274</wp:post_id>
		<wp:post_date>2011-10-02 14:27:45</wp:post_date>
		<wp:post_date_gmt>2011-10-02 01:27:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture9-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>282</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/10/CropperCapture9.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/10/CropperCapture9.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"842";s:6:"height";s:3:"445";s:14:"hwstring_small";s:23:"height='67' width='128'";s:4:"file";s:27:"2011/10/CropperCapture9.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"CropperCapture9-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"CropperCapture9-300x158.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"158";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture9_thumb.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/10/02/workflow-service-tracking-viewer/croppercapture9_thumb-jpg/</link>
		<pubDate>Sun, 02 Oct 2011 01:27:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/10/CropperCapture9_thumb.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date>2011-10-02 14:27:47</wp:post_date>
		<wp:post_date_gmt>2011-10-02 01:27:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture9_thumb-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>282</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/10/CropperCapture9_thumb.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/10/CropperCapture9_thumb.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"404";s:6:"height";s:3:"215";s:14:"hwstring_small";s:23:"height='68' width='128'";s:4:"file";s:33:"2011/10/CropperCapture9_thumb.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:33:"CropperCapture9_thumb-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:33:"CropperCapture9_thumb-300x159.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"159";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>TrackingViewerEmpty.png</title>
		<link>http://blog.petegoo.com/index.php/2011/10/02/workflow-service-tracking-viewer/trackingviewerempty-png/</link>
		<pubDate>Sun, 02 Oct 2011 01:27:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/10/TrackingViewerEmpty.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>276</wp:post_id>
		<wp:post_date>2011-10-02 14:27:48</wp:post_date>
		<wp:post_date_gmt>2011-10-02 01:27:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>trackingviewerempty-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>282</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/10/TrackingViewerEmpty.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/10/TrackingViewerEmpty.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"870";s:6:"height";s:3:"212";s:14:"hwstring_small";s:23:"height='31' width='128'";s:4:"file";s:31:"2011/10/TrackingViewerEmpty.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:31:"TrackingViewerEmpty-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:30:"TrackingViewerEmpty-300x73.png";s:5:"width";s:3:"300";s:6:"height";s:2:"73";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>TrackingViewerEmpty_thumb.png</title>
		<link>http://blog.petegoo.com/index.php/2011/10/02/workflow-service-tracking-viewer/trackingviewerempty_thumb-png/</link>
		<pubDate>Sun, 02 Oct 2011 01:27:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/10/TrackingViewerEmpty_thumb.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>277</wp:post_id>
		<wp:post_date>2011-10-02 14:27:50</wp:post_date>
		<wp:post_date_gmt>2011-10-02 01:27:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>trackingviewerempty_thumb-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>282</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/10/TrackingViewerEmpty_thumb.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/10/TrackingViewerEmpty_thumb.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"454";s:6:"height";s:3:"113";s:14:"hwstring_small";s:23:"height='31' width='128'";s:4:"file";s:37:"2011/10/TrackingViewerEmpty_thumb.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:37:"TrackingViewerEmpty_thumb-150x113.png";s:5:"width";s:3:"150";s:6:"height";s:3:"113";}s:6:"medium";a:3:{s:4:"file";s:36:"TrackingViewerEmpty_thumb-300x74.png";s:5:"width";s:3:"300";s:6:"height";s:2:"74";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>wcfTestClient.png</title>
		<link>http://blog.petegoo.com/index.php/2011/10/02/workflow-service-tracking-viewer/wcftestclient-png/</link>
		<pubDate>Sun, 02 Oct 2011 01:27:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/10/wcfTestClient.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>278</wp:post_id>
		<wp:post_date>2011-10-02 14:27:52</wp:post_date>
		<wp:post_date_gmt>2011-10-02 01:27:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wcftestclient-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>282</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/10/wcfTestClient.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/10/wcfTestClient.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"806";s:6:"height";s:3:"510";s:14:"hwstring_small";s:23:"height='80' width='128'";s:4:"file";s:25:"2011/10/wcfTestClient.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:25:"wcfTestClient-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:25:"wcfTestClient-300x189.png";s:5:"width";s:3:"300";s:6:"height";s:3:"189";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>wcfTestClient_thumb.png</title>
		<link>http://blog.petegoo.com/index.php/2011/10/02/workflow-service-tracking-viewer/wcftestclient_thumb-png/</link>
		<pubDate>Sun, 02 Oct 2011 01:27:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/10/wcfTestClient_thumb.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>279</wp:post_id>
		<wp:post_date>2011-10-02 14:27:53</wp:post_date>
		<wp:post_date_gmt>2011-10-02 01:27:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wcftestclient_thumb-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>282</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/10/wcfTestClient_thumb.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/10/wcfTestClient_thumb.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"454";s:6:"height";s:3:"289";s:14:"hwstring_small";s:23:"height='81' width='128'";s:4:"file";s:31:"2011/10/wcfTestClient_thumb.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:31:"wcfTestClient_thumb-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:31:"wcfTestClient_thumb-300x190.png";s:5:"width";s:3:"300";s:6:"height";s:3:"190";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>trackingviewer.png</title>
		<link>http://blog.petegoo.com/index.php/2011/10/02/workflow-service-tracking-viewer/trackingviewer-png/</link>
		<pubDate>Sun, 02 Oct 2011 01:27:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/10/trackingviewer.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>280</wp:post_id>
		<wp:post_date>2011-10-02 14:27:55</wp:post_date>
		<wp:post_date_gmt>2011-10-02 01:27:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>trackingviewer-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>282</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/10/trackingviewer.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/10/trackingviewer.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"870";s:6:"height";s:3:"418";s:14:"hwstring_small";s:23:"height='61' width='128'";s:4:"file";s:26:"2011/10/trackingviewer.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:26:"trackingviewer-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:26:"trackingviewer-300x144.png";s:5:"width";s:3:"300";s:6:"height";s:3:"144";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>trackingviewer_thumb.png</title>
		<link>http://blog.petegoo.com/index.php/2011/10/02/workflow-service-tracking-viewer/trackingviewer_thumb-png/</link>
		<pubDate>Sun, 02 Oct 2011 01:27:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/10/trackingviewer_thumb.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>281</wp:post_id>
		<wp:post_date>2011-10-02 14:27:57</wp:post_date>
		<wp:post_date_gmt>2011-10-02 01:27:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>trackingviewer_thumb-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>282</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/10/trackingviewer_thumb.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/10/trackingviewer_thumb.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"454";s:6:"height";s:3:"220";s:14:"hwstring_small";s:23:"height='62' width='128'";s:4:"file";s:32:"2011/10/trackingviewer_thumb.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:32:"trackingviewer_thumb-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:32:"trackingviewer_thumb-300x145.png";s:5:"width";s:3:"300";s:6:"height";s:3:"145";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>UnitTestingActivities</title>
		<link>http://blog.petegoo.com/?attachment_id=285</link>
		<pubDate>Sun, 02 Oct 2011 06:37:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/10/UnitTestingActivities.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>285</wp:post_id>
		<wp:post_date>2011-10-02 19:37:30</wp:post_date>
		<wp:post_date_gmt>2011-10-02 06:37:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>unittestingactivities</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/10/UnitTestingActivities.zip</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/10/UnitTestingActivities.zip]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>TrackingSample</title>
		<link>http://blog.petegoo.com/?attachment_id=287</link>
		<pubDate>Wed, 05 Oct 2011 06:59:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/10/TrackingSample.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>287</wp:post_id>
		<wp:post_date>2011-10-05 19:59:29</wp:post_date>
		<wp:post_date_gmt>2011-10-05 06:59:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>trackingsample</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/10/TrackingSample.zip</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/10/TrackingSample.zip]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture1.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/11/22/building-an-auto-complete-control-with-reactive-extensions-rx/croppercapture1-jpg-2/</link>
		<pubDate>Tue, 22 Nov 2011 10:27:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>300</wp:post_id>
		<wp:post_date>2011-11-22 23:27:29</wp:post_date>
		<wp:post_date_gmt>2011-11-22 10:27:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture1-jpg-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>309</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/11/CropperCapture1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"589";s:6:"height";s:3:"392";s:14:"hwstring_small";s:23:"height='85' width='128'";s:4:"file";s:27:"2011/11/CropperCapture1.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"CropperCapture1-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"CropperCapture1-300x199.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"199";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture1_thumb.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/11/22/building-an-auto-complete-control-with-reactive-extensions-rx/croppercapture1_thumb-jpg-2/</link>
		<pubDate>Tue, 22 Nov 2011 10:27:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture1_thumb.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>301</wp:post_id>
		<wp:post_date>2011-11-22 23:27:32</wp:post_date>
		<wp:post_date_gmt>2011-11-22 10:27:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture1_thumb-jpg-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>309</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture1_thumb.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/11/CropperCapture1_thumb.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"478";s:6:"height";s:3:"320";s:14:"hwstring_small";s:23:"height='85' width='128'";s:4:"file";s:33:"2011/11/CropperCapture1_thumb.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:33:"CropperCapture1_thumb-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:33:"CropperCapture1_thumb-300x200.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"200";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture2.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/11/22/building-an-auto-complete-control-with-reactive-extensions-rx/croppercapture2-jpg/</link>
		<pubDate>Tue, 22 Nov 2011 10:27:34 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>302</wp:post_id>
		<wp:post_date>2011-11-22 23:27:34</wp:post_date>
		<wp:post_date_gmt>2011-11-22 10:27:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture2-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>309</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture2.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/11/CropperCapture2.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"825";s:6:"height";s:3:"451";s:14:"hwstring_small";s:23:"height='69' width='128'";s:4:"file";s:27:"2011/11/CropperCapture2.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"CropperCapture2-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"CropperCapture2-300x164.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"164";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture2_thumb.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/11/22/building-an-auto-complete-control-with-reactive-extensions-rx/croppercapture2_thumb-jpg/</link>
		<pubDate>Tue, 22 Nov 2011 10:27:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture2_thumb.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>303</wp:post_id>
		<wp:post_date>2011-11-22 23:27:36</wp:post_date>
		<wp:post_date_gmt>2011-11-22 10:27:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture2_thumb-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>309</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture2_thumb.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/11/CropperCapture2_thumb.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"521";s:6:"height";s:3:"286";s:14:"hwstring_small";s:23:"height='70' width='128'";s:4:"file";s:33:"2011/11/CropperCapture2_thumb.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:33:"CropperCapture2_thumb-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:33:"CropperCapture2_thumb-300x164.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"164";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture4.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/11/22/building-an-auto-complete-control-with-reactive-extensions-rx/croppercapture4-jpg-2/</link>
		<pubDate>Tue, 22 Nov 2011 10:27:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture4.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>304</wp:post_id>
		<wp:post_date>2011-11-22 23:27:39</wp:post_date>
		<wp:post_date_gmt>2011-11-22 10:27:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture4-jpg-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>309</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture4.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/11/CropperCapture4.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"463";s:6:"height";s:3:"292";s:14:"hwstring_small";s:23:"height='80' width='128'";s:4:"file";s:27:"2011/11/CropperCapture4.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"CropperCapture4-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"CropperCapture4-300x189.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"189";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture4_thumb.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/11/22/building-an-auto-complete-control-with-reactive-extensions-rx/croppercapture4_thumb-jpg-2/</link>
		<pubDate>Tue, 22 Nov 2011 10:27:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture4_thumb.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>305</wp:post_id>
		<wp:post_date>2011-11-22 23:27:41</wp:post_date>
		<wp:post_date_gmt>2011-11-22 10:27:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture4_thumb-jpg-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>309</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture4_thumb.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/11/CropperCapture4_thumb.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"477";s:6:"height";s:3:"302";s:14:"hwstring_small";s:23:"height='81' width='128'";s:4:"file";s:33:"2011/11/CropperCapture4_thumb.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:33:"CropperCapture4_thumb-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:33:"CropperCapture4_thumb-300x189.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"189";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture5.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/11/22/building-an-auto-complete-control-with-reactive-extensions-rx/croppercapture5-jpg-2/</link>
		<pubDate>Tue, 22 Nov 2011 10:27:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture5.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>306</wp:post_id>
		<wp:post_date>2011-11-22 23:27:43</wp:post_date>
		<wp:post_date_gmt>2011-11-22 10:27:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture5-jpg-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>309</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture5.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/11/CropperCapture5.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"425";s:6:"height";s:3:"179";s:14:"hwstring_small";s:23:"height='53' width='128'";s:4:"file";s:27:"2011/11/CropperCapture5.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"CropperCapture5-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"CropperCapture5-300x126.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"126";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CropperCapture5_thumb.jpg</title>
		<link>http://blog.petegoo.com/index.php/2011/11/22/building-an-auto-complete-control-with-reactive-extensions-rx/croppercapture5_thumb-jpg-2/</link>
		<pubDate>Tue, 22 Nov 2011 10:27:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture5_thumb.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>307</wp:post_id>
		<wp:post_date>2011-11-22 23:27:45</wp:post_date>
		<wp:post_date_gmt>2011-11-22 10:27:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture5_thumb-jpg-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>309</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture5_thumb.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/11/CropperCapture5_thumb.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"428";s:6:"height";s:3:"182";s:14:"hwstring_small";s:23:"height='54' width='128'";s:4:"file";s:33:"2011/11/CropperCapture5_thumb.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:33:"CropperCapture5_thumb-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:33:"CropperCapture5_thumb-300x127.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"127";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>AutoCompleteBlog.zip</title>
		<link>http://blog.petegoo.com/index.php/2011/11/22/building-an-auto-complete-control-with-reactive-extensions-rx/autocompleteblog-zip/</link>
		<pubDate>Tue, 22 Nov 2011 10:28:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2011/11/AutoCompleteBlog.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>308</wp:post_id>
		<wp:post_date>2011-11-22 23:28:05</wp:post_date>
		<wp:post_date_gmt>2011-11-22 10:28:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>autocompleteblog-zip</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>309</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2011/11/AutoCompleteBlog.zip</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/11/AutoCompleteBlog.zip]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>RxMessageProcessing1.png</title>
		<link>http://blog.petegoo.com/index.php/2013/01/20/reactive-extensions-in-message-processing/rxmessageprocessing1-png/</link>
		<pubDate>Sun, 20 Jan 2013 10:04:24 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>390</wp:post_id>
		<wp:post_date>2013-01-20 23:04:24</wp:post_date>
		<wp:post_date_gmt>2013-01-20 10:04:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rxmessageprocessing1-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>400</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:450;s:6:"height";i:189;s:4:"file";s:32:"2013/01/RxMessageProcessing1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:32:"RxMessageProcessing1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:32:"RxMessageProcessing1-300x126.png";s:5:"width";i:300;s:6:"height";i:126;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/RxMessageProcessing1.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>RxMessageProcessing1_thumb.png</title>
		<link>http://blog.petegoo.com/index.php/2013/01/20/reactive-extensions-in-message-processing/rxmessageprocessing1_thumb-png/</link>
		<pubDate>Sun, 20 Jan 2013 10:04:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing1_thumb.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>391</wp:post_id>
		<wp:post_date>2013-01-20 23:04:26</wp:post_date>
		<wp:post_date_gmt>2013-01-20 10:04:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rxmessageprocessing1_thumb-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>400</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing1_thumb.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/RxMessageProcessing1_thumb.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:454;s:6:"height";i:193;s:4:"file";s:38:"2013/01/RxMessageProcessing1_thumb.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"RxMessageProcessing1_thumb-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:38:"RxMessageProcessing1_thumb-300x127.png";s:5:"width";i:300;s:6:"height";i:127;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>LoadLevelling.png</title>
		<link>http://blog.petegoo.com/index.php/2013/01/20/reactive-extensions-in-message-processing/loadlevelling-png/</link>
		<pubDate>Sun, 20 Jan 2013 10:04:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/01/LoadLevelling.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>392</wp:post_id>
		<wp:post_date>2013-01-20 23:04:27</wp:post_date>
		<wp:post_date_gmt>2013-01-20 10:04:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>loadlevelling-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>400</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/01/LoadLevelling.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/LoadLevelling.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:493;s:6:"height";i:668;s:4:"file";s:25:"2013/01/LoadLevelling.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"LoadLevelling-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"LoadLevelling-221x300.png";s:5:"width";i:221;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>LoadLevelling_thumb.png</title>
		<link>http://blog.petegoo.com/index.php/2013/01/20/reactive-extensions-in-message-processing/loadlevelling_thumb-png/</link>
		<pubDate>Sun, 20 Jan 2013 10:04:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/01/LoadLevelling_thumb.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>393</wp:post_id>
		<wp:post_date>2013-01-20 23:04:28</wp:post_date>
		<wp:post_date_gmt>2013-01-20 10:04:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>loadlevelling_thumb-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>400</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/01/LoadLevelling_thumb.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/LoadLevelling_thumb.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:497;s:6:"height";i:672;s:4:"file";s:31:"2013/01/LoadLevelling_thumb.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"LoadLevelling_thumb-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:31:"LoadLevelling_thumb-221x300.png";s:5:"width";i:221;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>RxMessageProcessing2.png</title>
		<link>http://blog.petegoo.com/index.php/2013/01/20/reactive-extensions-in-message-processing/rxmessageprocessing2-png/</link>
		<pubDate>Sun, 20 Jan 2013 10:04:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>394</wp:post_id>
		<wp:post_date>2013-01-20 23:04:29</wp:post_date>
		<wp:post_date_gmt>2013-01-20 10:04:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rxmessageprocessing2-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>400</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/RxMessageProcessing2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:450;s:6:"height";i:189;s:4:"file";s:32:"2013/01/RxMessageProcessing2.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:32:"RxMessageProcessing2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:32:"RxMessageProcessing2-300x126.png";s:5:"width";i:300;s:6:"height";i:126;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>RxMessageProcessing2_thumb.png</title>
		<link>http://blog.petegoo.com/index.php/2013/01/20/reactive-extensions-in-message-processing/rxmessageprocessing2_thumb-png/</link>
		<pubDate>Sun, 20 Jan 2013 10:04:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing2_thumb.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>395</wp:post_id>
		<wp:post_date>2013-01-20 23:04:30</wp:post_date>
		<wp:post_date_gmt>2013-01-20 10:04:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rxmessageprocessing2_thumb-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>400</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing2_thumb.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/RxMessageProcessing2_thumb.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:454;s:6:"height";i:193;s:4:"file";s:38:"2013/01/RxMessageProcessing2_thumb.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"RxMessageProcessing2_thumb-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:38:"RxMessageProcessing2_thumb-300x127.png";s:5:"width";i:300;s:6:"height";i:127;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>RxMessageProcessing3.png</title>
		<link>http://blog.petegoo.com/index.php/2013/01/20/reactive-extensions-in-message-processing/rxmessageprocessing3-png/</link>
		<pubDate>Sun, 20 Jan 2013 10:04:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>396</wp:post_id>
		<wp:post_date>2013-01-20 23:04:31</wp:post_date>
		<wp:post_date_gmt>2013-01-20 10:04:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rxmessageprocessing3-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>400</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing3.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/RxMessageProcessing3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:450;s:6:"height";i:191;s:4:"file";s:32:"2013/01/RxMessageProcessing3.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:32:"RxMessageProcessing3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:32:"RxMessageProcessing3-300x127.png";s:5:"width";i:300;s:6:"height";i:127;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>RxMessageProcessing3_thumb.png</title>
		<link>http://blog.petegoo.com/index.php/2013/01/20/reactive-extensions-in-message-processing/rxmessageprocessing3_thumb-png/</link>
		<pubDate>Sun, 20 Jan 2013 10:04:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing3_thumb.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>397</wp:post_id>
		<wp:post_date>2013-01-20 23:04:33</wp:post_date>
		<wp:post_date_gmt>2013-01-20 10:04:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rxmessageprocessing3_thumb-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>400</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing3_thumb.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/RxMessageProcessing3_thumb.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:454;s:6:"height";i:195;s:4:"file";s:38:"2013/01/RxMessageProcessing3_thumb.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"RxMessageProcessing3_thumb-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:38:"RxMessageProcessing3_thumb-300x128.png";s:5:"width";i:300;s:6:"height";i:128;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>RxMessageProcessing4.png</title>
		<link>http://blog.petegoo.com/index.php/2013/01/20/reactive-extensions-in-message-processing/rxmessageprocessing4-png/</link>
		<pubDate>Sun, 20 Jan 2013 10:04:34 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>398</wp:post_id>
		<wp:post_date>2013-01-20 23:04:34</wp:post_date>
		<wp:post_date_gmt>2013-01-20 10:04:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rxmessageprocessing4-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>400</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing4.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/RxMessageProcessing4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:450;s:6:"height";i:191;s:4:"file";s:32:"2013/01/RxMessageProcessing4.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:32:"RxMessageProcessing4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:32:"RxMessageProcessing4-300x127.png";s:5:"width";i:300;s:6:"height";i:127;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>RxMessageProcessing4_thumb.png</title>
		<link>http://blog.petegoo.com/index.php/2013/01/20/reactive-extensions-in-message-processing/rxmessageprocessing4_thumb-png/</link>
		<pubDate>Sun, 20 Jan 2013 10:04:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing4_thumb.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>399</wp:post_id>
		<wp:post_date>2013-01-20 23:04:35</wp:post_date>
		<wp:post_date_gmt>2013-01-20 10:04:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rxmessageprocessing4_thumb-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>400</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing4_thumb.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/RxMessageProcessing4_thumb.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:454;s:6:"height";i:195;s:4:"file";s:38:"2013/01/RxMessageProcessing4_thumb.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"RxMessageProcessing4_thumb-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:38:"RxMessageProcessing4_thumb-300x128.png";s:5:"width";i:300;s:6:"height";i:128;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>IMG_0012.jpg</title>
		<link>http://blog.petegoo.com/index.php/2013/03/05/nokia-920-vs-htc-8x/img_0012-jpg/</link>
		<pubDate>Tue, 05 Mar 2013 07:32:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/03/IMG_0012.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>408</wp:post_id>
		<wp:post_date>2013-03-05 20:32:07</wp:post_date>
		<wp:post_date_gmt>2013-03-05 07:32:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>img_0012-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>410</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/03/IMG_0012.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/IMG_0012.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:765;s:4:"file";s:20:"2013/03/IMG_0012.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"IMG_0012-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:20:"IMG_0012-300x224.jpg";s:5:"width";i:300;s:6:"height";i:224;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>IMG_0012_thumb.jpg</title>
		<link>http://blog.petegoo.com/index.php/2013/03/05/nokia-920-vs-htc-8x/img_0012_thumb-jpg/</link>
		<pubDate>Tue, 05 Mar 2013 07:32:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/03/IMG_0012_thumb.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>409</wp:post_id>
		<wp:post_date>2013-03-05 20:32:09</wp:post_date>
		<wp:post_date_gmt>2013-03-05 07:32:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>img_0012_thumb-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>410</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/03/IMG_0012_thumb.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/IMG_0012_thumb.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:522;s:6:"height";i:390;s:4:"file";s:26:"2013/03/IMG_0012_thumb.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"IMG_0012_thumb-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:26:"IMG_0012_thumb-300x224.jpg";s:5:"width";i:300;s:6:"height";i:224;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>image.png</title>
		<link>http://blog.petegoo.com/index.php/2013/07/01/xaml-surround-templates-for-resharper/image-png/</link>
		<pubDate>Mon, 01 Jul 2013 08:39:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/07/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>413</wp:post_id>
		<wp:post_date>2013-07-01 21:39:57</wp:post_date>
		<wp:post_date_gmt>2013-07-01 08:39:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>image-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>419</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/07/image.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/image.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:652;s:6:"height";i:519;s:4:"file";s:17:"2013/07/image.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"image-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"image-300x238.png";s:5:"width";i:300;s:6:"height";i:238;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>image_thumb.png</title>
		<link>http://blog.petegoo.com/index.php/2013/07/01/xaml-surround-templates-for-resharper/image_thumb-png/</link>
		<pubDate>Mon, 01 Jul 2013 08:39:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/07/image_thumb.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>414</wp:post_id>
		<wp:post_date>2013-07-01 21:39:58</wp:post_date>
		<wp:post_date_gmt>2013-07-01 08:39:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>image_thumb-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>419</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/07/image_thumb.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/image_thumb.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:460;s:6:"height";i:367;s:4:"file";s:23:"2013/07/image_thumb.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"image_thumb-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"image_thumb-300x239.png";s:5:"width";i:300;s:6:"height";i:239;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>image.png</title>
		<link>http://blog.petegoo.com/index.php/2013/07/01/xaml-surround-templates-for-resharper/image-png-2/</link>
		<pubDate>Mon, 01 Jul 2013 08:39:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/07/image1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>415</wp:post_id>
		<wp:post_date>2013-07-01 21:39:59</wp:post_date>
		<wp:post_date_gmt>2013-07-01 08:39:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>image-png-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>419</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/07/image1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/image1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:38;s:6:"height";i:34;s:4:"file";s:18:"2013/07/image1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>image_thumb.png</title>
		<link>http://blog.petegoo.com/index.php/2013/07/01/xaml-surround-templates-for-resharper/image_thumb-png-2/</link>
		<pubDate>Mon, 01 Jul 2013 08:40:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/07/image_thumb1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>416</wp:post_id>
		<wp:post_date>2013-07-01 21:40:00</wp:post_date>
		<wp:post_date_gmt>2013-07-01 08:40:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>image_thumb-png-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>419</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/07/image_thumb1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/image_thumb1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:42;s:6:"height";i:38;s:4:"file";s:24:"2013/07/image_thumb1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>About</title>
		<link>http://blog.petegoo.com/index.php/about/</link>
		<pubDate>Wed, 15 Dec 2010 19:47:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://petegoo.com/wordpress/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[My name is Peter Goodman, I am a developer living in Auckland, New Zealand building software for the legal industry. My hometown is Londonderry in Northern Ireland and I spent about 6 years in Edinburgh, Scotland working in the financial sector before moving to New Zealand in 2007.

I specialise in Microsoft .Net, Domain Driven Design, DSL Tools Windows Communication Foundation and Workflow Foundation. I have spoken at Tech-Ed New Zealand on Workflow and Windows Server AppFabric.

<a href="https://plus.google.com/110890570932970487279" rel="me" target="_blank"> Visit My Google Profile</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2010-12-15 19:47:57</wp:post_date>
		<wp:post_date_gmt>2010-12-15 19:47:57</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Creating a custom AJAX control – DateTimePicker</title>
		<link>http://blog.petegoo.com/index.php/2007/04/19/creating-a-custom-ajax-control-datetimepicker/</link>
		<pubDate>Wed, 18 Apr 2007 14:11:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2007/04/19/creating-a-custom-ajax-control-datetimepicker.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Lately I decided to see how easy was to create AJAX custom controls specifically using the included javascript libraries. I thought it might be useful to try to use the included javascript libraries to enable client side access to the selected value from a custom control.</p>
<p>The example I will use is a date time picker which uses the calendar extender from the ajax control toolkit for the date and a simple drop down for the time. Much like outlook, the date is pickable from a textbox and the time in a list of 15 minute intervals. The goal is to allow the client and server side code to have access to the same DateTime type without having to do any work parsing the strings in the HTML elements on the page.</p>
<p><span style="FONT-SIZE: 14pt">Usage Pattern</span></p>
<p>The control on the client page looks like the following.</p>
<div class="codeBlock">
<p><span style="FONT-SIZE: 8pt; COLOR: #0000ff; FONT-FAMILY: Courier New">&lt;</span><span style="FONT-SIZE: 8pt; COLOR: #a31515; FONT-FAMILY: Courier New">pgc</span><span style="FONT-SIZE: 8pt; COLOR: #0000ff; FONT-FAMILY: Courier New">:</span><span style="FONT-SIZE: 8pt; COLOR: #a31515; FONT-FAMILY: Courier New">DateTimePicker</span> <span style="FONT-SIZE: 8pt; FONT-FAMILY: Courier New"><span style="COLOR: #ff0000">ID</span><span style="COLOR: #0000ff">="dtpMyDate"</span> <span style="COLOR: #ff0000">runat</span><span style="COLOR: #0000ff">="server"</span> <span style="COLOR: #ff0000">TimeInterval</span><span style="COLOR: #0000ff">="15"</span> <span style="COLOR: #ff0000">Format</span><span style="COLOR: #0000ff">="dd/MM/yyyy"</span><span style="COLOR: #0000ff">/</span></span><span style="FONT-SIZE: 10pt; COLOR: #0000ff">&gt;</span></p></div>
<p>The client script needed to get the value from the control is as follows</p>
<div class="codeBlock"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: Courier New"><span style="COLOR: #0000ff">function</span> displayClientDate()<br />{<br />    alert( $find( <span style="COLOR: #a31515">"dtpMyDate"</span> ).get_selectedDateTime().format(<span style="COLOR: #a31515">"dddd dd MMMM yyyy HH:mm"</span>) );<br />}</span></span></div>
<p>....and that's it! The screenshot below shows the output.</p>
<p><img style="MARGIN: 5px" alt="" src="http://blog.peter.goodman.ms/blogImages/AJAXDateTimePicker/ClientScreenshot.gif" /></p>
<p><span style="FONT-SIZE: 14pt">The Implementation</span></p>
<p>To implement the custom control described above we have to implement the <strong>IScriptControl</strong> interface from the AJAX Extensions as well as the standard <strong>CompositeControl</strong>. This requires that we implement a few methods on our control above and beyond the standard control methods, these are the <strong>GetScriptReferences</strong> and the <strong>GetScriptDescriptors</strong> methods.</p>
<p>GetScriptReferences allows us to add in the client script files to the output sent to the user. This tells the ScriptManager on the page to send down our client script file.</p>
<div class="codeBlock"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: Courier New"><span style="COLOR: #0000ff">protected</span> <span style="COLOR: #0000ff">virtual</span> <span style="COLOR: #2b91af">IEnumerable</span>&lt;<span style="COLOR: #2b91af">ScriptReference</span>&gt; GetScriptReferences()<br />{<br />    <span style="COLOR: #2b91af">ScriptReference</span> ProtoReference = <span style="COLOR: #0000ff">new</span><span style="COLOR: #2b91af">ScriptReference</span>();<br />    ProtoReference.Path = Page.ClientScript.GetWebResourceUrl(<span style="COLOR: #0000ff">this</span>.GetType(), <span style="COLOR: #a31515">"PGCodeWorks.AjaxControls.DateTimePicker.DateTimePicker.js"</span>);<br />    <span style="COLOR: #0000ff">return</span> <span style="COLOR: #0000ff">new</span><span style="COLOR: #2b91af">ScriptReference</span>[] { ProtoReference };<br />}</span></span></div>
<p>GetScriptDescriptors allows us to tell the control which variables to pass through to the client script. These variables are set on the client when the page is sent down and allow us to use the same javascript object to represent multiple controls on one page with different instances and properties.</p>
<div class="codeBlock"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: Courier New"><span style="COLOR: #0000ff">protected</span><span style="COLOR: #0000ff">virtual</span><span style="COLOR: #2b91af">IEnumerable</span>&lt;<span style="COLOR: #2b91af">ScriptDescriptor</span>&gt; GetScriptDescriptors()<br />{<br />    <span style="COLOR: #2b91af">ScriptBehaviorDescriptor</span> descriptor = <span style="COLOR: #0000ff">new</span><span style="COLOR: #2b91af">ScriptBehaviorDescriptor</span>(<span style="COLOR: #a31515">"PGCodeWorks.DateTimePicker"</span>, <span style="COLOR: #0000ff">this</span>.ClientID);</span></span> 
<p><span style="FONT-SIZE: 8pt; FONT-FAMILY: Courier New">    descriptor.AddProperty(<span style="COLOR: #a31515">"textBoxClientID"</span>, <span style="COLOR: #0000ff">this</span>.txtDate.ClientID);<br />    descriptor.AddProperty(<span style="COLOR: #a31515">"dropDownClientID"</span>, <span style="COLOR: #0000ff">this</span>.ddlTime.ClientID);<br />    descriptor.AddProperty(<span style="COLOR: #a31515">"selectedDateTime"</span>, <span style="COLOR: #0000ff">this</span>._selectedDateTime);<br />    descriptor.AddProperty(<span style="COLOR: #a31515">"dateFormat"</span>, <span style="COLOR: #0000ff">this</span>.ceCalExtender.Format);<br />    descriptor.AddProperty(<span style="COLOR: #a31515">"timeFormat"</span>, <span style="COLOR: #0000ff">this</span>._timeFormat);<br />    descriptor.AddProperty(<span style="COLOR: #a31515">"timeInterval"</span>, <span style="COLOR: #0000ff">this</span>._timeInterval);</span></p>
<p><span style="FONT-SIZE: 8pt; FONT-FAMILY: Courier New">    <span style="COLOR: #0000ff">return</span> <span style="COLOR: #0000ff">new</span><span style="COLOR: #2b91af">ScriptDescriptor</span>[] { descriptor };</span></p>
<p><span style="FONT-SIZE: 8pt; FONT-FAMILY: Courier New">}</span></p></div>
<p>Then, after implementing the rest of our control we need to add the client script .js file to the solution and mark it as an embedded resource. To make the file embed itself within the DLL select the file in solution explorer and change the "Build Action" in the properties window. Also you must add a reference to it in the AssemblyInfo.cs file.</p>
<p>The actual file follows the object-oriented javascript approach to allow properties etc on the <strong>prototype</strong> model. Below is the structure of the .js file (some code has been cut-out to save space).</p>
<div class="codeBlock">
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt; COLOR: green; FONT-FAMILY: 'Courier New'; mso-no-proof: yes">// Register the namespace for the control</span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'; mso-no-proof: yes">Type.registerNamespace(<span style="COLOR: #a31515">'PGCodeWorks'</span>);</span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt; COLOR: green; FONT-FAMILY: 'Courier New'; mso-no-proof: yes">//</span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt; COLOR: green; FONT-FAMILY: 'Courier New'; mso-no-proof: yes">// Define the control properties</span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt; COLOR: green; FONT-FAMILY: 'Courier New'; mso-no-proof: yes">//</span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'; mso-no-proof: yes">PGCodeWorks.DateTimePicker = <span style="COLOR: blue">function</span>(element) {</span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> PGCodeWorks.DateTimePicker.initializeBase(<span style="COLOR: blue">this</span>, [element]);</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> <span style="COLOR: green">// Set properties to null</span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> <span style="COLOR: blue">this</span>._textBoxClientID = <span style="COLOR: blue">null</span>;</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> <span style="COLOR: blue">this</span>._dropDownClientID = <span style="COLOR: blue">null</span>;</span></span></p>
<p><span style="FONT-SIZE: 8pt; COLOR: green; FONT-FAMILY: 'Courier New'; mso-no-proof: yes">    // *** Code Truncated ***</span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'; mso-no-proof: yes">}</span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt; COLOR: green; FONT-FAMILY: 'Courier New'; mso-no-proof: yes">//</span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt; COLOR: green; FONT-FAMILY: 'Courier New'; mso-no-proof: yes">//</span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'; mso-no-proof: yes">PGCodeWorks.DateTimePicker.prototype = {</span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> initialize : <span style="COLOR: blue">function</span>() {</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> PGCodeWorks.DateTimePicker.callBaseMethod(<span style="COLOR: blue">this</span>, <span style="COLOR: #a31515">'initialize'</span>);</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> <span style="COLOR: blue">this</span>._onDateTimeChangeHandler = Function.createDelegate(<span style="COLOR: blue">this</span>, <span style="COLOR: blue">this</span>._onDateTimeChange);</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">     </span> <span style="mso-spacerun: yes">  </span><span style="COLOR: blue">this</span>._onDateChangeHandler = Function.createDelegate(<span style="COLOR: blue">this</span>, <span style="COLOR: blue">this</span>._onDateChange);</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> <span style="COLOR: blue">this</span>._onTimeChangeHandler = Function.createDelegate(<span style="COLOR: blue">this</span>, <span style="COLOR: blue">this</span>._onTimeChange);</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> $addHandler($get(<span style="COLOR: blue">this</span>._textBoxClientID), <span style="COLOR: #a31515">'change'</span> , <span style="COLOR: blue">this</span>._onDateChangeHandler );</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">                    </span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> $addHandler($get(<span style="COLOR: blue">this</span>._dropDownClientID), <span style="COLOR: #a31515">'change'</span>, <span style="COLOR: blue">this</span>._onTimeChangeHandler);</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> },</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> dispose : <span style="COLOR: blue">function</span>() {</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> $removeHandler($get(<span style="COLOR: blue">this</span>._textBoxClientID), <span style="COLOR: #a31515">'change'</span> , <span style="COLOR: blue">this</span>._onDateChangeHandler );</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> $removeHandler($get(<span style="COLOR: blue">this</span>._dropDownClientID), <span style="COLOR: #a31515">'change'</span>, <span style="COLOR: blue">this</span>._onTimeChangeHandler);</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">        </span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> PGCodeWorks.DateTimePicker.callBaseMethod(<span style="COLOR: blue">this</span>, <span style="COLOR: #a31515">'dispose'</span>);</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> },</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> <span style="COLOR: green">//</span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> <span style="COLOR: green">// Custom Methods</span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> <span style="COLOR: green">//</span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> setDateTimeValues : <span style="COLOR: blue">function</span>() {</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> <span style="COLOR: green">// Get Values</span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> <span style="COLOR: blue">var</span> strDate = $get(<span style="COLOR: blue">this</span>._textBoxClientID).value;</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> <span style="COLOR: blue">var</span> strTime = $get(<span style="COLOR: blue">this</span>._dropDownClientID).value;</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> <span style="COLOR: blue">var</span> strTimeFormat = <span style="COLOR: blue">this</span>._timeFormat;</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> <span style="COLOR: blue">if</span>( strDate != <span style="COLOR: blue">null</span> &amp;&amp; strDate != <span style="COLOR: #a31515">""</span> )</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes"> </span> <span style="mso-spacerun: yes">      </span>{</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">           </span> <span style="COLOR: blue">if</span>( strTime == <span style="COLOR: blue">null</span> || strTime == <span style="COLOR: #a31515">""</span> )</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">           </span> {</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">               </span> strTime = <span style="COLOR: #a31515">"00:00"</span>;</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">               </span> strTimeFormat = <span style="COLOR: #a31515">"HH:mm"</span>;</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">           </span> }</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">           </span> <span style="COLOR: blue">var</span> totalDateTimeFormat = <span style="COLOR: blue">this</span>._dateFormat + <span style="COLOR: #a31515">' '</span> + strTimeFormat;</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">           </span> <span style="COLOR: blue">var</span> newDate = Date.parseInvariant(<span style="mso-spacerun: yes"> </span> strDate + <span style="COLOR: #a31515">' '</span> + strTime, totalDateTimeFormat<span style="mso-spacerun: yes"> </span> );</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">           </span> <span style="COLOR: blue">this</span>.set_selectedDateTime( newDate );</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">           </span> <span style="COLOR: green">//alert( this._selectedDateTime );</span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> }</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> },</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> <span style="COLOR: green">//</span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> <span style="COLOR: green">// Event delegates</span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> <span style="COLOR: green">//</span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> _onDateTimeChange : <span style="COLOR: blue">function</span>(e) {</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> <span style="COLOR: blue">this</span>.setDateTimeValues();</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> },</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> _onDateChange : <span style="COLOR: blue">function</span>(e) {</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> <span style="COLOR: blue">this</span>.setDateTimeValues();</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> },</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> _onTimeChange : <span style="COLOR: blue">function</span>(e) {</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> <span style="COLOR: blue">this</span>.setDateTimeValues();</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> },</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> <span style="COLOR: green">//</span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> <span style="COLOR: green">// Control properties</span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> <span style="COLOR: green">//</span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> get_textBoxClientID : <span style="COLOR: blue">function</span>() {</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> <span style="COLOR: blue">return</span> <span style="COLOR: blue">this</span>._textBoxClientID;</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> },</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> set_textBoxClientID : <span style="COLOR: blue">function</span>(value) {</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> <span style="COLOR: blue">if</span> (<span style="COLOR: blue">this</span>._textBoxClientID !== value) {</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">           </span> <span style="COLOR: blue">this</span>._textBoxClientID = value;</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">           </span> <span style="COLOR: blue">this</span>.raisePropertyChanged(<span style="COLOR: #a31515">'textBoxClientID'</span>);</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> }</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> },</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt; COLOR: green; FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><br />    // *** Code Truncated ***</span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> get_timeInterval : <span style="COLOR: blue">function</span>() {</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> <span style="COLOR: blue">return</span> <span style="COLOR: blue">this</span>._timeInterval;</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> },</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> set_timeInterval : <span style="COLOR: blue">function</span>(value) {</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> <span style="COLOR: blue">if</span>(<span style="COLOR: blue">this</span>._timeInterval != value) {</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">           </span> <span style="COLOR: blue">this</span>._timeInterval = value;</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">           </span> <span style="COLOR: blue">this</span>.raisePropertyChanged(<span style="COLOR: #a31515">'timeInterval'</span>);</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">       </span> }</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> }</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span></span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'; mso-no-proof: yes">} <span style="COLOR: green">// end of prototype declaration</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt; COLOR: green; FONT-FAMILY: 'Courier New'; mso-no-proof: yes">// Optional descriptor for JSON serialization.</span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'; mso-no-proof: yes">PGCodeWorks.DateTimePicker.descriptor = {</span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">   </span> properties: [<span style="mso-spacerun: yes">  </span> {name: <span style="COLOR: #a31515">'textBoxClientID'</span>, type: String},</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">      </span> <span style="mso-spacerun: yes">             </span>{name: <span style="COLOR: #a31515">'dropDownClientID'</span>, type: String},</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">                   </span> {name: <span style="COLOR: #a31515">'selectedDateTime'</span>, type: Date},</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">                   </span> {name: <span style="COLOR: #a31515">'dateFormat'</span>, type: String},</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">                   </span> {name: <span style="COLOR: #a31515">'timeFormat'</span>, type: String},</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt"><span style="FONT-FAMILY: 'Courier New'; mso-no-proof: yes"><span style="mso-spacerun: yes">                   </span> {name: <span style="COLOR: #a31515">'timeInterval'</span>, type: Number} ]</span></span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'; mso-no-proof: yes">}</span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt; COLOR: green; FONT-FAMILY: 'Courier New'; mso-no-proof: yes">// Register the class as a type that inherits from Sys.UI.Control.</span></p>
<p class="MsoNormal" style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal; mso-layout-grid-align: none"><span style="FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'; mso-no-proof: yes">PGCodeWorks.DateTimePicker.registerClass(<span style="COLOR: #a31515">'PGCodeWorks.DateTimePicker'</span>, Sys.UI.Control);</span></p>
<p class="MsoNormal"><span style="FONT-SIZE: 8pt; COLOR: blue; LINE-HEIGHT: 115%; FONT-FAMILY: 'Courier New'; mso-no-proof: yes">if</span> <span style="FONT-SIZE: 8pt"><span style="LINE-HEIGHT: 115%; FONT-FAMILY: 'Courier New'; mso-no-proof: yes">(<span style="COLOR: blue">typeof</span>(Sys) !== <span style="COLOR: #a31515">'undefined'</span>) Sys.Application.notifyScriptLoaded();</span></span></p></div>
<p>The above code has allowed the client to be able to call the javascript object representing the overall control and retrieve it's selectedDateTime property.</p>
<p><span style="FONT-SIZE: 14pt">How Does it Work?</span></p>
<p>The libraries provided with the ASP.Net AJAX Extensions allow us to create composite controls which we can deal with as a single object on the client using object-oriented javascript. Using the patterns and examples given on the <a href="http://ajax.asp.net/" target="_blank">AJAX web site</a> we can recreate the types of functionality in the AjaxControlToolkit and start building rich client side experiences.</p>
<p>In this example we have simply provided a public method on our object which grabs the values from the controls on the page and uses the type extensions in AJAX to provide a similar experience in client side development as we experience on the server side. To extend this example I have created a RequiredFieldValidator and a CompareValidator which will work with the above control and I hope to post this when it has been cleaned up.</p>
<p>The full code and solution for this example is <a href="http://blog.peter.goodman.ms/CodeSamples/AJAXDateTimePicker.zip">available here</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>118</wp:post_id>
		<wp:post_date>2007-04-19 03:11:27</wp:post_date>
		<wp:post_date_gmt>2007-04-18 14:11:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creating-a-custom-ajax-control-datetimepicker</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ajax"><![CDATA[AJAX]]></category>
		<category domain="post_tag" nicename="ajax"><![CDATA[AJAX]]></category>
		<category domain="category" nicename="asp-net"><![CDATA[ASP.Net]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Microsoft announces Silverlight</title>
		<link>http://blog.petegoo.com/index.php/2007/04/16/microsoft-announces-silverlight/</link>
		<pubDate>Sun, 15 Apr 2007 23:42:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2007/04/17/microsoft-announces-silverlight.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img src="http://blog.peter.goodman.ms/blogImages/silverlight.gif" align="right" />Microsoft have just announced Silverlight, the new branding for what was previously known as WPF/E. They've also provided a lot more details about the specifications and their future plans. </p>
<p>Silverlight is the new Adobe (Macromedia) Flash competitor from Microsoft, it is based on the new Windows Presentation Foundation graphics engine found in Vista. It turns out that it will be very tightly integrated with .Net even to the point of shipping with its own cut down runtime.</p>
<p>The download should be around 2MB though initially it will not contain 3D capabilities. IE, Firefox and Safari will be supported at launch.</p>
<p>Silverlight website: <a href="http://www.microsoft.com/silverlight/" target="_blank">http://www.microsoft.com/silverlight/</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>119</wp:post_id>
		<wp:post_date>2007-04-16 12:42:25</wp:post_date>
		<wp:post_date_gmt>2007-04-15 23:42:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>microsoft-announces-silverlight</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="asp-net"><![CDATA[ASP.Net]]></category>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<category domain="post_tag" nicename="silverlight"><![CDATA[Silverlight]]></category>
		<category domain="category" nicename="web-silverlight"><![CDATA[Web Silverlight]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Response.Redirect and the ThreadAbortException</title>
		<link>http://blog.petegoo.com/index.php/2007/04/15/response-redirect-and-the-threadabortexception/</link>
		<pubDate>Sun, 15 Apr 2007 09:37:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2007/04/16/response.redirect-and-the-threadabortexception.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>A colleague came across a problem recently where performance counters were showing a high exception to request ratio. In actual fact there were at 4 exceptions for every 1 request, that's 400% compared to the desired 5%. These seemed to be getting handled at some stage or another as there were no HttpUnhandledExceptions getting thrown at the UI.</p>
<p>It turns out that Response.Redirect and Server.Transfer will throw a ThreadAbortException everytime the single parameter overload is called.</p>
<p>i.e. <font face="Courier New,Courier,mono">Response.Redirect( <font color="#000066">string </font>url )</font></p>
<p>The problem is that Response.Redirect will call a Response.End internally to stop code executing after the statement. This in turn throws our mystery exceptions. To work around this use the overloaded version which allows code after the statement to be executed and try not to treat the statement as the end of a code block.</p>
<p>i.e. pass "false" to second param of </p>
<p><font face="Courier New,Courier,mono">Response.Redirect( <font color="#000066">string </font>url, <font color="#000066">bool </font>endResponse )</font></p>
<p>There is a lot of fair argument to say that this shouldn't cause an exception. So if you see unexplained high exception counters, have a look at your Response.Redirects and Server.Transfers.</p>
<p>MSDN Article: <a href="http://support.microsoft.com/kb/312629/EN-US/" target="_blank">PRB: ThreadAbortException Occurs If You Use Response.End, Response.Redirect, or Server.Transfer</a></p>
<p>P.S. Thanks to Josh Twist at MS for pointing this one out. ;)</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>120</wp:post_id>
		<wp:post_date>2007-04-15 22:37:10</wp:post_date>
		<wp:post_date_gmt>2007-04-15 09:37:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>response-redirect-and-the-threadabortexception</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="asp-net"><![CDATA[ASP.Net]]></category>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.Net]]></category>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<category domain="category" nicename="patterns-practices"><![CDATA[Patterns &amp; Practices]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Enterprise Library 3.0 Released – with some really nice features</title>
		<link>http://blog.petegoo.com/index.php/2007/04/09/enterprise-library-3-0-released-with-some-really-nice-features/</link>
		<pubDate>Mon, 09 Apr 2007 00:43:34 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2007/04/10/enterprise-library-3.0-released-with-some-really-nice-features.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>The Microsoft Patterns and Practices team have just released Enterprise Library 3.0 - April 2007. This is the full RTM version of EntLib with some really neat new features:</p>
<p>
</p><ul>
<li><strong>Validation Application Block.</strong> Allows you to centrally define validation rules using configuration or attributes, and easily validate data from anywhere in your application, including deep integration with Windows Forms, ASP.NET and WCF. </li><br /><br />
<li><strong>Policy Injection Application Block.</strong> Provides a powerful approach for separating cross-cutting concerns from business logic using declarative policies that are attached at runtime to methods on your objects. </li><br /><br />
<li><strong>Application Block Software Factory.</strong> Dramatically simplifies the process of building application blocks and providers through the magic of guidance automation. </li><br /><br />
<li><strong>Visual Studio-integrated Configuration Editor.</strong> Edit Enterprise Library configuration files directly within Visual Studio. </li><br /><br />
<li><strong>Environmental Overrides.</strong> Use the configuration tool to specify configuration settings that are common or different across multiple environments, and merge this information into configuration files to be deployed with your applications. </li><br /><br />
<li><strong>WCF Integration.</strong> Easily integrate the Logging, Exception Handling and Validation Application Blocks into service interfaces built using Windows Communication Foundation. </li><br /><br />
<li><strong>Pre-compiled, strong-named binaries.</strong> No need to compile and strong name the code unless you want to manage and evolve the code yourself.</li></ul>
<p>I had a play with the Visual Studio integration and Environmental Overrides functionality over the weekend (yeh, I know) - I'm glad they eventually added this stuff in. Olaf Conijn was building these as add ons before he was assimilated.</p>
<p>Source: <a href="http://blogs.msdn.com/tomholl/archive/2007/04/05/just-released-enterprise-library-3-0-april-2007.aspx" target="_blank">Tom Hollanders Blog</a></p><strong>Visual Studio Integration Screenshots</strong><br /><br /><img alt="Web.Config context menu" src="http://blog.peter.goodman.ms/blogImages/webconfigMenu.gif" /><br /><br /><img alt="Web.Config editing UI" src="http://blog.peter.goodman.ms/blogImages/editwebconfigentlib.gif" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date>2007-04-09 13:43:34</wp:post_date>
		<wp:post_date_gmt>2007-04-09 00:43:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>enterprise-library-3-0-released-with-some-really-nice-features</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="enterprise-library"><![CDATA[Enterprise Library]]></category>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<category domain="category" nicename="patterns-practices"><![CDATA[Patterns &amp; Practices]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Expression Web now available on MSDN subscriptions</title>
		<link>http://blog.petegoo.com/index.php/2007/04/05/expression-web-now-available-on-msdn-subscriptions/</link>
		<pubDate>Thu, 05 Apr 2007 21:21:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2007/04/06/expression-web-now-available-on-msdn-subscriptions.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Microsoft have finally listened to all the developers (who are also designers) rightfully throwing our toys out of our prams and included Expression Web Designer and possibly some other Expression badged products in the MSDN subscription downloads.</p>
<blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
<p><strong><em>"...we received a lot of questions about why we did not include some of these products, particularly Expression Web, within customers? MSDN subscriptions.........Based on this feedback, I am pleased to say that we will be making Expression Web available starting today to all MSDN Premium subscribers"</em></strong></p></blockquote>
<p>This is really good news. The presumption that developers never need to use the latest CSS and HTML tools as they don't do design is ridiculous. Those of us building functional internal web solutions rarely get the option of enlisting the services of a dedicated designer, leaving the lonely developer to struggle with whatever tools are available to accomplish design.</p>
<p>Source: <a href="http://blogs.msdn.com/somasegar/archive/2007/04/03/listening-to-your-feedback-expression-and-msdn.aspx" target="_blank">Somasegar's blog</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>122</wp:post_id>
		<wp:post_date>2007-04-05 21:21:25</wp:post_date>
		<wp:post_date_gmt>2007-04-05 21:21:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>expression-web-now-available-on-msdn-subscriptions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
	</item>
	<item>
				<title>TeamPlain for TFS now available free</title>
		<link>http://blog.petegoo.com/index.php/2007/04/05/teamplain-for-tfs-now-available-free/</link>
		<pubDate>Thu, 05 Apr 2007 06:27:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2007/04/06/teamplain-for-tfs-now-available-free.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Due to the acquisition of DevBiz by Microsoft, their really cool TeamPlain web user interface for everything Team Foundation Server, is now available as a free download.</p><p><a target="_blank" href="http://www.devbiz.com/teamplain/webaccess/default.aspx"><img src="http://blog.peter.goodman.ms/blogImages/TeamPlainforTFSnowavailablefree_CE55/newworkitem8.gif" /></a> 
</p><p> </p>
<p>Great News.</p>
<p><a href="http://www.devbiz.com/teamplain/webaccess/default.aspx" target="_blank">TeamPlain Web Site</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>123</wp:post_id>
		<wp:post_date>2007-04-05 19:27:36</wp:post_date>
		<wp:post_date_gmt>2007-04-05 06:27:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>teamplain-for-tfs-now-available-free</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<category domain="category" nicename="team-foundation-server"><![CDATA[Team Foundation Server]]></category>
		<category domain="post_tag" nicename="tfs"><![CDATA[TFS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>My Blog</title>
		<link>http://blog.petegoo.com/index.php/2007/04/04/my-blog/</link>
		<pubDate>Wed, 04 Apr 2007 23:18:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2007/04/05/my-blog.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I'm starting this blog to keep track of technical work. </p>
<p>My name is Peter Goodman, currently living in Edinburgh and working as a .Net developer for a major financial organistion, but soon to be living in New Zealand and hopefully doing something similar.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>124</wp:post_id>
		<wp:post_date>2007-04-04 23:18:36</wp:post_date>
		<wp:post_date_gmt>2007-04-04 23:18:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-blog</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
	</item>
	<item>
				<title>Contact</title>
		<link>http://blog.petegoo.com/index.php/contact/</link>
		<pubDate>Fri, 14 Oct 2011 06:28:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?page_id=293</guid>
		<description></description>
		<content:encoded><![CDATA[[contact-form-7 id="292" title="Contact form 1"]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>293</wp:post_id>
		<wp:post_date>2011-10-14 19:28:39</wp:post_date>
		<wp:post_date_gmt>2011-10-14 06:28:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>contact</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title></title>
		<link>http://blog.petegoo.com/index.php/2012/04/18/346/</link>
		<pubDate>Wed, 18 Apr 2012 09:40:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/index.php/2012/04/18/346/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>346</wp:post_id>
		<wp:post_date>2012-04-18 22:40:17</wp:post_date>
		<wp:post_date_gmt>2012-04-18 09:40:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>346</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="primary-navigation"><![CDATA[Primary Navigation]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title></title>
		<link>http://blog.petegoo.com/index.php/2012/04/18/347/</link>
		<pubDate>Wed, 18 Apr 2012 09:40:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/index.php/2012/04/18/347/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>347</wp:post_id>
		<wp:post_date>2012-04-18 22:40:17</wp:post_date>
		<wp:post_date_gmt>2012-04-18 09:40:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>347</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="primary-navigation"><![CDATA[Primary Navigation]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[293]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Timezone Planner Privacy Policy</title>
		<link>http://blog.petegoo.com/index.php/timezone-planner-privacy-policy/</link>
		<pubDate>Tue, 20 Nov 2012 08:20:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?page_id=374</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Peter Goodman Timezone Planner Windows Store Application Privacy Statement</h2>
Protecting your privacy is important to us. We hope the following statement will help you understand how Timezone Planner and Gooroo Works (Peter Goodman) collects, uses and safeguards the personal information you provide to us in our application.

<strong>What information do we collect?</strong>

Timezone Planner does not collect, store or share any personal information, nor does it transmit or share any personally identifiable information over the internet beyond what is required by the HTTP protocol (IP address).

<strong>Further Questions</strong>

If you have any further questions about this privacy policy or the applications adherence to it. Please feel free to use the Contact form on this web site.

<strong>Changes to the privacy policy</strong>

Any changes to this policy will be reflected on this page.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>374</wp:post_id>
		<wp:post_date>2012-11-20 21:20:12</wp:post_date>
		<wp:post_date_gmt>2012-11-20 08:20:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>timezone-planner-privacy-policy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>image.png</title>
		<link>http://blog.petegoo.com/index.php/2013/07/01/xaml-surround-templates-for-resharper/image-png-3/</link>
		<pubDate>Mon, 01 Jul 2013 08:40:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/07/image2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>417</wp:post_id>
		<wp:post_date>2013-07-01 21:40:01</wp:post_date>
		<wp:post_date_gmt>2013-07-01 08:40:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>image-png-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>419</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/07/image2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/image2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:247;s:6:"height";i:159;s:4:"file";s:18:"2013/07/image2.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"image2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>image_thumb.png</title>
		<link>http://blog.petegoo.com/index.php/2013/07/01/xaml-surround-templates-for-resharper/image_thumb-png-3/</link>
		<pubDate>Mon, 01 Jul 2013 08:40:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/07/image_thumb2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>418</wp:post_id>
		<wp:post_date>2013-07-01 21:40:02</wp:post_date>
		<wp:post_date_gmt>2013-07-01 08:40:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>image_thumb-png-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>419</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/07/image_thumb2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/image_thumb2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:244;s:6:"height";i:158;s:4:"file";s:24:"2013/07/image_thumb2.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"image_thumb2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>systray.png</title>
		<link>http://blog.petegoo.com/index.php/2013/08/06/making-the-systray-transparent-on-windows-phone/systray-png/</link>
		<pubDate>Tue, 06 Aug 2013 10:30:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/08/systray.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>422</wp:post_id>
		<wp:post_date>2013-08-06 23:30:00</wp:post_date>
		<wp:post_date_gmt>2013-08-06 10:30:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>systray-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>423</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/08/systray.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:768;s:6:"height";i:242;s:4:"file";s:19:"2013/08/systray.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"systray-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"systray-300x94.png";s:5:"width";i:300;s:6:"height";i:94;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/08/systray.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>systray</title>
		<link>http://blog.petegoo.com/index.php/2013/08/06/making-the-systray-transparent-on-windows-phone/systray/</link>
		<pubDate>Tue, 06 Aug 2013 10:31:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/08/systray1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>424</wp:post_id>
		<wp:post_date>2013-08-06 23:31:21</wp:post_date>
		<wp:post_date_gmt>2013-08-06 10:31:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>systray</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>423</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/08/systray1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/08/systray1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:768;s:6:"height";i:242;s:4:"file";s:20:"2013/08/systray1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"systray1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"systray1-300x94.png";s:5:"width";i:300;s:6:"height";i:94;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>petegoo.logo</title>
		<link>http://blog.petegoo.com/?attachment_id=444</link>
		<pubDate>Thu, 15 Aug 2013 10:40:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/08/petegoo.logo_.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>444</wp:post_id>
		<wp:post_date>2013-08-15 23:40:43</wp:post_date>
		<wp:post_date_gmt>2013-08-15 10:40:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>petegoo-logo</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/08/petegoo.logo_.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:310;s:6:"height";i:89;s:4:"file";s:25:"2013/08/petegoo.logo_.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"petegoo.logo_-150x89.png";s:5:"width";i:150;s:6:"height";i:89;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"petegoo.logo_-300x86.png";s:5:"width";i:300;s:6:"height";i:86;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/08/petegoo.logo_.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>_MG_9394</title>
		<link>http://blog.petegoo.com/?attachment_id=445</link>
		<pubDate>Thu, 15 Aug 2013 10:45:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/08/MG_9394.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>445</wp:post_id>
		<wp:post_date>2013-08-15 23:45:05</wp:post_date>
		<wp:post_date_gmt>2013-08-15 10:45:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>_mg_9394</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/08/MG_9394.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/08/MG_9394.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:6144;s:6:"height";i:4096;s:4:"file";s:19:"2013/08/MG_9394.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"MG_9394-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:19:"MG_9394-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:20:"MG_9394-1024x682.jpg";s:5:"width";i:1024;s:6:"height";i:682;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";d:11;s:6:"credit";s:0:"";s:6:"camera";s:13:"Canon EOS 50D";s:7:"caption";s:0:"";s:17:"created_timestamp";i:1342802278;s:9:"copyright";s:0:"";s:12:"focal_length";s:2:"73";s:3:"iso";s:3:"800";s:13:"shutter_speed";s:5:"0.004";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>cropped-croppedGuitar.jpg</title>
		<link>http://blog.petegoo.com/?attachment_id=448</link>
		<pubDate>Sat, 12 Oct 2013 21:30:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/10/cropped-croppedGuitar.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://blog.petegoo.com/wp-content/uploads/2013/10/cropped-croppedGuitar.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>448</wp:post_id>
		<wp:post_date>2013-10-13 10:30:27</wp:post_date>
		<wp:post_date_gmt>2013-10-12 21:30:27</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cropped-croppedguitar-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/10/cropped-croppedGuitar.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/10/cropped-croppedGuitar.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1000;s:6:"height";i:288;s:4:"file";s:33:"2013/10/cropped-croppedGuitar.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:33:"cropped-croppedGuitar-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:32:"cropped-croppedGuitar-300x86.jpg";s:5:"width";i:300;s:6:"height";i:86;s:9:"mime-type";s:10:"image/jpeg";}s:13:"small-feature";a:4:{s:4:"file";s:33:"cropped-croppedGuitar-500x144.jpg";s:5:"width";i:500;s:6:"height";i:144;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
			<wp:meta_value><![CDATA[twentyeleven]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_ff388dc6649a24ba934ddc2fcd6ec49a</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>cropped-croppedGuitar2.jpg</title>
		<link>http://blog.petegoo.com/?attachment_id=449</link>
		<pubDate>Sat, 12 Oct 2013 22:00:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/wp-content/uploads/2013/10/cropped-croppedGuitar2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://blog.petegoo.com/wp-content/uploads/2013/10/cropped-croppedGuitar2.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>449</wp:post_id>
		<wp:post_date>2013-10-13 11:00:51</wp:post_date>
		<wp:post_date_gmt>2013-10-12 22:00:51</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cropped-croppedguitar2-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.petegoo.com/wp-content/uploads/2013/10/cropped-croppedGuitar2.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/10/cropped-croppedGuitar2.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1600;s:6:"height";i:230;s:4:"file";s:34:"2013/10/cropped-croppedGuitar2.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"cropped-croppedGuitar2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:33:"cropped-croppedGuitar2-300x43.jpg";s:5:"width";i:300;s:6:"height";i:43;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:35:"cropped-croppedGuitar2-1024x147.jpg";s:5:"width";i:1024;s:6:"height";i:147;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:34:"cropped-croppedGuitar2-604x230.jpg";s:5:"width";i:604;s:6:"height";i:230;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
			<wp:meta_value><![CDATA[twentythirteen]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>T4 Editor update from Clarius coming soon</title>
		<link>http://blog.petegoo.com/index.php/2008/04/16/t4-editor-update-from-clarius-coming-soon/</link>
		<pubDate>Wed, 16 Apr 2008 01:18:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2008/04/17/t4-editor-update-from-clarius-coming-soon.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Just after I'd <a title="T4 Templating in C#3.0 / .Net 3.5 and its uses in DSL development" href="http://blog.peter.goodman.ms/blog/_archives/2008/4/16/3642061.html" target="_blank">gone and mentioned</a> that the <a title="T4 Editor from Clarius Consulting" href="http://www.t4editor.net/" target="_blank">T4 editor</a> from Clarius Consulting doesn't give you intellisense, Victor Garcia Aprea <a title="Victor Apreas announcement on T4 Editor" href="http://weblogs.asp.net/vga/archive/2008/04/16/t4-editor-some-teasing-pictures.aspx" target="_blank">announces</a> that they're working on an update which does exactly that. Looks really nice too.</p> <p>Pete</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>101</wp:post_id>
		<wp:post_date>2008-04-16 14:18:08</wp:post_date>
		<wp:post_date_gmt>2008-04-16 01:18:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>t4-editor-update-from-clarius-coming-soon</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dsl-tools"><![CDATA[DSL Tools]]></category>
		<category domain="post_tag" nicename="t4"><![CDATA[T4]]></category>
		<category domain="category" nicename="vs2008"><![CDATA[VS2008]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>68</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>peter@goodman.ms</wp:comment_author_email>
			<wp:comment_author_url>http://blog.petegoo.com/Default.aspx</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2009-09-20 09:36:28</wp:comment_date>
			<wp:comment_date_gmt>2009-09-20 09:36:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[test admin email]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>69</wp:comment_id>
			<wp:comment_author><![CDATA[Peter]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2009-09-20 09:37:25</wp:comment_date>
			<wp:comment_date_gmt>2009-09-20 09:37:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[sdfsdf]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>70</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>peter@goodman.ms</wp:comment_author_email>
			<wp:comment_author_url>http://blog.petegoo.com/Default.aspx</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2009-09-20 09:41:43</wp:comment_date>
			<wp:comment_date_gmt>2009-09-20 09:41:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[gasdsdf]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>71</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.petegoo.com/Default.aspx</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2009-09-20 09:53:45</wp:comment_date>
			<wp:comment_date_gmt>2009-09-20 09:53:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[test]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>67</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>peter@goodman.ms</wp:comment_author_email>
			<wp:comment_author_url>http://blog.petegoo.com/Default.aspx</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2009-09-20 09:33:55</wp:comment_date>
			<wp:comment_date_gmt>2009-09-20 09:33:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[test admin email]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>T4 Templating in C#3.0 / .Net 3.5 and its uses in DSL development</title>
		<link>http://blog.petegoo.com/index.php/2008/04/15/t4-templating-in-c3-0-net-3-5-and-its-uses/</link>
		<pubDate>Tue, 15 Apr 2008 01:31:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2008/04/16/t4-templating-in-c3.0-.net-3.5-and-its-uses.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Cut to the chase</h3>OK. So you just want to know how to do it? Modify your template directives to the following.  <p><strong><em>&lt;#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" language="C#v3.5" #&gt;</em></strong></p> <h3>What?..Why?</h3> <p>Recently I have been doing a lot of work in Microsoft's <a title="MSDN DSL Tools" href="http://msdn2.microsoft.com/en-us/library/bb126235.aspx" target="_blank">Domain Specific Language Tools for Visual Studio</a>. In fact for the past 8 months this has pretty much been my main focus. I've learned a lot of things on the way and it occurred to me that the development of T4 templates used in DSL tools would be made a lot easier with the use of extension methods. To understand why, you need to understand the concepts behind DSL tools and the development process involved in creating a model to define your problem domain and templating to create the desired output.</p> <p>One of the problems that becomes apparent in the latter stages of developing a DSL tools implementation is that templating can become quite messy. In DSL tools you create a model of the API which will allow you to interact with the visual elements and this generates code containing the classes you defined in the pattern necessary for these visual elements to be able to use them. After you are happy with the model you move on to generating your output. Typically this takes the form of T4 templates which will generate C# classes. </p> <p>T4 templating, despite the fact that the engine is now built into Visual Studio 2008, does not get any designer support. It is an ASP-like syntax which compiles at template-transform-time into C# class files used to generate the output into files in your solution. Even using editors like Clarius Consulting's <a title="Clarius T4 Editor" href="http://www.t4editor.net/" target="_blank">T4 Editor</a> does not give you the intellisense you are used to in ordinary C# (well not yet anyway....<a title="T4 Editor update from Clarius coming soon" href="http://blog.peter.goodman.ms/blog/_archives/2008/4/17/3644160.html">see here</a>). What tends to happen is that developers make extensions to the model API classes generated by the DSL tools using partial classes to support common scenarios in templating (don't even go down the path of static helper classes.....eek). This seems a good idea at first but after some time your API classes tend to suffer from explosion of methods and properties. These methods and properties are not helpful in defining your domain and do not make sense in <a title="DomainDrivenDesign.org" href="http://www.domaindrivendesign.org/" target="_blank">Domain Driven Design</a> concepts, they have no place in the ubiquitous language of the domain, they only make sense to the text transformation process employed in your T4 templates.</p> <p>The solution can be to add common base templates which are included in your task specific templates using an ASP-like <strong><em>include</em></strong> directive. An issue with this is you typically create new class structures to encapsulate the functionality you want to perform. This has an obvious overhead in setup and maintenance, also the code in the include template is compiled into the same class as the task specific template which simply adds to the issues.</p> <p>No wonder then that I was interested in the possibility of using <a title="Developer.com usage of Extension Methods" href="http://www.developer.com/net/csharp/article.php/3592216" target="_blank">Extension Methods</a> to extend the DSL generated API with templating specific methods. After asking <a title="MSDN Forums thread on C#3.0 in T4" href="http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=3166859&amp;SiteID=1" target="_blank">the question</a> in the <a title="MSDN VSX forum" href="http://forums.microsoft.com/MSDN/ShowForum.aspx?ForumID=57&amp;SiteID=1" target="_blank">VSX forum</a> I submitted a <a title="Microsoft Connect issue on C#3.0 in T4" href="https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=338022" target="_blank">Microsoft Connect issue</a> and got the answer of the above undocumented feature in a reply email. Basically this undocumented (AFAIK) feature allows you to add "v3.5" to the language definition in a template directive and it can be used, it seems like a bit of an after-thought but it does work. </p> <p>One thing to note is that you can't specify extension method classes inside nested classes so it won't work in template include file, but you could externalise them to another assembly if required. So now you can add a class like the following to your code.</p> <div style="font-size: 10pt; background: white; color: black; font-family: courier new"> <p style="margin: 0px"><span style="color: #2b91af">    1</span> <span style="color: blue">namespace</span> PGCodeWorks.Dsl.Test.TestDsl.TemplatingExtensions {</p> <p style="margin: 0px"><span style="color: #2b91af">    2</span>     <span style="color: blue">public</span> <span style="color: blue">static</span> <span style="color: blue">class</span> <span style="color: #2b91af">ExampleElementExtensions</span> {</p> <p style="margin: 0px"><span style="color: #2b91af">    3</span>         <span style="color: blue">public</span> <span style="color: blue">static</span> <span style="color: blue">string</span> LowerCaseName(<span style="color: blue">this</span> <span style="color: #2b91af">ExampleElement</span> element) {</p> <p style="margin: 0px"><span style="color: #2b91af">    4</span>             <span style="color: blue">return</span> element.Name.ToLower();</p> <p style="margin: 0px"><span style="color: #2b91af">    5</span>         }</p> <p style="margin: 0px"><span style="color: #2b91af">    6</span>     }</p> <p style="margin: 0px"><span style="color: #2b91af">    7</span> }</p></div> <p>And from your template code you can do the following.</p> <div style="font-size: 10pt; background: white; color: black; font-family: courier new"> <p style="margin: 0px"><span style="color: #2b91af">   14</span>     &lt;#= element.LowerCaseName() #&gt;</p></div> <p>How nice is that? Should make templating a lot easier in VS2008.</p> <p>Pete</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>102</wp:post_id>
		<wp:post_date>2008-04-15 14:31:03</wp:post_date>
		<wp:post_date_gmt>2008-04-15 01:31:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>t4-templating-in-c3-0-net-3-5-and-its-uses</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="dsl-tools"><![CDATA[DSL Tools]]></category>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<category domain="category" nicename="vs2008"><![CDATA[VS2008]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>WCF Exceptions and Fault Contracts</title>
		<link>http://blog.petegoo.com/index.php/2008/04/15/wcf-exceptions-and-fault-contracts/</link>
		<pubDate>Mon, 14 Apr 2008 18:27:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2008/04/15/wcf-exceptions-and-fault-contracts.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I ran across an issue recently trying to get a custom exception across a WCF boundary. The trouble is, WCF does not like to tell you what the problem was, and for good reason. I was thinking about exceptions the wrong way. In reality we do not want to pass exceptions across a WCF service boundary, instead we want to pass a Fault back to the caller.</p> <p>An exception is a CLR concept, it does not make sense to expose this outside of the CLR, despite the fact that an exception contains potentially dangerous information (like the stack trace) which we do not want to expose. If your service does not handle an exception, it will fault. Hence a lot of the time we implement a try-catch handler and raise a <a title="FaultException article in MSDN" href="http://msdn2.microsoft.com/en-us/library/ms576199.aspx" target="_blank">FaultException</a> which gets sent across the boundary.</p> <p> </p> <div style="font-size: 10pt; background: white; color: black; font-family: courier new"> <p style="margin: 0px"> </p></div> <div style="font-size: 10pt; background: white; color: black; font-family: courier new"> <p style="margin: 0px">[<span style="color: #2b91af">OperationContract</span>]</p> <p style="margin: 0px">[<span style="color: #2b91af">FaultContract</span>(<span style="color: blue">typeof</span>(<span style="color: #2b91af">DivideByZeroException</span>))]</p> <p style="margin: 0px"><span style="color: blue">public</span> <span style="color: blue">void</span> MyServiceMethod() {</p> <p style="margin: 0px">    <span style="color: blue">try</span> {</p> <p style="margin: 0px"> </p> <p style="margin: 0px">        <span style="color: green">// Do some actual stuff</span></p> <p style="margin: 0px">    }</p> <p style="margin: 0px">    <span style="color: blue">catch</span>(<span style="color: #2b91af">DivideByZeroException</span> ex) {</p> <p style="margin: 0px">        <span style="color: blue">throw</span> <span style="color: blue">new</span> <span style="color: #2b91af">FaultException</span>&lt;<span style="color: #2b91af">DivideByZeroException</span>&gt;(ex, <span style="color: blue">new</span> <span style="color: #2b91af">FaultReason</span>(<span style="color: #a31515">"DivisionByZero"</span>));</p> <p style="margin: 0px">    }</p> <p style="margin: 0px">}</p></div> <p>Then on your proxy side you will typically recreate this exception and throw it.</p> <p>This approach sometimes has problems when your exception has some extra data in it. Consider the following custom exception type:</p> <p> </p> <div style="font-size: 10pt; background: white; color: black; font-family: courier new"> <div style="font-size: 10pt; background: white; color: black; font-family: courier new"> <p style="margin: 0px"><span style="color: blue">public</span> <span style="color: blue">class</span> <span style="color: #2b91af">MyDivideByZeroException</span> : <span style="color: #2b91af">DivideByZeroException</span>, <span style="color: #2b91af">ISerializable</span> {</p> <p style="margin: 0px"> </p> <p style="margin: 0px">    <span style="color: blue">protected</span> MyDivideByZeroException(<span style="color: #2b91af">SerializationInfo</span> info, <span style="color: #2b91af">StreamingContext</span> context)</p> <p style="margin: 0px">        : <span style="color: blue">base</span>(info, context) {</p> <p style="margin: 0px">        numerator = (<span style="color: blue">int</span>)info.GetValue(<span style="color: #a31515">"numerator"</span>, <span style="color: blue">typeof</span>(<span style="color: blue">int</span>));</p> <p style="margin: 0px">        denominator = (<span style="color: blue">int</span>)info.GetValue(<span style="color: #a31515">"denominator"</span>, <span style="color: blue">typeof</span>(<span style="color: blue">int</span>));</p> <p style="margin: 0px">    }</p> <p style="margin: 0px"> </p> <p style="margin: 0px">    <span style="color: blue">private</span> <span style="color: blue">int</span> numerator;</p> <p style="margin: 0px">    <span style="color: blue">public</span> <span style="color: blue">int</span> Numerator {</p> <p style="margin: 0px">        <span style="color: blue">get</span> { <span style="color: blue">return</span> numerator; }</p> <p style="margin: 0px">        <span style="color: blue">set</span>{ numerator = <span style="color: blue">value</span>;}</p> <p style="margin: 0px">    }</p> <p style="margin: 0px"> </p> <p style="margin: 0px">    <span style="color: blue">public</span> <span style="color: blue">int</span> denominator;</p> <p style="margin: 0px">    <span style="color: blue">public</span> <span style="color: blue">int</span> Denominator {</p> <p style="margin: 0px">        <span style="color: blue">get</span> { <span style="color: blue">return</span> denominator; }</p> <p style="margin: 0px">        <span style="color: blue">set</span> { denominator = <span style="color: blue">value</span>; }</p> <p style="margin: 0px">    }</p> <p style="margin: 0px"> </p> <p style="margin: 0px">    <span style="color: blue">public</span> MyDivideByZeroException(<span style="color: blue">int</span> numerator, <span style="color: blue">int</span> denominator) : <span style="color: blue">base</span>() {</p> <p style="margin: 0px">        <span style="color: blue">this</span>.numerator = numerator;</p> <p style="margin: 0px">        <span style="color: blue">this</span>.denominator = denominator;</p> <p style="margin: 0px">    }</p> <p style="margin: 0px"> </p> <p style="margin: 0px">    <span style="color: blue">void</span> <span style="color: #2b91af">ISerializable</span>.GetObjectData(<span style="color: #2b91af">SerializationInfo</span> info, <span style="color: #2b91af">StreamingContext</span> context) {</p> <p style="margin: 0px">        info.AddValue(<span style="color: #a31515">"numerator"</span>, numerator, <span style="color: blue">typeof</span>(<span style="color: blue">int</span>));</p> <p style="margin: 0px">        info.AddValue(<span style="color: #a31515">"denominator"</span>, denominator, <span style="color: blue">typeof</span>(<span style="color: blue">int</span>));</p> <p style="margin: 0px">        <span style="color: blue">base</span>.GetObjectData(info, context);</p> <p style="margin: 0px">    }</p> <p style="margin: 0px">}</p></div></div> <p>When you try this with the FaultException you may get an exception like the following: <br /><strong><em>The underlying secure session has faulted before the reliable session fully completed. The reliable session was faulted. The reliable messaging channel threw an exception because the reliable session was broken. </em></strong></p> <p>In this case you can create a Fault class. Your fault class is simply a Data Contract serializable type containing the information you require to create your exception on the other side. e.g.</p> <p> </p> <div style="font-size: 10pt; background: white; color: black; font-family: courier new"> <div style="font-size: 10pt; background: white; color: black; font-family: courier new"> <p style="margin: 0px">[<span style="color: #2b91af">DataContract</span>]</p> <p style="margin: 0px"><span style="color: blue">public</span> <span style="color: blue">class</span> <span style="color: #2b91af">DivideByZeroFault</span> {</p> <p style="margin: 0px"> </p> <p style="margin: 0px">    <span style="color: blue">public</span> DivideByZeroFault(<span style="color: #2b91af">MyDivideByZeroException</span> exception) {</p> <p style="margin: 0px">        <span style="color: blue">this</span>.numerator = exception.Numerator;</p> <p style="margin: 0px">        <span style="color: blue">this</span>.denominator = exception.Denominator;</p> <p style="margin: 0px">    }</p> <p style="margin: 0px"> </p> <p style="margin: 0px">    <span style="color: blue">public</span> <span style="color: #2b91af">MyDivideByZeroException</span> GetException() {</p> <p style="margin: 0px">        <span style="color: blue">return</span> <span style="color: blue">new</span> <span style="color: #2b91af">MyDivideByZeroException</span>(numerator, denominator);</p> <p style="margin: 0px">    }</p> <p style="margin: 0px"> </p> <p style="margin: 0px">    [<span style="color: #2b91af">DataMember</span>]</p> <p style="margin: 0px">    <span style="color: blue">private</span> <span style="color: blue">int</span> numerator;</p> <p style="margin: 0px">    <span style="color: blue">public</span> <span style="color: blue">int</span> Numerator {</p> <p style="margin: 0px">        <span style="color: blue">get</span> { <span style="color: blue">return</span> numerator; }</p> <p style="margin: 0px">        <span style="color: blue">set</span> { numerator = <span style="color: blue">value</span>; }</p> <p style="margin: 0px">    }</p> <p style="margin: 0px"> </p> <p style="margin: 0px">    [<span style="color: #2b91af">DataMember</span>]</p> <p style="margin: 0px">    <span style="color: blue">public</span> <span style="color: blue">int</span> denominator;</p> <p style="margin: 0px">    <span style="color: blue">public</span> <span style="color: blue">int</span> Denominator {</p> <p style="margin: 0px">        <span style="color: blue">get</span> { <span style="color: blue">return</span> denominator; }</p> <p style="margin: 0px">        <span style="color: blue">set</span> { denominator = <span style="color: blue">value</span>; }</p> <p style="margin: 0px">    }</p> <p style="margin: 0px">}</p></div> <p style="margin: 0px" /></div> <p> </p> <p>Therefore your service code in the first example will change to be:</p> <div style="font-size: 10pt; background: white; color: black; font-family: courier new"> <div style="font-size: 10pt; background: white; color: black; font-family: courier new"> <p style="margin: 0px">[<span style="color: #2b91af">OperationContract</span>]</p> <p style="margin: 0px">[<span style="color: #2b91af">FaultContract</span>(<span style="color: blue">typeof</span>(<span style="color: #2b91af">DivideByZeroFault</span>))]</p> <p style="margin: 0px"><span style="color: blue">public</span> <span style="color: blue">void</span> MyServiceMethod() {</p> <p style="margin: 0px">    <span style="color: blue">try</span> {</p> <p style="margin: 0px"> </p> <p style="margin: 0px">        <span style="color: green">// Do some actual stuff</span></p> <p style="margin: 0px">    }</p> <p style="margin: 0px">    <span style="color: blue">catch</span>(<span style="color: #2b91af">MyDivideByZeroException</span> ex) {</p> <p style="margin: 0px">        <span style="color: blue">throw</span> <span style="color: blue">new</span> <span style="color: #2b91af">FaultException</span>&lt;<span style="color: #2b91af">DivideByZeroFault</span>&gt;(<span style="color: blue">new</span> <span style="color: #2b91af">DivideByZeroFault</span>(ex), <span style="color: blue">new</span> <span style="color: #2b91af">FaultReason</span>(<span style="color: #a31515">"DivisionByZero"</span>));</p> <p style="margin: 0px">    }</p> <p style="margin: 0px">}</p></div> <p style="margin: 0px" /></div> <div style="font-size: 10pt; background: white; color: black; font-family: courier new"> <p style="margin: 0px"> </p></div>This will allow WCF to send across the relevant information without compromising the applications security by sending a stack trace etc. <p>Pete</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>103</wp:post_id>
		<wp:post_date>2008-04-15 07:27:02</wp:post_date>
		<wp:post_date_gmt>2008-04-14 18:27:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wcf-exceptions-and-fault-contracts</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>72</wp:comment_id>
			<wp:comment_author><![CDATA[sam]]></wp:comment_author>
			<wp:comment_author_email>annasergeeva259@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.picktorrent.com/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2009-12-17 13:25:18</wp:comment_date>
			<wp:comment_date_gmt>2009-12-17 13:25:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://www.picktorrent.com"> http://www.picktorrent.com </a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>What is a comfortable office temperature?</title>
		<link>http://blog.petegoo.com/index.php/2008/01/13/what-is-a-comfortable-office-temperature/</link>
		<pubDate>Sun, 13 Jan 2008 04:24:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2008/01/13/what-is-a-comfortable-office-temperature.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Its 27 degrees Celsius today in our office and it feels like an oven. One of the guys has hooked up a digital multi-meter as a thermometer, you have to love geeks.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>104</wp:post_id>
		<wp:post_date>2008-01-13 04:24:06</wp:post_date>
		<wp:post_date_gmt>2008-01-13 04:24:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>what-is-a-comfortable-office-temperature</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
	</item>
	<item>
				<title>NHibernate – Custom User Types and Collections</title>
		<link>http://blog.petegoo.com/index.php/2008/01/10/nhibernate-custom-user-types-and-collections/</link>
		<pubDate>Wed, 09 Jan 2008 12:18:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2008/01/10/nhibernate-custom-user-types-and-collections.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>NHibernate is an extremely powerful ORM but sometimes its quite difficult to find information on how to do certain things and why other things are the way they are. Recently I've been working on generating NHibernate mapping files and a domain model with its classes using Visual Studio DSL tools. Below are some of the difficulties I came across and their solutions.</p>
<h4>Mapping Enums to string database representations</h4>
<p>Sometimes you have a database schema which requires you to provide things like "M" for male and "F" for female. It does not make sense to force your users to use a string for the gender. We simply want an enum. On the other hand we cannot simply put an integer in the database as it then requires the domain to have any context and is not self-describing. What we really want is enums in our domain and single char fields in our db.</p>
<p>Obviously we need some custom mapping. This is where the IUserType interface from NHibernate comes into play. You can implement this type on a converter class and specify the converter type in the type attribute in your NHibernate mapping instead of the actual enum type. </p>
<p>More Info at the following links:<br /><a href="http://www.hibernate.org/hib_docs/nhibernate/1.2/reference/en/html/mapping.html#mapping-types-custom" target="_blank">NHibernate Documentation - Custom value types</a><br /><a href="http://codebetter.com/blogs/jeremy.miller/archive/2006/02/20/138732.aspx" target="_blank">Jeremy D. Miller's blog - Mapping Enumerations with NHibernate - and hooray for open source unit tests</a></p>
<h4>Generic Identifiers and Generators</h4>
<p>Sometimes you have a mix of identifier types in your database schema, we may have guids, ints and even strings (eh? strings? what were you thinking?). You could implement a generic identifier type which hides these three types as you never really care about the content of the identifier, only that the ORM can use it to query etc. The problem is how do we tell NHibernate to convert this type and how do we allow a generator to build the e.g. guid before sending to the database? </p>
<p>First, your identifier type needs to implement a Identifier.Empty as default and allow it to always return default(T) as a non-instantiated version when you new-up an object in your domain. NHibernate will detect this equality and differentiate between new instances and instances which need to be updated instead of inserted.</p>
<p>Secondly, you need to implement an IUserType as above for each schema type. This will be the type specified in your HBM file and will convert between db type and your all-encompassing Identifier type.</p>
<p>Now we have a problem, the standard id generators in NHibernate no longer work as they want to generate the new id in the domain class before persisting, this will cause a type cast failure between the expected db type output from the generator and your custom identifier type. This time you need to create a custom identifier using a new class which implements <strong>NHibernate.Id.IPersistentIdentifierGenerator</strong> and <strong>NHibernate.Id.IConfigurable</strong>. This can detect the type of the real db schema and generate the correct type. You can also pass params to allow this to be configurable.</p>
<h4>ISet&lt;T&gt; and IList&lt;T&gt; - sets, bags etc</h4>
<p>NHibernate requires the usage of a set to allow the tracking of items added and removed on a collection. Unfortunately there is no concept of a set in the .Net Framework. The implementation of a set is provided in the Iesi.Collections dll which is shipped with NHibernate. 
</p><p>At runtime NHibernate tries to wrap the collection on a property which is defined in the HBM as a set with a collection which derives from <em><strong>Iesi.Collections.Generic.ISet&lt;T&gt;</strong></em> it can use to track changes in the collection. This allows NHibernate to only issue updates to changed members rather than deleting and recreating the entire collection. Normally the collection <em><strong>Iesi.Collections.Generic.HashedSet&lt;T&gt;</strong></em> is used in the domain class and this is then wrapped by NHibernate at runtime in a <em><strong>NHibernate.Collection.Generic.PersistentGenericSet&lt;T&gt;</strong></em> which allows the tracking of changes. This wrapping happens when a transient collection is saved or when a persisted collection is returned from the database. 
</p><p>This means that we cannot have purely CLR types in our domain model because we need to have an implementation of the <em><strong>ISet</strong></em> for transient and persisted collections. To protect the domain model in the possible future event of replacing NHibernate as a persistence strategy (and cos we don't want persistence creeping into our domain), new collection types have to be created. Create your own interface e.g. <em><strong>ISet&lt;T&gt;</strong></em>. This <em><strong>ISet&lt;T&gt;</strong></em> implements <em><strong>IList&lt;T&gt;</strong></em> and <em><strong>Iesi.Collections.Generic.ISet&lt;T&gt;</strong></em> allowing us to use standard <em><strong>IList&lt;T&gt;</strong></em> and <em><strong>ICollection&lt;T&gt;</strong></em> methods while keeping compatibility with NHibernate. The transient version of the set is called <em><strong>e.g. Set&lt;T&gt;</strong></em>, this also implements <em><strong>IUserCollectionType</strong></em> which defines the contract for NHibernate specific wrapping to persistent collection etc. The persisted version is called <em><strong>e.g. PersistentSet&lt;T&gt;</strong></em> and this inherits from <em><strong>NHibernate.Collection.Generic.PersistentGenericSet&lt;T&gt;</strong></em> to give NHibernate the change tracking it requires. 
</p><p>To use the new Sets in a domain, the following implementation is necessary. 
</p><ul>
<li>The private fields and public properties for collections are defined as IList&lt;T&gt;. This allows standard interaction with the collection for domain consumption. 
</li><li>The actual implementation when the domain needs to instantiate a collection is of type <em><strong>MyNamespace.Set&lt;T&gt;</strong></em> to allow NHibernate to cast properly at runtime. 
</li><li>In the case of readonly collections, one of the two readonly collections is created from the constructor passing in the IList&lt;T&gt; as part of the get accessor of the property 
</li><li>In the HBM mapping file the <em><strong>collection-type</strong></em> attribute is added to the set declaration with the generic type name of the transient collection e.g. <strong>collection-type="<em><em>MyNamespace</em>.Set`1[[<em>MyNamespace.MyDomain</em>.MyDomainClass]]"</em></strong></li></ul>
<p>Once this is done you should be able to save and retrieve your collections without issues. Notice that when you save a transient collection, it is automatically cast to your persistent collection using the Wrap method of IUserCollectionType and this type is also used when retrieving from the db. Nice!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>105</wp:post_id>
		<wp:post_date>2008-01-10 01:18:17</wp:post_date>
		<wp:post_date_gmt>2008-01-09 12:18:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nhibernate-custom-user-types-and-collections</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<category domain="post_tag" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<category domain="post_tag" nicename="orm"><![CDATA[ORM]]></category>
		<category domain="category" nicename="patterns-practices"><![CDATA[Patterns &amp; Practices]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>77</wp:comment_id>
			<wp:comment_author><![CDATA[Dave K]]></wp:comment_author>
			<wp:comment_author_email>dking@plastic-surgeon.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.plastic-surgeon.co.uk/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2009-11-06 14:36:33</wp:comment_date>
			<wp:comment_date_gmt>2009-11-06 14:36:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Have you got a real world example of this user interface?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>78</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.petegoo.com/Default.aspx</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2009-11-29 03:26:45</wp:comment_date>
			<wp:comment_date_gmt>2009-11-29 03:26:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Not sure what you mean. Which interface? This has changed and may not be relevant in recent versions of NHibernate]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>79</wp:comment_id>
			<wp:comment_author><![CDATA[Coupon Codes]]></wp:comment_author>
			<wp:comment_author_email>2qazxc@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.sharevouchers.co.uk/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2009-05-15 14:13:19</wp:comment_date>
			<wp:comment_date_gmt>2009-05-15 14:13:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is just the information I was looking for. Great resource, site bookmarked.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Concatenating Delimited Strings with Generic Delegates</title>
		<link>http://blog.petegoo.com/index.php/2007/12/04/concatenating-delimited-strings-with-generic-delegates/</link>
		<pubDate>Mon, 03 Dec 2007 14:00:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2007/12/04/concatenating-delimited-strings-with-generic-delegates.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I knew this must be possible through generic delegates and eventually found <a href="http://haacked.com/archive/2006/11/24/concatenating_delimited_strings_with_generic_delegates.aspx" target="_blank">this really useful post</a> by Phil Haack which describes using a generic delegate Join method to concatenate strings. Saves a lot of ugly code if you are using T4 or A-N-Other templating language to produce code from a  Dsl or schema.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>106</wp:post_id>
		<wp:post_date>2007-12-04 03:00:25</wp:post_date>
		<wp:post_date_gmt>2007-12-03 14:00:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>concatenating-delimited-strings-with-generic-delegates</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[C#]]></category>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Windows Live Writer</title>
		<link>http://blog.petegoo.com/index.php/2007/11/19/windows-live-writer/</link>
		<pubDate>Mon, 19 Nov 2007 00:06:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2007/11/19/windows-live-writer.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Finally the latest version of windows live writer seems to work with my blogging engine. Seems they have made some updates to allow blogware engine support for categories etc. Or maybe I just missed these on previous releases. Anyhoo, looks good.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>107</wp:post_id>
		<wp:post_date>2007-11-19 00:06:02</wp:post_date>
		<wp:post_date_gmt>2007-11-19 00:06:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>windows-live-writer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
	</item>
	<item>
				<title>Visual Studio 2008 RTM&#039;d</title>
		<link>http://blog.petegoo.com/index.php/2007/11/18/visual-studio-2008-rtmd/</link>
		<pubDate>Sun, 18 Nov 2007 22:57:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2007/11/19/visual-studio-2008-rtmd.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>....and commence downloading.</p>
<p><a href="http://weblogs.asp.net/scottgu/archive/2007/11/19/visual-studio-2008-and-net-3-5-released.aspx" target="_blank">http://weblogs.asp.net/scottgu/archive/2007/11/19/visual-studio-2008-and-net-3-5-released.aspx</a></p>
<p><a href="http://blogs.msdn.com/somasegar/archive/2007/11/19/visual-studio-2008-and-net-framework-3-5-shipped.aspx" target="_blank">http://blogs.msdn.com/somasegar/archive/2007/11/19/visual-studio-2008-and-net-framework-3-5-shipped.aspx</a></p>
<p> </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date>2007-11-18 22:57:29</wp:post_date>
		<wp:post_date_gmt>2007-11-18 22:57:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>visual-studio-2008-rtmd</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<category domain="category" nicename="team-foundation-server"><![CDATA[Team Foundation Server]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="category" nicename="vs2008"><![CDATA[VS2008]]></category>
	</item>
	<item>
				<title>TFS: Work Item Search</title>
		<link>http://blog.petegoo.com/index.php/2007/11/05/tfs-work-item-search/</link>
		<pubDate>Sun, 04 Nov 2007 12:54:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2007/11/05/tfs-work-item-search.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I've been using this plugin now for the past few months. You would not believe the difference it makes.</p>
<p><span lang="EN"><em>This plugin puts a little search box right into Visual Studio to make it easy to find work items.  It is an addin for Team Foundation Client (Team Explorer) and is accessible from the Team menu when you're connected to a Team Foundation Server and is also avalible from a VS Toolbar.  You just type in some search text and it runs a work item query for you showing you results across the work item store.</em></span></p><img src="http://blog.peter.goodman.ms/blogImages/searchWorkItems.gif" /><br /><br />
<p><span lang="EN">Source: <a href="http://www.codeplex.com/searchworkitems/" target="_blank">Codeplex project "Search Work Items"</a></span></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>109</wp:post_id>
		<wp:post_date>2007-11-05 01:54:16</wp:post_date>
		<wp:post_date_gmt>2007-11-04 12:54:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tfs-work-item-search</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<category domain="category" nicename="team-foundation-server"><![CDATA[Team Foundation Server]]></category>
		<category domain="post_tag" nicename="tfs"><![CDATA[TFS]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>HeadMelter of the week – Self-Constrained Generic Base Classes</title>
		<link>http://blog.petegoo.com/index.php/2007/11/04/headmelter-of-the-week-self-constrained-generic-base-classes/</link>
		<pubDate>Sat, 03 Nov 2007 16:55:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2007/11/04/headmelter-of-the-week-self-constrained-generic-base-classes.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Melted my own brain for a few hours with this one today. Essentially a self-constrained generic base class looks like the following.</p>
<div style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: Consolas">
<p style="MARGIN: 0px">    <span style="COLOR: blue">public</span> <span style="COLOR: blue">class</span> <span style="COLOR: #2b91af">MyEntity</span> : <span style="COLOR: #2b91af">EntityBase</span>&lt;<span style="COLOR: #2b91af">MyEntity</span>&gt; {</p>
<p style="MARGIN: 0px">    }</p>
<p style="MARGIN: 0px"> </p></div>
<p style="MARGIN: 0px">This allows me to put some generic implementations in a base class for code that I would simply duplicate otherwise. For example:</p>
<p style="MARGIN: 0px"> </p>
<div style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: Consolas">
<p style="MARGIN: 0px">    <span style="COLOR: blue">public</span> <span style="COLOR: blue">class</span> <span style="COLOR: #2b91af">EntityBase</span>&lt;T&gt; : <span style="COLOR: #2b91af">IEquatable</span>&lt;T&gt;, <span style="COLOR: #2b91af">IComparable</span>&lt;T&gt;</p>
<p style="MARGIN: 0px">    {</p>
<p style="MARGIN: 0px">        <span style="COLOR: blue">public</span> <span style="COLOR: blue">int</span> CompareTo(T other) {</p>
<p style="MARGIN: 0px">            <span style="COLOR: green">// Insert compare code here</span></p>
<p style="MARGIN: 0px"> </p>
<p style="MARGIN: 0px">        }</p>
<p style="MARGIN: 0px"> </p>
<p style="MARGIN: 0px">        <span style="COLOR: blue">public</span> <span style="COLOR: blue">bool</span> Equals(T other) {</p>
<p style="MARGIN: 0px">            <span style="COLOR: green">// Insert Equality Code Here</span></p>
<p style="MARGIN: 0px">        }</p>
<p style="MARGIN: 0px">    }</p></div><!--EndFragment-->
<p style="MARGIN: 0px"> </p>
<p style="MARGIN: 0px">Enjoy!</p><!--EndFragment-->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>110</wp:post_id>
		<wp:post_date>2007-11-04 05:55:06</wp:post_date>
		<wp:post_date_gmt>2007-11-03 16:55:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>headmelter-of-the-week-self-constrained-generic-base-classes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[C#]]></category>
		<category domain="category" nicename="head-melter"><![CDATA[Head Melter]]></category>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>WCF: Custom Collections with Extra Payload</title>
		<link>http://blog.petegoo.com/index.php/2007/10/31/wcf-custom-collections-with-extra-payload/</link>
		<pubDate>Tue, 30 Oct 2007 14:53:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2007/10/31/wcf-custom-collections-with-extra-payload.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I came across a pretty annoying problem to solve in WCF today. Suppose you have a custom collection of items you wish to use in a WCF contract but it also has extra properties that you have added, for example change tracking.</p>
<p>
</p><div style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: Consolas">
<p style="MARGIN: 0px">    [<span style="COLOR: #2b91af">Serializable</span>]</p>
<p style="MARGIN: 0px">    <span style="COLOR: blue">public</span> <span style="COLOR: blue">class</span> <span style="COLOR: #2b91af">DtoCollection</span>&lt;T&gt; : <span style="COLOR: #2b91af">List</span>&lt;T&gt;</p>
<p style="MARGIN: 0px">    {</p>
<p style="MARGIN: 0px">        <span style="COLOR: blue">private</span> <span style="COLOR: #2b91af">List</span>&lt;T&gt; addedItems;</p>
<p style="MARGIN: 0px">        <span style="COLOR: blue">private</span> <span style="COLOR: #2b91af">List</span>&lt;T&gt; removedItems;</p>
<p style="MARGIN: 0px">    }</p></div>
<p> </p>
<p>It will serialize the collection fine but your added properties and fields will not appear. The [CollectionDataContract] attribute will not help you. If you look at <a href="http://blogs.msdn.com/sowmy/archive/2006/02/22/536747.aspx" target="_blank&quot;">this really great post</a> from Sowmy Srinivasan's blog you can see the order of preference for WCF serialization markup. So in the case above you can implement IXmlSerializable to customize the serialization and deserialization of your custom collection. I originally found this solution on David Foderick's blog - OnMaterialize(), but the link seems to be down at the moment. I'll not repost the code here but google cache should still have it at <a href="http://72.14.253.104/search?q=cache:qTfNNcNbjI0J:netknowledgenow.com:81/CS/blogs/onmaterialize/archive/2007/01/18/Control-WCF-Serialization-of-Collections-with-IXmlSerializable.aspx+WCF+%22custom+collections%22&amp;hl=en&amp;ct=clnk&amp;cd=3" target="_blank&quot;">this link</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>111</wp:post_id>
		<wp:post_date>2007-10-31 03:53:36</wp:post_date>
		<wp:post_date_gmt>2007-10-30 14:53:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wcf-custom-collections-with-extra-payload</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Useful macro for creating Visual Studio 2005 dependent (nested) items</title>
		<link>http://blog.petegoo.com/index.php/2007/09/12/useful-macro-for-creating-visual-studio-2005-dependent-nested-items/</link>
		<pubDate>Wed, 12 Sep 2007 01:14:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2007/09/13/useful-macro-for-creating-visual-studio-2005-dependent-nested-items.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[Check out this useful macro for visual studio 2005 dependent (nested) items. Useful for breaking up large classes into partials when refactoring doesn't make sense. I found it useful when you want, for example one integration test class per implementation class and the test class is getting a bit large.<br /><br /> <img height="211" style="margin: 5px" width="307" alt="" src="http://blog.peter.goodman.ms/dependentitems.gif" /><br /><br />Source: <a href="http://www.delarou.net/weblog/PermaLink,guid,a81a2d9d-02de-4fe1-ad8d-ee2fee97cf20.aspx" target="_blank">http://www.delarou.net/weblog/PermaLink,guid,a81a2d9d-02de-4fe1-ad8d-ee2fee97cf20.aspx</a>
<blockquote>
    <p>Visual Studio .NET Macro for nesting project items<br /><br />This macro enables you to nest project items inside Visual Studio .NET. Until now, there is no easy way to nest project items through the Visual Studio IDE, you can only do it by manipulating the project (.csproj or .vbproj) file and adding the DependentUpon element.<br /><br />Inside the IStaySharp.vsmacros file there is a macro called 'Create Dependency' which allows you to nest two selected items. I have even created a video (672,18 KB) to illustrate how to configure and use the macro.<br /><br /></p>
</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date>2007-09-12 14:14:46</wp:post_date>
		<wp:post_date_gmt>2007-09-12 01:14:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>useful-macro-for-creating-visual-studio-2005-dependent-nested-items</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="post_tag" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Visual Studio Unit Test and the evil vsmdi</title>
		<link>http://blog.petegoo.com/index.php/2007/09/12/visual-studio-unit-test-and-the-evil-vsmdi/</link>
		<pubDate>Wed, 12 Sep 2007 00:45:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2007/09/13/visual-studio-unit-test-and-the-evil-vsmdi.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p align="left"><span>During a recent project we found a recurring problem where the test view of the unit (&amp; integration) test projects would not load and we could not run tests. This was typically seen by the Test View load progress bar sitting at around 99%. This just adds to the list of "features" of VSTS Unit Test that make life oh so irritating<br /><br />It is due to the corruption of the *.vsmdi files in the visual studio solution which is caused by auto-merging the content of the file or having the test view property window open when getting the latest version.<br /><br /> The problem is outlined in this blog post (also note the comments for possible workarounds)<br /><br />Source: <a href="http://kjellsj.blogspot.com/2006/04/vsmdi-file-weak-spot-of-vsts-test.html" target="_blank">http://kjellsj.blogspot.com/2006/04/vsmdi-file-weak-spot-of-vsts-test.html</a><br /></span></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>113</wp:post_id>
		<wp:post_date>2007-09-12 13:45:20</wp:post_date>
		<wp:post_date_gmt>2007-09-12 00:45:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>visual-studio-unit-test-and-the-evil-vsmdi</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
		<category domain="post_tag" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>I am 70% Optimus Prime....oh yes</title>
		<link>http://blog.petegoo.com/index.php/2007/08/16/i-am-70-optimus-prime-oh-yes/</link>
		<pubDate>Thu, 16 Aug 2007 10:53:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2007/08/16/i-am-70-optimus-prime.oh-yes.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://www.funflip.com/" style="color:white;text-decoration:none;font:normal normal bold 9px/normal Tahoma;padding:70px 0px 0px 21px;text-align:left;display:block;width:268px;height:73px;background:url('http://www.funflip.com/_images/quiz/transformers/btns/289x143_optimus.jpg') no-repeat;">I AM<br /><span style="font-size:24px;">70%</span><br /><span style="font-size:12px;line-height:20px;">OPTIMUS PRIME</span></a><a href="http://www.funflip.com/">Take the Transformers Quiz</a>
</p><p><i>Optimus Prime is the heroic leader of the Autobots. He is the personification of courage, strength, and integrity. His personal motto is that ?Freedom is the right of all sentient beings.?
<br /><br />
Like Optimus Prime, you are good by nature. But beware because mischievous thoughts sometimes tempt you. You are inspiring, confident, and a natural leader. The Autobots have chosen well. In addition, you enjoy being one step ahead of your friends as far as trends and technology. 
</i></p>
<p>Hmmmm.....Not sure I filled that one out right.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>114</wp:post_id>
		<wp:post_date>2007-08-16 10:53:23</wp:post_date>
		<wp:post_date_gmt>2007-08-16 10:53:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>i-am-70-optimus-prime-oh-yes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<wp:comment>
			<wp:comment_id>81</wp:comment_id>
			<wp:comment_author><![CDATA[wow gold]]></wp:comment_author>
			<wp:comment_author_email>aiyipianni@qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.gamelee.fr/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2008-11-14 00:27:47</wp:comment_date>
			<wp:comment_date_gmt>2008-11-14 00:27:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[you can buy wow gold here!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Visual Studio 2008 Beta 2 Released</title>
		<link>http://blog.petegoo.com/index.php/2007/07/26/visual-studio-2008-beta-2-released/</link>
		<pubDate>Thu, 26 Jul 2007 03:29:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2007/07/27/visual-studio-2008-beta-2-released.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>First impressions are really good. The install went fine on a dual core laptop in parallel with VS 2005 already installed. The first thing I notice is that the performance is good (no worse than 2005) and the XAML designer is much improved over the cider CTPs.</p>
<p>Had a quick play with LINQ on a generic list and the intellisense support seems spot on.</p>
<p>Must sleep now.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>115</wp:post_id>
		<wp:post_date>2007-07-26 16:29:17</wp:post_date>
		<wp:post_date_gmt>2007-07-26 03:29:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>visual-studio-2008-beta-2-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<category domain="post_tag" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="category" nicename="vs2008"><![CDATA[VS2008]]></category>
		<category domain="category" nicename="wpf"><![CDATA[WPF]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>WPF Routed Commands</title>
		<link>http://blog.petegoo.com/index.php/2007/07/21/wpf-routed-commands/</link>
		<pubDate>Fri, 20 Jul 2007 19:51:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2007/07/21/wpf-routed-commands.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Working in WPF, it's not very long before you come across Routed Commands. The idea of allowing events to bubble and tunnel up and down the UI tree has always been around but the ICommand, RoutedCommand and RoutedUICommand features of WPF have made it a lot easier.</p>
<p>Here are some useful resources for finding out more if you are stuck.</p>
<p><a href="http://www.microsoft.com/belux/msdn/nl/community/columns/jdruyts/wpf_commandpattern.mspx" target="_blank">Jelle Druyts Article "The Command Pattern in Windows Presentation Foundation"</a><br /><a href="http://www.samspublishing.com/articles/article.asp?p=688529&amp;seqNum=4&amp;rl=1" target="_blank">Adam Nathan's sample chapter on "Important New Concepts in WPF&gt;Commands"</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date>2007-07-21 08:51:58</wp:post_date>
		<wp:post_date_gmt>2007-07-20 19:51:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wpf-routed-commands</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<category domain="category" nicename="wpf"><![CDATA[WPF]]></category>
		<category domain="post_tag" nicename="wpf"><![CDATA[WPF]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Re-Throwing Exceptions</title>
		<link>http://blog.petegoo.com/index.php/2007/04/26/re-throwing-exceptions/</link>
		<pubDate>Thu, 26 Apr 2007 01:05:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2007/04/27/re-throwing-exceptions.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I was going over some old code recently to try to resolve a production issue. The log of the stack trace was not providing enough information on the thrown exception and it reminded me of a good tip for throwing and specifically re-throwing exceptions.</p>
<p>Consider the following code:</p>
<p> </p>
<div class="codeBlock">
<p><span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"><span style="COLOR: blue">try<br /><span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'">{<br /><span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"><span style="COLOR: blue">  int</span> x = 0;<br /><span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"><span style="COLOR: blue">  int</span> y = 5 / x;<br /><span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'">}<br /><span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"><span style="COLOR: blue">catch</span> (<span style="COLOR: teal">Exception</span> ex)<br /><span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'">{<br />  </span><span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"><span style="COLOR: blue">throw</span> ex;<br /><span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'">} </span></span></span></span></span></span></span></span></span></p></div>
<p>The stack trace at the time that the DivisionByZero is thrown will be different from the rethrow in the catch block. This is because the "throw ex" will create a new exception and throw it. Instead, you should try to use the code below.</p>
<div class="codeBlock">
<p><span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"><span style="COLOR: blue">try<br /><span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'">{<br />  </span><span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"><span style="COLOR: blue">int</span> x = 0;<br />  </span><span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"><span style="COLOR: blue">int</span> y = x / 5;<br /><span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'">}<br /><span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"><span style="COLOR: blue">catch</span> (<span style="COLOR: teal">Exception</span> ex)<br /><span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'">{<br />  </span><span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"><span style="COLOR: blue">throw</span>;<br /><span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'">} </span></span></span></span></span></span></span></p></div>
<p>In this case the original exception will be thrown with the correct stack trace. Of course wrapping the exception before it is thrown will also preserve the stack trace.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>117</wp:post_id>
		<wp:post_date>2007-04-26 14:05:03</wp:post_date>
		<wp:post_date_gmt>2007-04-26 01:05:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>re-throwing-exceptions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[C#]]></category>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>DSL Tools in Visual Studio 2010</title>
		<link>http://blog.petegoo.com/index.php/2008/11/09/dsl-tools-in-visual-studio-2010/</link>
		<pubDate>Sat, 08 Nov 2008 22:49:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2008/11/10/dsl-tools-in-visual-studio-2010.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://blogs.msdn.com/stuart_kent" target="_blank">Stuart Kent</a> has <a href="http://blogs.msdn.com/stuart_kent/archive/2008/11/05/dsl-tools-in-visual-studio-2010.aspx" target="_blank">blogged about</a> the new features they are planning for DSL Tools in the Visual Studio 2010 timeframe. Of particular interest are:</p>  <ul>   <li>     <p><strong>Dsl extensibility</strong>. Extend the domain model and behavior for a DSL after it's been deployed, including DSLs shipped by a third party.</p>   </li>    <li>     <p><strong>Readonly</strong>. Selectively switch off the ability to edit models and model elements in a designer.</p>   </li>    <li>     <p><strong>Forms-based UI</strong>. Easily bind models to winforms and WPF-based forms UI. IMS now implements the necessary databinding interfaces.</p>   </li>    <li>     <p><strong>Modelbus</strong>. A new piece of platform to support cross-referencing between models and interaction between designers. This has been one of customers' main requests. This one kind of blows my <a href="http://www.codeplex.com/DslCrossModel" target="_blank">codeplex</a> project out of the water, which is probably a good thing as I can't find the time to finish it.</p>   </li>    <li>     <p><strong>T4 precompile</strong>. Precompile text templates so that they can be deployed for use on machines that do not have VS installed.</p>   </li> </ul>  <p>Also of interest are the various blog entries on the overlap between DSL and Oslo from <a href="http://blogs.msdn.com/stuart_kent/archive/2008/11/07/dsl-tools-and-oslo.aspx" target="_blank">Stuart Kent</a> and <a href="http://blogs.msdn.com/keith_short/archive/2008/11/06/oslo-and-the-dsl-toolkit.aspx" target="_blank">Keith Short</a>. Personally I think Oslo is a huge step forward for Model-Driven architectures and shows a willingness to provide something useful for developers which does more than simply expand the already disparate tooling.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>125</wp:post_id>
		<wp:post_date>2008-11-09 11:49:31</wp:post_date>
		<wp:post_date_gmt>2008-11-08 22:49:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dsl-tools-in-visual-studio-2010</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dsl-tools"><![CDATA[DSL Tools]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Preview Handlers for Vista and Outlook 2007</title>
		<link>http://blog.petegoo.com/index.php/2008/12/09/preview-handlers-for-vista-and-outlook-2007/</link>
		<pubDate>Tue, 09 Dec 2008 02:46:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2008/12/10/preview-handlers-for-vista-and-outlook-2007.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Really useful for those xml files that people send you.</p>  <p>Download the <a href="http://msdn.microsoft.com/en-us/magazine/cc163487.aspx" target="_blank">MSDN Magazine Preview Handlers</a> and then setup the xml file with <a href="http://blogs.msdn.com/toub/archive/2006/12/14/preview-handler-association-editor.aspx" target="_blank">this really cool utility</a>. It gives explorer and outlook preview capabilities for all sorts of file types.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>126</wp:post_id>
		<wp:post_date>2008-12-09 15:46:56</wp:post_date>
		<wp:post_date_gmt>2008-12-09 02:46:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>preview-handlers-for-vista-and-outlook-2007</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<category domain="post_tag" nicename="office"><![CDATA[Office]]></category>
		<category domain="category" nicename="productivity"><![CDATA[Productivity]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>C# var – with great power comes great responsibility</title>
		<link>http://blog.petegoo.com/index.php/2008/12/09/c-var-with-great-power-comes-great-responsibility/</link>
		<pubDate>Tue, 09 Dec 2008 02:51:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2008/12/10/c-var-with-great-power-comes-great-responsibility.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>There are many heated discussions on the overuse of var and I'm not going to repeat the arguments here. Personally, I have no problem with var used in the declaration of a variable where the value is instantiated inline via a constructor, anything else (apart from LINQ) seems dangerous. Having said that, the following sample I came across today is simply stupid.</p>  <p>var controller = new MyController().GetValueX(foo);</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>127</wp:post_id>
		<wp:post_date>2008-12-09 15:51:40</wp:post_date>
		<wp:post_date_gmt>2008-12-09 02:51:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>c-var-with-great-power-comes-great-responsibility</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[C#]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>MS-Test DeploymentItem Attribute……..Aaaaaaaagh!</title>
		<link>http://blog.petegoo.com/index.php/2009/01/21/ms-test-deploymentitem-attribute-aaaaaaaagh/</link>
		<pubDate>Wed, 21 Jan 2009 03:05:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2009/02/24/ms-test-deploymentitem-attribute.aaaaaaaagh.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>We have a policy of using MS-Test, although that is overdue for a serious review.</p>  <p>So it turns out you can use the deployment item attribute.... </p>  <p style="background: white; margin: 0cm 0cm 0pt"><span style="font-size: 10pt; color: black; font-family: &quot;Courier New&quot;">[</span><span style="font-size: 10pt; color: #2b91af; font-family: &quot;Courier New&quot;">TestMethod</span><span style="font-size: 10pt; color: black; font-family: &quot;Courier New&quot;">] </span></p>  <p style="background: white; margin: 0cm 0cm 0pt"><span style="font-size: 10pt; color: black; font-family: &quot;Courier New&quot;">[</span><span style="font-size: 10pt; color: #2b91af; font-family: &quot;Courier New&quot;">DeploymentItem</span><span style="font-size: 10pt; color: black; font-family: &quot;Courier New&quot;">(</span><span style="font-size: 10pt; color: #a31515; font-family: &quot;Courier New&quot;">"UnitTest.MyProject.TestData.xml"</span><span style="font-size: 10pt; color: black; font-family: &quot;Courier New&quot;">)] </span></p>  <p style="background: white; margin: 0cm 0cm 0pt"><span style="font-size: 10pt; color: blue; font-family: &quot;Courier New&quot;">public</span><span style="font-size: 10pt; color: black; font-family: &quot;Courier New&quot;"> </span><span style="font-size: 10pt; color: blue; font-family: &quot;Courier New&quot;">void</span><span style="font-size: 10pt; color: black; font-family: &quot;Courier New&quot;"> GetAllStatuses() {...} </span></p>  <p />  <p>....As long as you don’t provide a constant... </p>  <p />  <p style="background: white; margin: 0cm 0cm 0pt"><span style="font-size: 10pt; color: blue; font-family: &quot;Courier New&quot;">public</span><span style="font-size: 10pt; color: black; font-family: &quot;Courier New&quot;"> </span><span style="font-size: 10pt; color: blue; font-family: &quot;Courier New&quot;">const</span><span style="font-size: 10pt; color: black; font-family: &quot;Courier New&quot;"> </span><span style="font-size: 10pt; color: blue; font-family: &quot;Courier New&quot;">string</span><span style="font-size: 10pt; color: black; font-family: &quot;Courier New&quot;"> XMLCONFIGFILE = </span><span style="font-size: 10pt; color: #a31515; font-family: &quot;Courier New&quot;">"UnitTest.MyProject.TestData.xml"</span><span style="font-size: 10pt; color: black; font-family: &quot;Courier New&quot;">; </span></p>  <p />  <p style="background: white; margin: 0cm 0cm 0pt"><span style="font-size: 10pt; color: black; font-family: &quot;Courier New&quot;">[</span><span style="font-size: 10pt; color: #2b91af; font-family: &quot;Courier New&quot;">TestMethod</span><span style="font-size: 10pt; color: black; font-family: &quot;Courier New&quot;">] </span></p>  <p style="background: white; margin: 0cm 0cm 0pt"><span style="font-size: 10pt; color: black; font-family: &quot;Courier New&quot;">[</span><span style="font-size: 10pt; color: #2b91af; font-family: &quot;Courier New&quot;">DeploymentItem</span><span style="font-size: 10pt; color: black; font-family: &quot;Courier New&quot;">(</span><span style="font-size: 10pt; color: #2b91af; font-family: &quot;Courier New&quot;">TestHelper</span><span style="font-size: 10pt; color: black; font-family: &quot;Courier New&quot;">.XMLCONFIGFILE)] </span></p>  <p style="background: white; margin: 0cm 0cm 0pt"><span style="font-size: 10pt; color: blue; font-family: &quot;Courier New&quot;">public</span><span style="font-size: 10pt; color: black; font-family: &quot;Courier New&quot;"> </span><span style="font-size: 10pt; color: blue; font-family: &quot;Courier New&quot;">void</span><span style="font-size: 10pt; color: black; font-family: &quot;Courier New&quot;"> GetAllStatuses() {...} </span></p>  <p />  <p>It just ignores it.....Genius! Now my tests have to be littered with this string literal. </p>  <p>Makes you wonder how they are implementing this stuff. </p>  <p class="MsoNormal">Pete </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date>2009-01-21 16:05:01</wp:post_date>
		<wp:post_date_gmt>2009-01-21 03:05:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ms-test-deploymentitem-attribute-aaaaaaaagh</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ms-test"><![CDATA[MS Test]]></category>
		<category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>88</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Greene]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2009-01-30 05:36:35</wp:comment_date>
			<wp:comment_date_gmt>2009-01-30 05:36:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Pete, your blog has lost it&#39;s skin.&lt;br /&gt;&lt;br /&gt;This is why we&#39;re using NUnit with the new stuff :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>89</wp:comment_id>
			<wp:comment_author><![CDATA[Stefan Steinegger]]></wp:comment_author>
			<wp:comment_author_email>stefan.syz@bluewin.ch</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2009-04-23 12:45:29</wp:comment_date>
			<wp:comment_date_gmt>2009-04-23 12:45:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, just had the same. DeploymentItems are really unpredictable. Sometimes they are derived from baseclasses, sometime you need to redeclare them. It&#39;s just a mess.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>WCF Collections with Payload via Surrogates</title>
		<link>http://blog.petegoo.com/index.php/2009/03/16/wcf-collections-with-payload-via-surrogates/</link>
		<pubDate>Mon, 16 Mar 2009 02:01:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2009/03/17/wcf-collections-with-payload-via-surrogates.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://blog.petegoo.com/archive/2007/10/31/wcf-custom-collections-with-extra-payload.aspx" target="_blank">Previously</a> I posted about the problem with WCF and collection which have a payload in them. I came across this problem again when using the DataContractJsonSerializer and thought I would look at possibilities to resolve it.</p>  <p>If you have implemented the IXmlSerializable interface then you are kind of stuffed because the Json serializer will emit json with a bunch of xml in the middle….nice! It is really useful to reference <a href="http://blogs.msdn.com/sowmy/archive/2006/02/22/536747.aspx" target="_blank">sowmy’s post</a> on the precedence of serializable classes in the Data Contract family of serializers.</p>  <p>Instead you can use a Surrogate. This is a class which implements <a title="IDataContractSurrogate on MSDN" href="http://msdn.microsoft.com/en-us/library/system.runtime.serialization.idatacontractsurrogate.aspx" target="_blank">IDataContractSurrogate</a> and can be passed to the constructor of the serializer. It tells the serializer that when you come to serialize type <strong><em>x</em></strong>, instead use type <strong><em>y</em></strong> and I will give you the converted instance. At the other end the class gets deserialized into the original type and all is good. </p>  <p>For our custom collection with payload this works great. It will <strong>not</strong> however work with CLR types like DateTime, the precedence of WCF serialization kicks in before the surrogate provider is queried for a transmission type.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>129</wp:post_id>
		<wp:post_date>2009-03-16 15:01:30</wp:post_date>
		<wp:post_date_gmt>2009-03-16 02:01:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wcf-collections-with-payload-via-surrogates</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="serialization"><![CDATA[Serialization]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>92</wp:comment_id>
			<wp:comment_author><![CDATA[software development uk]]></wp:comment_author>
			<wp:comment_author_email>william@geeksltd.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.geeks.ltd.uk/Services.html</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2009-08-28 10:43:57</wp:comment_date>
			<wp:comment_date_gmt>2009-08-28 10:43:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey, that was interesting,&lt;br /&gt;&lt;br /&gt;wCF is still new and we all did not expected it to be free of bugs and problems, I hope the new version will get better and better by the time&lt;br /&gt;&lt;br /&gt;Anyway, thanks for the post]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>DataContractJsonSerializer and DateTime values</title>
		<link>http://blog.petegoo.com/index.php/2009/03/16/datacontractjsonserializer-and-datetime-values/</link>
		<pubDate>Mon, 16 Mar 2009 02:13:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2009/03/17/datacontractjsonserializer-and-datetime-values.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In using the <a title="MSDN DataContractJsonSerializer" href="http://msdn.microsoft.com/en-us/library/system.runtime.serialization.json.datacontractjsonserializer.aspx" target="_blank">DataContractJsonSerializer</a> beware of <a href="http://msdn.microsoft.com/en-us/library/bb412170.aspx#" target="_blank">DateTime instances</a> which have been instantiated as non-UTC. If you declare without explicitly assigning a DateTime you get the same as <em>default(DateTime)</em>, this is 01/01/01 00:00:00 (0 ticks) with a DateTimeKind of <em>Unspecified</em>. When the DataContractJsonSerializer looks at this value (or a Local datetime), it will try to convert it to UTC by subtracting the time zone ala UTC standard notation, this results in a date time that is less that 0 ticks and an out of range exception if you are west of GMT.</p>  <p>The solution is to always instantiate as UTC and you can avoid this issue. As <a href="http://blog.petegoo.com/archive/2009/03/17/wcf-collections-with-payload-via-surrogates.aspx" target="_blank">mentioned previously</a> you cannot interrupt the serialization process for DateTime on a member of the DataContract serializer family.</p>  <p>Another pain in the rectum is that it will change the accuracy of your DateTime value from 100 ns to 1 ms, so if you are relying on this value being the same for change tracking or any other means then this will produce problems.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date>2009-03-16 15:13:36</wp:post_date>
		<wp:post_date_gmt>2009-03-16 02:13:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>datacontractjsonserializer-and-datetime-values</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="json"><![CDATA[JSON]]></category>
		<category domain="post_tag" nicename="serialization"><![CDATA[Serialization]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>97</wp:comment_id>
			<wp:comment_author><![CDATA[Srihari]]></wp:comment_author>
			<wp:comment_author_email>srihari.kilari@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2010-02-24 09:44:28</wp:comment_date>
			<wp:comment_date_gmt>2010-02-24 09:44:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,&lt;br /&gt;&lt;br /&gt;I am building an RESTFull WCF service. My data contract types having the DateTime fields. If I assign the DateTime value of the field to DateTime.MinValue, the format of DateTime showing in the rendered output for Json is &amp;quot;Date(-62135596800000)&amp;quot; . In rest of the cases it is showing the format &amp;quot;2007-10-30T06:56:00&amp;quot;&lt;br /&gt;&lt;br /&gt;I tested the Json output with different dateTime values. Those are,&lt;br /&gt;&lt;br /&gt;1. If DateTime field value is &amp;quot;DateTime.Now&amp;quot;, then Json output format is Date(1266960616682-0800) &lt;br /&gt;2. If DateTime field value is &amp;quot;DateTime.MinValue&amp;quot;, then Json output format is Date(-62135596800000)&lt;br /&gt;3. if we asssign any date explicitly, the json output format is &amp;quot;2007-10-30T06:56:00&amp;quot; &lt;br /&gt;&lt;br /&gt;I want single DateTime format through out my json output. you help me on this.&lt;br /&gt;&lt;br /&gt;Thanks,&lt;br /&gt;Srihari&lt;br /&gt;]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Shizxaml – Silverlight’s old codename?</title>
		<link>http://blog.petegoo.com/index.php/2009/03/23/shizxaml-ndash-silverlightrsquos-old-codename/</link>
		<pubDate>Mon, 23 Mar 2009 04:04:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2009/03/24/shizxaml-ndash-silverlightrsquos-old-codename.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>According to <a title="Mike Harsh blog" href="http://blogs.msdn.com/mharsh/" target="_blank">Mike Harsh</a> in his Mix talk on <a href="http://videos.visitmix.com/MIX09/T45F" target="_blank">Silverlight 3.0 – Out of Browser</a>, before silverlight was WPF/E, internally Microsoft were calling it <strong><em>Shizxaml</em></strong>. I so wish this had been the product name. “Lets shizxaml that sucker” and the like. Brilliant!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>131</wp:post_id>
		<wp:post_date>2009-03-23 17:04:43</wp:post_date>
		<wp:post_date_gmt>2009-03-23 04:04:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>shizxaml-ndash-silverlightrsquos-old-codename</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="silverlight"><![CDATA[Silverlight]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1714</wp:comment_id>
			<wp:comment_author><![CDATA[Ian Randall]]></wp:comment_author>
			<wp:comment_author_email>ihrandall@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://gravatar.com/ihrandall</wp:comment_author_url>
			<wp:comment_author_IP>210.48.100.234</wp:comment_author_IP>
			<wp:comment_date>2014-03-19 16:01:25</wp:comment_date>
			<wp:comment_date_gmt>2014-03-19 03:01:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I so want this to be true.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395198085.517411;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1397266651.8396621;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Don&#8217;t try to explain geek jokes to your partner</title>
		<link>http://blog.petegoo.com/index.php/2009/05/10/donrsquot-try-to-explain-geek-jokes-to-your-partner/</link>
		<pubDate>Sun, 10 May 2009 13:16:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2009/05/11/donrsquot-try-to-explain-geek-jokes-to-your-partner.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img src="http://imgs.xkcd.com/comics/exploits_of_a_mom.png" /> </p>  <p> </p>  <p>I tried to explain the humour in this joke to my girlfriend. I was laughing too hard at the time, partly at the joke, partly at the fact I was trying to explain it to her. Don’t try this at home, it may make you a very lonely person.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>132</wp:post_id>
		<wp:post_date>2009-05-10 13:16:56</wp:post_date>
		<wp:post_date_gmt>2009-05-10 13:16:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>donrsquot-try-to-explain-geek-jokes-to-your-partner</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
				<title>Unit Testing Visual Studio DSL Tools</title>
		<link>http://blog.petegoo.com/index.php/2009/09/14/unit-testing-visual-studio-dsl-tools/</link>
		<pubDate>Mon, 14 Sep 2009 00:18:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2009/09/15/unit-testing-visual-studio-dsl-tools.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I’ve been meaning to post this entry for a while now so while I wait for a 2010 beta install to complete…. </p>  <p>For a long time I thought it wasn’t possible to unit test DSL Tools projects easily. Due to the nature of the environment it is sometimes difficult to see how unit testing is possible. The model elements are put in a partition in a store and all the partial classes, rules etc are very tightly coupled.</p>  <p>It wasn’t until I wanted to write a use-case oriented management layer on top of our multiple DSLs that I first thought of how it was possible. I wanted to a find way to test that the abstracted co-ordination methods on the management layer would create the expected model elements and what I got was an accidental pattern for testing DSL tools.</p>  <p>The main trick lies in creating a model context that will hold your store, model root and handle transactions.</p>  <p>The ModelingTestContext class:</p>  <div style="font-family: courier new; background: white; color: black; font-size: 10pt">   <p style="margin: 0px"><span style="color: blue">public</span> <span style="color: blue">class</span> <span style="color: #2b91af">ModelingTestContext</span> : <span style="color: #2b91af">IDisposable</span> {</p>    <p style="margin: 0px">    <span style="color: blue">private</span> Transaction tx;</p>    <p style="margin: 0px">    <span style="color: blue">private</span> Store store;</p>    <p style="margin: 0px">    <span style="color: blue">public</span> ModelingTestContext() {</p>    <p style="margin: 0px">        store = <span style="color: blue">new</span> Store();</p>    <p style="margin: 0px"> </p>    <p style="margin: 0px">        <span style="color: #2b91af">Type</span> domainModelType = <span style="color: blue">typeof</span>(MyCompany.DomainModelDslDomainModel);</p>    <p style="margin: 0px"> </p>    <p style="margin: 0px">        <span style="color: green">// Create a new store to deserialize the instance to. </span></p>    <p style="margin: 0px"> </p>    <p style="margin: 0px">        <span style="color: #2b91af">Type</span>[] metaTypes = <span style="color: blue">new</span> <span style="color: #2b91af">Type</span>[]</p>    <p style="margin: 0px">                               {</p>    <p style="margin: 0px">                                   <span style="color: blue">typeof</span> (CoreDesignSurfaceDomainModel),</p>    <p style="margin: 0px">                                   domainModelType </p>    <p style="margin: 0px">                               };</p>    <p style="margin: 0px">        <span style="color: green">// Load these types into the store, so that it knows about them for deserialization </span></p>    <p style="margin: 0px">        store.LoadDomainModels(metaTypes);</p>    <p style="margin: 0px"> </p>    <p style="margin: 0px">        tx = store.TransactionManager.BeginTransaction(<span style="color: #a31515">"Domain Modeling Test Context"</span>);</p>    <p style="margin: 0px">        domainModelRoot = <span style="color: blue">new</span> MyModelRoot(store);</p>    <p style="margin: 0px">    }</p>    <p style="margin: 0px"> </p>    <p style="margin: 0px"> </p>    <p style="margin: 0px">    <span style="color: blue">public</span> MyModelRoot DomainModelRoot {</p>    <p style="margin: 0px">        <span style="color: blue">get</span> { <span style="color: blue">return</span> domainModelRoot; }</p>    <p style="margin: 0px">    }</p>    <p style="margin: 0px"> </p>    <p style="margin: 0px">    <span style="color: blue">public</span> Store Store {</p>    <p style="margin: 0px">        <span style="color: blue">get</span> { <span style="color: blue">return</span> store; }</p>    <p style="margin: 0px">    }</p>    <p style="margin: 0px"> </p>    <p style="margin: 0px">    <span style="color: blue">public</span> <span style="color: blue">void</span> CommitChanges() {</p>    <p style="margin: 0px">        tx.Commit();</p>    <p style="margin: 0px">        tx = store.TransactionManager.BeginTransaction(<span style="color: #a31515">"Domain Modeling Test Context"</span>);</p>    <p style="margin: 0px">    }</p>    <p style="margin: 0px"> </p>    <p style="margin: 0px">    <span style="color: blue">public</span> <span style="color: blue">void</span> Dispose() {</p>    <p style="margin: 0px">        <span style="color: blue">if</span>(tx != <span style="color: blue">null</span> &amp;&amp; tx.IsActive) {</p>    <p style="margin: 0px">            tx.Rollback();</p>    <p style="margin: 0px">        }</p>    <p style="margin: 0px">    }</p>    <p style="margin: 0px">}</p> </div>  <p>This class will create the model root inside the store and manage transactions for us. We next need to start writing a test.</p>  <div style="font-family: courier new; background: white; color: black; font-size: 10pt">   <p style="margin: 0px">[TestMethod]</p>    <p style="margin: 0px"><span style="color: blue">public</span> <span style="color: blue">void</span> CreateAssociationSingleMultiplicity() {</p>    <p style="margin: 0px">    <span style="color: blue">using</span> (ModelingTestContext domainContext = <span style="color: blue">new</span> ModelingTestContext()) {</p>    <p style="margin: 0px">        domainContext.DomainModelRoot.Namespace = <span style="color: #a31515">"Aderant.Test.DomainFoo"</span>;</p>    <p style="margin: 0px"> </p>    <p style="margin: 0px">        DomainComponent clientDc = domainContext.CreateDomainComponent(<span style="color: #a31515">"Client"</span>);</p>    <p style="margin: 0px"> </p>    <p style="margin: 0px">        DomainComponent addressDc = domainContext.CreateDomainComponent(<span style="color: #a31515">"Address"</span>);</p>    <p style="margin: 0px"> </p>    <p style="margin: 0px">        AssociationLink link = clientDc.AssociateWith(addressDc, Multiplicity.One);</p>    <p style="margin: 0px"> </p>    <p style="margin: 0px"> </p>    <p style="margin: 0px">        domainContext.CommitChanges();</p>    <p style="margin: 0px">        Assert.AreEqual(addressDc.Name, link.TargetRoleName);</p>    <p style="margin: 0px"> </p>    <p style="margin: 0px">    }</p>    <p style="margin: 0px">}</p> </div>  <p>We create a context inside a using block so that we can clean up the transaction when the test completes. In this test I have added extension methods to the domain context and the DomainComponent class to support the common scenarios I used in testing like <em>CreateDomainComponent </em>and <em>AssociationWith</em>, allowing me to encapsulate common behavior. These extension methods can then be moved to become behavior of the model or the management API. Therefore over time you provide better API functionality which is tested.</p>  <p>Now some people would call this integration testing instead of unit testing…..fair enough. Also some would say that the extension methods and the test context for that matter are making the tests brittle as DRY does not apply to unit testing, I would disagree as otherwise these tests would become unmanageable.</p>  <p>I hope you find this useful.</p>  <p>Pete</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>133</wp:post_id>
		<wp:post_date>2009-09-14 13:18:17</wp:post_date>
		<wp:post_date_gmt>2009-09-14 00:18:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>unit-testing-visual-studio-dsl-tools</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dsl-tools"><![CDATA[DSL Tools]]></category>
		<category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Using JSON.Net to eval json into a dynamic variable in C#</title>
		<link>http://blog.petegoo.com/index.php/2009/10/26/using-json-net-to-eval-json-into-a-dynamic-variable-in/</link>
		<pubDate>Mon, 26 Oct 2009 08:22:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2009/10/27/using-json.net-to-eval-json-into-a-dynamic-variable-in.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>So I thought this would be possible and finally decided to give it a shot in 2010 Beta 2. It turns a bunch of JSON into an <a href="http://msdn.microsoft.com/en-us/library/system.dynamic.expandoobject(VS.100).aspx">ExpandoObject</a> using <a title="Json.Net" href="http://json.codeplex.com/">JSON.Net</a>.</p>  <p>Needs cleaning up but not too bad.</p>  <div class="Section1">   <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">        [<span style="color: #2b91af">TestMethod</span>]</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">        <span style="color: blue">public</span> <span style="color: blue">void</span> DeserializeTestObjectToDynamic(){</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: #2b91af">TestObject</span> testObject = <span style="color: blue">new</span> <span style="color: #2b91af">TestObject</span>() {</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                FirstName = <span style="color: #a31515">"Peter"</span>,</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                LastName = <span style="color: #a31515">"Goodman"</span>,</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                DateOfBirth = <span style="color: blue">new</span> <span style="color: #2b91af">DateTime</span>(<span style="color: brown">1979</span>, <span style="color: brown">2</span>, <span style="color: brown">3</span>),</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                Child = <span style="color: blue">new</span> <span style="color: #2b91af">TestChildObject</span> {</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                    Line1 = <span style="color: #a31515">"child line 1"</span>,</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                    Line2 = <span style="color: #a31515">"child line 2"</span>,</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                    Line3 = <span style="color: #a31515">"child line 3"</span>,</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                    City = <span style="color: #a31515">"child city"</span></span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                },</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt"> </span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                Children = <span style="color: blue">new</span> <span style="color: #2b91af">Collection</span>&lt;<span style="color: #2b91af">TestChildObject</span>&gt;() {</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                    <span style="color: blue">new</span> <span style="color: #2b91af">TestChildObject</span>() { </span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                    Line1 = <span style="color: #a31515">"children 1 line 1"</span>,</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                    Line2 = <span style="color: #a31515">"children 1 line 2"</span>,</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                    Line3 = <span style="color: #a31515">"children 1 line 3"</span>,</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                    City = <span style="color: #a31515">"children 1 city"</span></span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                },</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                <span style="color: blue">new</span> <span style="color: #2b91af">TestChildObject</span>() { </span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                    Line1 = <span style="color: #a31515">"children 2 line 1"</span>,</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                    Line2 = <span style="color: #a31515">"children 2 line 2"</span>,</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                    Line3 = <span style="color: #a31515">"children 2 line 3"</span>,</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                    City = <span style="color: #a31515">"children 2 city"</span></span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                }</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                             }</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt"> </span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            };</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt"> </span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: green">// Get our json string </span></span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: blue">string</span> json = <span style="color: #2b91af">JsonConvert</span>.SerializeObject(testObject);</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt"> </span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: green">// Create the json.Net Linq object for our json string</span></span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: #2b91af">JObject</span> jsonObject = <span style="color: #2b91af">JObject</span>.Parse(json);</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt"> </span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: green">// eval into an expando</span></span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: blue">dynamic</span> dynObject = ConvertJTokenToObject(jsonObject);</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt"> </span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt"> </span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt"> </span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: #2b91af">Assert</span>.IsNotNull(dynObject);</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt"> </span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: #2b91af">Assert</span>.IsNotInstanceOfType(dynObject, <span style="color: blue">typeof</span>(<span style="color: #2b91af">TestObject</span>));</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: #2b91af">Assert</span>.IsInstanceOfType(dynObject, <span style="color: blue">typeof</span>(<span style="color: #2b91af">ExpandoObject</span>));</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt"> </span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: #2b91af">Assert</span>.AreEqual(testObject.FirstName, dynObject.FirstName);</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: #2b91af">Assert</span>.AreEqual(testObject.LastName, dynObject.LastName);</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: #2b91af">Assert</span>.AreEqual(testObject.DateOfBirth, dynObject.DateOfBirth);</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt"> </span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: #2b91af">Assert</span>.IsNotNull(dynObject.Child);</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: #2b91af">Assert</span>.AreEqual(testObject.Child.Line1, dynObject.Child.Line1);</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: #2b91af">Assert</span>.AreEqual(testObject.Child.Line2, dynObject.Child.Line2);</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: #2b91af">Assert</span>.AreEqual(testObject.Child.Line3, dynObject.Child.Line3);</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt"> </span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: #2b91af">Assert</span>.IsNotNull(dynObject.Children);</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: #2b91af">Assert</span>.AreEqual(testObject.Children.Count, dynObject.Children.Length);</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: blue">for</span> (<span style="color: blue">int</span> i = <span style="color: brown">0</span>; i &lt; testObject.Children.Count; i++) {</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                <span style="color: #2b91af">Assert</span>.AreEqual(testObject.Children[i].Line1, dynObject.Children[i].Line1);</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                <span style="color: #2b91af">Assert</span>.AreEqual(testObject.Children[i].Line2, dynObject.Children[i].Line2);</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                <span style="color: #2b91af">Assert</span>.AreEqual(testObject.Children[i].Line3, dynObject.Children[i].Line3);</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            }</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">        }</span></p>    <p class="MsoNormal"> </p> </div>  <div class="Section1">   <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">        <span style="color: blue">public</span> <span style="color: blue">object</span> ConvertJTokenToObject(<span style="color: #2b91af">JToken</span> token) {</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: blue">if</span> (token <span style="color: blue">is</span> <span style="color: #2b91af">JValue</span>) { </span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                <span style="color: blue">return</span> ((<span style="color: #2b91af">JValue</span>)token).Value;</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            }</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: blue">if</span> (token <span style="color: blue">is</span> <span style="color: #2b91af">JObject</span>) { </span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                <span style="color: #2b91af">ExpandoObject</span> expando = <span style="color: blue">new</span> <span style="color: #2b91af">ExpandoObject</span>();</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                (<span style="color: blue">from</span> childToken <span style="color: blue">in</span> ((<span style="color: #2b91af">JToken</span>)token) <span style="color: blue">where</span> childToken <span style="color: blue">is</span> <span style="color: #2b91af">JProperty</span> <span style="color: blue">select</span> childToken <span style="color: blue">as</span> <span style="color: #2b91af">JProperty</span>).ToList().ForEach(property =&gt; {</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                    ((<span style="color: #2b91af">IDictionary</span>&lt;<span style="color: blue">string</span>, <span style="color: blue">object</span>&gt;)expando).Add(property.Name, ConvertJTokenToObject(property.Value));</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                });</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                <span style="color: blue">return</span> expando;</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            }</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: blue">if</span>(token <span style="color: blue">is</span> <span style="color: #2b91af">JArray</span>){</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                <span style="color: blue">object</span>[] array = <span style="color: blue">new</span> <span style="color: blue">object</span>[((<span style="color: #2b91af">JArray</span>)token).Count];</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                <span style="color: blue">int</span> index = <span style="color: brown">0</span>;</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                <span style="color: blue">foreach</span> (<span style="color: #2b91af">JToken</span> arrayItem <span style="color: blue">in</span> ((<span style="color: #2b91af">JArray</span>)token)) {</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                    array[index] = ConvertJTokenToObject(arrayItem);</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                    index++;</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                }</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">                <span style="color: blue">return</span> array;</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            }</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">            <span style="color: blue">throw</span> <span style="color: blue">new</span> <span style="color: #2b91af">ArgumentException</span>(<span style="color: blue">string</span>.Format(<span style="color: #a31515">"Unknown token type '{0}'"</span>, token.GetType()), <span style="color: #a31515">"token"</span>);</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt">        }</span></p>    <p style="line-height: normal; margin-bottom: 0pt" class="MsoNormal"><span style="font-family: consolas; font-size: 9.5pt"> </span></p>    <p class="MsoNormal"> </p> </div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>134</wp:post_id>
		<wp:post_date>2009-10-26 21:22:13</wp:post_date>
		<wp:post_date_gmt>2009-10-26 08:22:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-json-net-to-eval-json-into-a-dynamic-variable-in</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="dynamic"><![CDATA[Dynamic]]></category>
		<category domain="post_tag" nicename="json"><![CDATA[JSON]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>201</wp:comment_id>
			<wp:comment_author><![CDATA[Ron Klein]]></wp:comment_author>
			<wp:comment_author_email>solution@ronklein.co.il</wp:comment_author_email>
			<wp:comment_author_url>http://heblog.ronklein.co.il/</wp:comment_author_url>
			<wp:comment_author_IP>212.199.141.174</wp:comment_author_IP>
			<wp:comment_date>2011-03-08 02:13:46</wp:comment_date>
			<wp:comment_date_gmt>2011-03-07 13:13:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That's very nice, thanks for the cool code!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299529404.7446";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299503626.0434";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>123</wp:comment_id>
			<wp:comment_author><![CDATA[Insurance Quotes]]></wp:comment_author>
			<wp:comment_author_email>john@zolpo.com</wp:comment_author_email>
			<wp:comment_author_url>http://zolpo.com/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2010-04-05 20:44:12</wp:comment_date>
			<wp:comment_date_gmt>2010-04-05 20:44:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It&#39;s really good tutorial.Thank you!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>124</wp:comment_id>
			<wp:comment_author><![CDATA[Dody Gunawinata]]></wp:comment_author>
			<wp:comment_author_email>dody@nomadlife.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2010-04-10 19:37:55</wp:comment_date>
			<wp:comment_date_gmt>2010-04-10 19:37:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hmm...Is there anyway to make it recursive so that any properties with array of objects are also processed?&lt;br /&gt;&lt;br /&gt;for example the following result <a href="http://maps.google.com/maps/api/geocode/json?latlng=40.714224,-73.961452&amp;sensor=true" title="http://maps.google.com/maps/api/geocode/json?latlng=40.714224,-73.961452&amp;sensor=true">maps.google.com/.../json</a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>126</wp:comment_id>
			<wp:comment_author><![CDATA[Florian Hoornaar]]></wp:comment_author>
			<wp:comment_author_email>florian.hoornaar@octavalent.nl</wp:comment_author_email>
			<wp:comment_author_url>http://www.octavalent.nl/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2009-12-27 16:03:52</wp:comment_date>
			<wp:comment_date_gmt>2009-12-27 16:03:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Cool stuff. Will you be able to query the dynObject using Linq?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>127</wp:comment_id>
			<wp:comment_author><![CDATA[Florian Hoornaar]]></wp:comment_author>
			<wp:comment_author_email>florian.hoornaar@octavalent.nl</wp:comment_author_email>
			<wp:comment_author_url>http://www.octavalent.nl/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2009-12-27 16:18:21</wp:comment_date>
			<wp:comment_date_gmt>2009-12-27 16:18:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I updated your code a bit. Now it works with Linq as well. Let me know if you are interested.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>128</wp:comment_id>
			<wp:comment_author><![CDATA[Jay Allard]]></wp:comment_author>
			<wp:comment_author_email>jay@allardworks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2009-12-29 19:17:37</wp:comment_date>
			<wp:comment_date_gmt>2009-12-29 19:17:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very Handy... thanks!&lt;br /&gt;&lt;br /&gt;I made a slight change to eliminate the repetitive casting.&lt;br /&gt;&lt;br /&gt;                IDictionary&amp;lt;string, object&amp;gt; expando = new ExpandoObject();&lt;br /&gt;                (from childToken in ((JToken)token) where childToken is JProperty select childToken as JProperty).ToList().ForEach(property =&amp;gt;&lt;br /&gt;                {&lt;br /&gt;                    expando.Add(property.Name, ConvertJTokenToObject(property.Value));&lt;br /&gt;                });&lt;br /&gt;]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1715</wp:comment_id>
			<wp:comment_author><![CDATA[Memory leak of ExpandoObject in C# | Tao&#039;s experience]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://lintaonz.wordpress.com/2014/04/10/memory-leak-of-expandoobject-in-c/</wp:comment_author_url>
			<wp:comment_author_IP>192.0.81.188</wp:comment_author_IP>
			<wp:comment_date>2014-04-11 00:44:39</wp:comment_date>
			<wp:comment_date_gmt>2014-04-10 11:44:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] ExpandoObject class introduced in C# 4 is quite handy when dealing with Json objects. One of my project need to extract some info from a very complicate Json object which is impossible to create a c# class to map the Json object. So I use follow code from this blog: [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1397130279.717525;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:103:{s:15:"comment_post_ID";i:134;s:14:"comment_author";s:58:"Memory leak of ExpandoObject in C# | Tao&#039;s experience";s:18:"comment_author_url";s:75:"http://lintaonz.wordpress.com/2014/04/10/memory-leak-of-expandoobject-in-c/";s:20:"comment_author_email";s:0:"";s:15:"comment_content";s:287:"[&#8230;] ExpandoObject class introduced in C# 4 is quite handy when dealing with Json objects. One of my project need to extract some info from a very complicate Json object which is impossible to create a c# class to map the Json object. So I use follow code from this blog: [&#8230;]";s:12:"comment_type";s:8:"pingback";s:7:"user_ip";s:12:"192.0.81.188";s:10:"user_agent";s:31:"The Incutio XML-RPC PHP Library";s:8:"referrer";N;s:4:"blog";s:23:"http://blog.petegoo.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:100:"http://blog.petegoo.com/index.php/2009/10/26/using-json-net-to-eval-json-into-a-dynamic-variable-in/";s:21:"akismet_comment_nonce";s:6:"failed";s:15:"SERVER_SOFTWARE";s:17:"Microsoft-IIS/7.0";s:11:"REQUEST_URI";s:11:"/xmlrpc.php";s:13:"_FCGI_X_PIPE_";s:53:"\\.\pipe\IISFCGI-3fbb6ac0-cd81-41be-9f47-b3f371845aac";s:15:"ALLUSERSPROFILE";s:14:"C:\ProgramData";s:7:"APPDATA";s:56:"C:\Windows\system32\config\systemprofile\AppData\Roaming";s:11:"APP_POOL_ID";s:18:"customerPool_12212";s:18:"CommonProgramFiles";s:35:"C:\Program Files (x86)\Common Files";s:23:"CommonProgramFiles(x86)";s:35:"C:\Program Files (x86)\Common Files";s:18:"CommonProgramW6432";s:29:"C:\Program Files\Common Files";s:12:"COMPUTERNAME";s:3:"W04";s:7:"ComSpec";s:27:"C:\Windows\system32\cmd.exe";s:16:"FP_NO_HOST_CHECK";s:2:"NO";s:12:"LOCALAPPDATA";s:54:"C:\Windows\system32\config\systemprofile\AppData\Local";s:20:"NUMBER_OF_PROCESSORS";s:2:"16";s:2:"OS";s:10:"Windows_NT";s:4:"Path";s:318:"C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Program Files (x86)\Dell\SysMgt\oma\bin;C:\Program Files (x86)\Dell\SysMgt\idrac;c:\php;C:\Windows\System32\WindowsPowerShell\v1.0\;c:\Users\administrator.WINHOST\AppData\Roaming\npm;c:\Program Files (x86)\nodejs\;C:\Program Files (x86)\Dell\SysMgt\shared\bin";s:7:"PATHEXT";s:53:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC";s:22:"PROCESSOR_ARCHITECTURE";s:3:"x86";s:22:"PROCESSOR_ARCHITEW6432";s:5:"AMD64";s:20:"PROCESSOR_IDENTIFIER";s:50:"Intel64 Family 6 Model 26 Stepping 5, GenuineIntel";s:15:"PROCESSOR_LEVEL";s:1:"6";s:18:"PROCESSOR_REVISION";s:4:"1a05";s:11:"ProgramData";s:14:"C:\ProgramData";s:12:"ProgramFiles";s:22:"C:\Program Files (x86)";s:17:"ProgramFiles(x86)";s:22:"C:\Program Files (x86)";s:12:"ProgramW6432";s:16:"C:\Program Files";s:12:"PSModulePath";s:51:"C:\Windows\system32\WindowsPowerShell\v1.0\Modules\";s:6:"PUBLIC";s:15:"C:\Users\Public";s:11:"SystemDrive";s:2:"C:";s:10:"SystemRoot";s:10:"C:\Windows";s:4:"TEMP";s:15:"C:\Windows\TEMP";s:3:"TMP";s:15:"C:\Windows\TEMP";s:10:"USERDOMAIN";s:7:"WINHOST";s:8:"USERNAME";s:4:"W04$";s:11:"USERPROFILE";s:40:"C:\Windows\system32\config\systemprofile";s:6:"windir";s:10:"C:\Windows";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:19:"HTTP_CONTENT_LENGTH";s:3:"376";s:17:"HTTP_CONTENT_TYPE";s:8:"text/xml";s:11:"HTTP_ACCEPT";s:3:"*/*";s:20:"HTTP_ACCEPT_ENCODING";s:41:"deflate;q=1.0, compress;q=0.5, gzip;q=0.5";s:9:"HTTP_HOST";s:16:"blog.petegoo.com";s:15:"HTTP_USER_AGENT";s:31:"The Incutio XML-RPC PHP Library";s:19:"HTTP_X_ORIGINAL_URL";s:11:"/xmlrpc.php";s:13:"DOCUMENT_ROOT";s:15:"E:\web\petegooc";s:13:"INSTANCE_NAME";s:11:"PETEGOO.COM";s:15:"SCRIPT_FILENAME";s:36:"E:\web\petegooc\wordpress\xmlrpc.php";s:19:"IIS_WasUrlRewritten";s:1:"1";s:13:"UNENCODED_URL";s:11:"/xmlrpc.php";s:20:"IIS_UrlRewriteModule";s:10:"7.1.0761.0";s:12:"APPL_MD_PATH";s:20:"/LM/W3SVC/12212/ROOT";s:18:"APPL_PHYSICAL_PATH";s:16:"E:\web\petegooc\";s:9:"AUTH_TYPE";s:0:"";s:13:"AUTH_PASSWORD";s:0:"";s:9:"AUTH_USER";s:0:"";s:11:"CERT_COOKIE";s:0:"";s:10:"CERT_FLAGS";s:0:"";s:11:"CERT_ISSUER";s:0:"";s:17:"CERT_SERIALNUMBER";s:0:"";s:12:"CERT_SUBJECT";s:0:"";s:14:"CONTENT_LENGTH";s:3:"376";s:12:"CONTENT_TYPE";s:8:"text/xml";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:5:"HTTPS";s:3:"off";s:13:"HTTPS_KEYSIZE";s:0:"";s:19:"HTTPS_SECRETKEYSIZE";s:0:"";s:19:"HTTPS_SERVER_ISSUER";s:0:"";s:20:"HTTPS_SERVER_SUBJECT";s:0:"";s:11:"INSTANCE_ID";s:5:"12212";s:18:"INSTANCE_META_PATH";s:15:"/LM/W3SVC/12212";s:10:"LOCAL_ADDR";s:11:"96.31.35.44";s:10:"LOGON_USER";s:0:"";s:15:"PATH_TRANSLATED";s:36:"E:\web\petegooc\wordpress\xmlrpc.php";s:12:"QUERY_STRING";s:0:"";s:11:"REMOTE_ADDR";s:12:"192.0.81.188";s:11:"REMOTE_HOST";s:12:"192.0.81.188";s:11:"REMOTE_PORT";s:5:"18972";s:11:"REMOTE_USER";s:0:"";s:14:"REQUEST_METHOD";s:4:"POST";s:11:"SCRIPT_NAME";s:21:"/wordpress/xmlrpc.php";s:11:"SERVER_NAME";s:16:"blog.petegoo.com";s:11:"SERVER_PORT";s:2:"80";s:18:"SERVER_PORT_SECURE";s:1:"0";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.0";s:3:"URL";s:21:"/wordpress/xmlrpc.php";s:14:"ORIG_PATH_INFO";s:21:"/wordpress/xmlrpc.php";s:8:"PHP_SELF";s:21:"/wordpress/xmlrpc.php";s:12:"REQUEST_TIME";s:10:"1397130277";s:25:"comment_post_modified_gmt";s:19:"2010-12-16 04:15:32";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1397266771.7298419;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Hello again</title>
		<link>http://blog.petegoo.com/index.php/2010/06/26/hello-again/</link>
		<pubDate>Sat, 26 Jun 2010 19:11:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2010/06/27/hello-again.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>So, I’ve been pretty bad at updating my blog recently, and answering comments / deleting spam.</p>  <p>I’ve been spending most of my time in Workflow 4 recently so I think I’ll do a series or 2 of posts on that. Hopefully someone finds it interesting / useful.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>135</wp:post_id>
		<wp:post_date>2010-06-26 19:11:20</wp:post_date>
		<wp:post_date_gmt>2010-06-26 19:11:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hello-again</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
				<title>WF4 Services Part 1–The simple WF Service</title>
		<link>http://blog.petegoo.com/index.php/2010/06/26/wf4-services-part-1ndashthe-simple-wf-service/</link>
		<pubDate>Sat, 26 Jun 2010 07:56:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2010/06/27/wf4-services-part-1ndashthe-simple-wf-service.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I thought I’d do a series of posts on workflow services. There are plenty of resources out there already on how to build workflows and activities although not a huge amount has been said about workflow services. In my opinion this is the real power of workflow and its where WF4 really comes into its own. In fact I’m going to presume that you’ve played a little with workflow and understand what an activity is, that’s about it.</p>  <p>Over the series we’re going to be building a calculator service which performs integer operations in a stateful way so that subsequent operations build on the previous output.</p>  <p>1. Open Visual Studio 2010</p>  <p>2. Create a New Project of Type <strong>Visual C#/Workflow/WCF Workflow Service Application</strong></p>  <p><a href="http://blog.petegoo.com/images/blog_petegoo_com/WindowsLiveWriter/23b80cd38c61_D605/CropperCapture%5B3%5D_2.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" class="wlDisabledImage" title="CropperCapture[3]" border="0" alt="CropperCapture[3]" src="/images/blog_petegoo_com/WindowsLiveWriter/23b80cd38c61_D605/CropperCapture%5B3%5D_thumb.jpg" width="500" height="318" /></a></p>  <p>3. The project template should create the following workflow for you.</p>  <p><a href="http://blog.petegoo.com/images/blog_petegoo_com/WindowsLiveWriter/23b80cd38c61_D605/CropperCapture%5B4%5D_2.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" class="wlDisabledImage" title="CropperCapture[4]" border="0" alt="CropperCapture[4]" src="/images/blog_petegoo_com/WindowsLiveWriter/23b80cd38c61_D605/CropperCapture%5B4%5D_thumb.jpg" width="234" height="284" /></a></p>  <p>So what are these activities? Well if you’ve read any other intros to workflow you will know that the outer activity is a Sequence. Simply put, the child activities enclosed in a sequence are executed sequentially, of course. The activities labelled ReceiveRequest and SendResponse are Receive and SendReply activities. Typically found together these activities are the basis of creating any workflow service. Each pair represents an operation on a service contract. The operation name as shown here is GetData and the “Content” on each of the activities is the definition of the Request or Response message.</p>  <p>4. Next we’re going to change the operation name and the message contents so that we get an Start operation for our Calculator service which accepts and integer.</p>  <p>The Start operation is going to take an integer value and begin our calculator service. From this integer we can then perform as many operations as we like acting on the current state. To store the current state we need to first create a “Value” variable. Click on the Variables button at the bottom of the designer and add a new Int32 variable called “Value”. You can delete the data variable as we will not need it.</p>  <p><a href="http://blog.petegoo.com/images/blog_petegoo_com/WindowsLiveWriter/23b80cd38c61_D605/CropperCapture%5B5%5D_2.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" class="wlDisabledImage" title="CropperCapture[5]" border="0" alt="CropperCapture[5]" src="/images/blog_petegoo_com/WindowsLiveWriter/23b80cd38c61_D605/CropperCapture%5B5%5D_thumb.jpg" width="584" height="110" /></a></p>  <p>On the ReceiveRequest activity change the OperationName to “Start”. Click View Message next to the Content of the ReceiveRequest activity, change the mode to “Parameters” and add a new parameter called value of type integer and assign it to our “Value” variable.    <br />    <br /><a href="http://blog.petegoo.com/images/blog_petegoo_com/WindowsLiveWriter/23b80cd38c61_D605/CropperCapture%5B6%5D_2.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" class="wlDisabledImage" title="CropperCapture[6]" border="0" alt="CropperCapture[6]" src="/images/blog_petegoo_com/WindowsLiveWriter/23b80cd38c61_D605/CropperCapture%5B6%5D_thumb.jpg" width="609" height="203" /></a></p>  <p>On the “SendResponse” activity change the message content to “Parameters” and add a “Result “ parameter with the value as below:</p>  <p><a href="http://blog.petegoo.com/images/blog_petegoo_com/WindowsLiveWriter/23b80cd38c61_D605/CropperCapture%5B7%5D_2.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" class="wlDisabledImage" title="CropperCapture[7]" border="0" alt="CropperCapture[7]" src="/images/blog_petegoo_com/WindowsLiveWriter/23b80cd38c61_D605/CropperCapture%5B7%5D_thumb.jpg" width="617" height="206" /></a></p>  <p>5. Run the service by hitting CTRL+F5, this will start the WCF Test Client. Double click the Start method on the left hand pane and enter an integer value then Invoke. You should see the result of our service operation as below;</p>  <p><a href="http://blog.petegoo.com/images/blog_petegoo_com/WindowsLiveWriter/23b80cd38c61_D605/CropperCapture%5B9%5D_2.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" class="wlDisabledImage" title="CropperCapture[9]" border="0" alt="CropperCapture[9]" src="/images/blog_petegoo_com/WindowsLiveWriter/23b80cd38c61_D605/CropperCapture%5B9%5D_thumb.jpg" width="699" height="282" /></a></p>  <p>You can notice that we have created a service with the contract name “IService” which has a single operation “Start” accepting an integer value and returning a string. This is really no different than creating a normal WCF service with a contract interface and an implementation class that returns a string like the following:</p>  <pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">Service1 </span>: <span style="color: #2b91af">IService1 </span>{
    <span style="color: blue">public string </span>Start(<span style="color: blue">int </span>value) {
        <span style="color: blue">return string</span>.Format(<span style="color: #a31515">"Calculation session started with value {0}"</span>, value);
    }
}

[<span style="color: #2b91af">ServiceContract</span>]
<span style="color: blue">public interface </span><span style="color: #2b91af">IService1 </span>{

    [<span style="color: #2b91af">OperationContract</span>]
    <span style="color: blue">string </span>Start(<span style="color: blue">int </span>value);
}</pre>

<p>So how do we change the contract name? Click the Receive activity and then on the Properties panel (F4) change the ServiceContractName property to another namespace and name combination.</p>

<p>So that was how to quickly create a WF4 service. Next we’ll add the calculation operations and do some correlation.</p>

<p>The source for the steps in this post is attached below.</p>

<p>
  </p><div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:F60BB8FA-6F02-4999-8F5E-9DD4E92C4DA7:942115ca-79c2-43be-9a16-53056b2c24c6" class="wlWriterEditableSmartContent"><div><a href="http://blog.petegoo.com/images/blog_petegoo_com/WindowsLiveWriter/23b80cd38c61_D605/CalculatorWorkflowService.zip" target="_blank">CalculatorWorkflowService.zip</a></div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date>2010-06-26 20:56:42</wp:post_date>
		<wp:post_date_gmt>2010-06-26 07:56:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wf4-services-part-1ndashthe-simple-wf-service</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wf"><![CDATA[WF]]></category>
		<category domain="category" nicename="wf4"><![CDATA[WF4]]></category>
		<category domain="post_tag" nicename="workflow"><![CDATA[Workflow]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>WF4 Services Part 2 – Correlation</title>
		<link>http://blog.petegoo.com/index.php/2010/06/26/wf4-services-part-2-ndash-correlation/</link>
		<pubDate>Sat, 26 Jun 2010 10:13:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2010/06/27/wf4-services-part-2-ndash-correlation.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[Continuing on from <a href="http://blog.petegoo.com/index.php/2010/06/26/wf4-services-part-1ndashthe-simple-wf-service/">Part 1</a> now we are going to add the Calculation operations to our stateful workflow service. First we need to look back and understand our previous operation “Start”.

If you look at the <a href="http://msdn.microsoft.com/en-us/library/system.servicemodel.activities.receive.aspx" target="_blank">Receive</a> activity for the Start operation you will see that it has a property in the properties panel (F4) called <a href="http://msdn.microsoft.com/en-us/library/system.servicemodel.activities.receive.cancreateinstance.aspx" target="_blank">CanCreateInstance</a> and it is set to true. This property means that a call to this operation will start a new instance of our workflow. Up to now our service has simply started when we called the “Start” method and ended after the response was sent. This is all well and good but as I stated above we want a stateful service that will track the current value of our operations and let us perform further operations in a chaining manner. To do this our Add, Subtract, Divide and Multiply operations are not going to create new instances but simply act upon the previous return value.

This poses a problem, if we can call the start operation multiple times and create multiple instance how are we going to know which instance we want when we make the subsequent calculation operations? This is where correlation comes in. Correlation is simply the method by which we direct incoming messages to the correct workflow instance. In our example we are going to use a parameter on each operation called session name. This will allow us to tag the session with a name so that we can bring up the right instance when we make subsequent calls. First we are going to need a <a href="http://msdn.microsoft.com/en-us/library/system.servicemodel.activities.correlationhandle.aspx" target="_blank">CorrelationHandle</a>. This is a special type provided by workflow which allows us to create this token so that the runtime can correlate properly.

<a href="http://blog.petegoo.com/images/blog_petegoo_com/WindowsLiveWriter/34675cca26f8_FA0B/CropperCapture%5B10%5D_2.jpg"><img class="wlDisabledImage" style="display: inline; border: 0px;" title="CropperCapture[10]" src="/images/blog_petegoo_com/WindowsLiveWriter/23b80cd38c61_D605/CropperCapture%5B10%5D_thumb.jpg" border="0" alt="CropperCapture[10]" width="218" height="273" /></a>

1. At the root sequence (Sequential Service), add a variable of type <strong><a href="http://msdn.microsoft.com/en-us/library/system.servicemodel.activities.correlationhandle.aspx" target="_blank">System.ServiceModel.Activities.CorrelationHandle</a></strong> called “SessionNameCorrelationHandle”. You do not need to default this variable, any type that derives from <strong><a href="http://msdn.microsoft.com/en-us/library/system.activities.handle.aspx" target="_blank">System.Activities.Handle</a></strong> will be constructed automatically by the runtime.

2. Also at the root sequence add another variable called “SessionName” of type string. This is going to hold the actual session name specified on the Start operation.

3. Edit the Content for the ReceiveRequest activity and add a parameter called “sessionName” of type string and assign it to the variable “SessionName”.

<a href="http://blog.petegoo.com/images/blog_petegoo_com/WindowsLiveWriter/34675cca26f8_FA0B/CropperCapture%5B12%5D_2.jpg"><img class="wlDisabledImage" style="display: inline; border: 0px;" title="CropperCapture[12]" src="/images/blog_petegoo_com/WindowsLiveWriter/23b80cd38c61_D605/CropperCapture%5B12%5D_thumb.jpg" border="0" alt="CropperCapture[12]" width="584" height="217" /></a>

Now we need to initialize our correlation handle on the Start operation.

4. On the send reply activity add another return parameter called “SessionReturn” which returns our SessionName variable.

5. Also on the send reply activity, from the properties panel choose CorrelationInitializers, add the initializer to our SessionNameCorrelationHandle on the left. On the right make sure you have “Query Correlation Initializer” selected which will allow us to choose a value from the result to initialize the correlation handle.From the drop down under XPath Queries choose our SessionReturn parameter.

<a href="http://blog.petegoo.com/images/blog_petegoo_com/WindowsLiveWriter/34675cca26f8_FA0B/CropperCapture%5B23%5D_2.jpg"><img class="wlDisabledImage" style="display: inline; border: 0px;" title="CropperCapture[23]" src="/images/blog_petegoo_com/WindowsLiveWriter/23b80cd38c61_D605/CropperCapture%5B23%5D_thumb.jpg" border="0" alt="CropperCapture[23]" width="598" height="256" /></a>

You do not have to use this method to initialize the correlation handle. You could also use the <a href="http://msdn.microsoft.com/en-us/library/system.servicemodel.activities.initializecorrelation.aspx" target="_blank">InitializeCorrelation</a> activity and place it after the SendReply activity, initializing from the “SessionName” variable rather than the return parameter.

Next we need to add our calculation operations which can be performed as many times as we want until we choose to end the session. To do this we are going to use a <a href="http://msdn.microsoft.com/en-us/library/system.activities.statements.pick.aspx" target="_blank">Pick</a> activity to host 4 Receive and SendReply pairs (Add, Subtract, Divide, Multiply). The <a href="http://msdn.microsoft.com/en-us/library/system.activities.statements.pick.aspx" target="_blank">Pick</a> activity is kind of like a parallel which contains multiple <a href="http://msdn.microsoft.com/en-us/library/system.activities.statements.pickbranch.aspx" target="_blank">Pick Branches</a>. Each Branch has a trigger and an action. Once the trigger in a branch has been satisfied the other branches are all cancelled and the action for the triggered branch is executed. We are going to use the Trigger part of each branch to host an infinite loop of the Receive/SendReply pairs so that they continue to accept subsequent calls.A final Pick branch will contain the End operation which will Stop the Calculator session and free up the correlation handle.

6. Add a <a href="http://msdn.microsoft.com/en-us/library/system.activities.statements.pick.aspx" target="_blank">Pick</a> activity at the end of our current workflow. Rename Branch1 to “Add Branch” by changing the title.Drag a While activity into the Trigger of "Add Branch”, set the condition to True so that it repeats indefinitely.

7. Drag a ReceiveAndSendReply from the toolbox into the While activity’s Body, change the operation name to “Add”. In the sequence created by the ReceiveAndSendReply add an Int32 variable called X. Change the content of the Receive(Add)to Parameters with an Int32 parameter called X and a string parameter called SessionName. Assign the X parameter to our X variable.

<a href="http://blog.petegoo.com/images/blog_petegoo_com/WindowsLiveWriter/34675cca26f8_FA0B/CropperCapture%5B16%5D_4.jpg"><img class="wlDisabledImage" style="display: inline; border: 0px;" title="CropperCapture[16]" src="/images/blog_petegoo_com/WindowsLiveWriter/23b80cd38c61_D605/CropperCapture%5B16%5D_thumb_1.jpg" border="0" alt="CropperCapture[16]" width="451" height="168" /></a>

8. To setup the correlation click on the CorrelatesOn property in the properties panel (F4) of the Receive(Add) activity. Change the CorrelatesWith to point to our SessionNameCorrelationHandle. Choose the property SessionName. Make sure the Key matches the key used in step 5.

<a href="http://blog.petegoo.com/images/blog_petegoo_com/WindowsLiveWriter/34675cca26f8_FA0B/CropperCapture%5B20%5D_2.jpg"><img class="wlDisabledImage" style="display: inline; border-width: 0px;" title="CropperCapture[20]" src="/images/blog_petegoo_com/WindowsLiveWriter/23b80cd38c61_D605/CropperCapture%5B20%5D_thumb.jpg" border="0" alt="CropperCapture[20]" width="397" height="222" /></a>

9. In between the Receive(Add) and it’s SendReply activity drag an Assign activity. In the To section enter the Value variable and in the right hand side enter the expression “Value + X”.

<a href="http://blog.petegoo.com/images/blog_petegoo_com/WindowsLiveWriter/34675cca26f8_FA0B/CropperCapture%5B18%5D_2.jpg"><img class="wlDisabledImage" style="display: inline; border: 0px;" title="CropperCapture[18]" src="/images/blog_petegoo_com/WindowsLiveWriter/23b80cd38c61_D605/CropperCapture%5B18%5D_thumb.jpg" border="0" alt="CropperCapture[18]" width="259" height="407" /></a>

10. On the SendReplyToReceive of the Add pair change the content to return parameters with a single parameter Result with a value of our Value variable.

11. Delete Branch2 from the pick and lets test what we have with CTRL+F5. Open the Start operation and enter an integer value and a string session name then invoke. Open the Add method and repeat the same name with another integer.

<a href="http://blog.petegoo.com/images/blog_petegoo_com/WindowsLiveWriter/34675cca26f8_FA0B/CropperCapture%5B21%5D_2.jpg"><img class="wlDisabledImage" style="display: inline; border: 0px;" title="CropperCapture[21]" src="/images/blog_petegoo_com/WindowsLiveWriter/23b80cd38c61_D605/CropperCapture%5B21%5D_thumb.jpg" border="0" alt="CropperCapture[21]" width="587" height="244" /></a>

<a href="http://blog.petegoo.com/images/blog_petegoo_com/WindowsLiveWriter/34675cca26f8_FA0B/CropperCapture%5B22%5D_2.jpg"><img class="wlDisabledImage" style="display: inline; border: 0px;" title="CropperCapture[22]" src="/images/blog_petegoo_com/WindowsLiveWriter/23b80cd38c61_D605/CropperCapture%5B22%5D_thumb.jpg" border="0" alt="CropperCapture[22]" width="587" height="244" /></a>

12. Now Copy and paste the Add branch to create a Subtract, Divide and Multiply branches changing the operation names and assign activities as necessary. Note that you will need to go into each branch and change the CorrelatesOn property of each Receive activity so that the XPath is correct and not pointing to the Add method. Also remember to keep the Key the same as step 5. You will need to use the “\” integer divide operator of VB to do the divide assign statement.

13. Finally we need to add a branch for our end activity. This will be another Pick branch but this time there will be no While loop so that when it gets called, the other branches will get cancelled and the workflow will complete. Drag on a new PickBranch, Drag a ReceiveAndSendReply into the trigger, change the operation name, add the SessionName parameter to the content and set the correlation like the others.

So now we have created our stateful service with correlation on a session name. You should note that you cannot use the session name after calling End just like you could not use a random new session name on any operation but Start.

In the next part we will look at what happens in the service host to enable these services endpoints to be created.

Code for this post is attached below.
<div id="scid:F60BB8FA-6F02-4999-8F5E-9DD4E92C4DA7:09fa6981-ea56-4799-af28-d8d09be37bca" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div><a href="http://blog.petegoo.com/blog/images/blog_petegoo_com/WindowsLiveWriter/34675cca26f8_FA0B/CalculatorWorkflowService.zip" target="_blank">CalculatorWorkflowService.zip</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>137</wp:post_id>
		<wp:post_date>2010-06-26 23:13:19</wp:post_date>
		<wp:post_date_gmt>2010-06-26 10:13:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wf4-services-part-2-ndash-correlation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wf"><![CDATA[WF]]></category>
		<category domain="category" nicename="wf4"><![CDATA[WF4]]></category>
		<category domain="post_tag" nicename="workflow"><![CDATA[Workflow]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>193</wp:comment_id>
			<wp:comment_author><![CDATA[JDeVil]]></wp:comment_author>
			<wp:comment_author_email>jacodv_32@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.134.85.106</wp:comment_author_IP>
			<wp:comment_date>2011-03-02 21:34:17</wp:comment_date>
			<wp:comment_date_gmt>2011-03-02 08:34:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Seems to have cut off, can I mail?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299054857.8481";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>194</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>58.28.164.27</wp:comment_author_IP>
			<wp:comment_date>2011-03-03 08:21:36</wp:comment_date>
			<wp:comment_date_gmt>2011-03-02 19:21:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've sent you an email. Please reply to that one.
Thanks,
Pete]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299093696.4746";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>195</wp:comment_id>
			<wp:comment_author><![CDATA[JDeVil]]></wp:comment_author>
			<wp:comment_author_email>jacodv_32@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>196.210.206.241</wp:comment_author_IP>
			<wp:comment_date>2011-03-03 17:47:03</wp:comment_date>
			<wp:comment_date_gmt>2011-03-03 04:47:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sorry Pete, I must have ended up in junk mail.  I clear junk mail every morning.  
Please resend 
Regards]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299127623.4668";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>196</wp:comment_id>
			<wp:comment_author><![CDATA[JDeVil]]></wp:comment_author>
			<wp:comment_author_email>jacodv_32@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>196.210.206.241</wp:comment_author_IP>
			<wp:comment_date>2011-03-03 18:08:33</wp:comment_date>
			<wp:comment_date_gmt>2011-03-03 05:08:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[PS. Congrats on the cricket ... ;)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299128913.6268";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>197</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>118.92.21.74</wp:comment_author_IP>
			<wp:comment_date>2011-03-03 18:26:49</wp:comment_date>
			<wp:comment_date_gmt>2011-03-03 05:26:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[if you dont get the email it pete<at>petegoo<dot>con]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>196</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299130009.4368";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>198</wp:comment_id>
			<wp:comment_author><![CDATA[JDeVil]]></wp:comment_author>
			<wp:comment_author_email>jacodv_32@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>196.210.206.241</wp:comment_author_IP>
			<wp:comment_date>2011-03-03 18:34:06</wp:comment_date>
			<wp:comment_date_gmt>2011-03-03 05:34:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Added file to my skydrive

http://cid-faa10561dcf21dfe.office.live.com/self.aspx/.Public

Regards]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299130446.4982";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>199</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>118.92.21.74</wp:comment_author_IP>
			<wp:comment_date>2011-03-03 21:15:06</wp:comment_date>
			<wp:comment_date_gmt>2011-03-03 08:15:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've got a working project with the xamlx you gave me.

Its on skydrive here <a href="http://cid-4bebec4ec575c1f3.office.live.com/self.aspx/Code/JDevilReviewProcess.zip" rel="nofollow">http://cid-4bebec4ec575c1f3.office.live.com/self.aspx/Code/JDevilReviewProcess.zip</a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>198</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299140106.9316";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>200</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>118.92.21.74</wp:comment_author_IP>
			<wp:comment_date>2011-03-03 21:18:16</wp:comment_date>
			<wp:comment_date_gmt>2011-03-03 08:18:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, was a bit surprised by the cricket result although I have to admit my loyalties are changing to my new home country, especially in rugby :) I've also just noticed how my comments are formatted on this page. No wonder the email address didn't make sense.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299140296.6604";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>202</wp:comment_id>
			<wp:comment_author><![CDATA[JDeVil]]></wp:comment_author>
			<wp:comment_author_email>jacodv_32@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>196.215.119.188</wp:comment_author_IP>
			<wp:comment_date>2011-03-14 21:26:17</wp:comment_date>
			<wp:comment_date_gmt>2011-03-14 08:26:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Peter, just got back from leave.  I will get the test project and run it tonight.  
Thank You Very Much
Jaco]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1300091177.0765";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>203</wp:comment_id>
			<wp:comment_author><![CDATA[JDeVil]]></wp:comment_author>
			<wp:comment_author_email>jacodv_32@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>196.215.119.188</wp:comment_author_IP>
			<wp:comment_date>2011-03-14 21:41:47</wp:comment_date>
			<wp:comment_date_gmt>2011-03-14 08:41:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sorry Pete, the "r" slipped in...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1300092107.8763";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>204</wp:comment_id>
			<wp:comment_author><![CDATA[JDeVil]]></wp:comment_author>
			<wp:comment_author_email>jacodv_32@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>198.54.202.234</wp:comment_author_IP>
			<wp:comment_date>2011-03-16 06:19:50</wp:comment_date>
			<wp:comment_date_gmt>2011-03-15 17:19:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Pete, the sample application works.  The only difference I can see is that you have your proxy alive, thus no persistence required.

I my application I have a Silverlight Client that submits the review.  The workflow instance (other details omitted for simplicity...) is then save to an inbox.  Another user get the workflow instance id and then review the request and sends the review result.  At this stage a new proxy instance is created and the instance id is used.  Here is where my solution fails

Do you think it could be a configuration issue rather than a code issue, specific to the persistence.  I use SQL as persistence store

Regards
Jaco

Web.Config (http://cid-faa10561dcf21dfe.office.live.com/self.aspx/.Public/Web.config)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1300209590.9211";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>205</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>58.28.164.27</wp:comment_author_IP>
			<wp:comment_date>2011-03-16 08:55:12</wp:comment_date>
			<wp:comment_date_gmt>2011-03-15 19:55:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I would doubt whether the proxy instance is the issue if you are using content based correlation, the other main differencesbetween your project and mine are the actual types that I stubbed.

The main thing that can catch you out here is serialization. If any of types you are using in your workflow or sending over the service boundary are not serializable by the DataContractSerializer then you will find that your workflow bombs out and doesn't always tell you that this is the issue. This can happen on Persist or Send Reply. 

To solve these, I normally attach a debugger to w3wp and switch on all exceptions and it eventually becomes apparent.

Looking at your web.config it might be time to start building it up from scratch, starting with a simple, working, new workflow service template, add the receive and send activities and finally your own types and custom activities. By doing the step-by-step layering it should become apparent which piece of the puzzle is causing your issue. 

Also, if you don't already have it set up, configure your project to use IIS and install Windows Server AppFabric as it will give you the tracking that you need to see what is going on inside the WF.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>204</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1300218912.5741";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>206</wp:comment_id>
			<wp:comment_author><![CDATA[JDeVil]]></wp:comment_author>
			<wp:comment_author_email>jacodv_32@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>196.215.119.240</wp:comment_author_IP>
			<wp:comment_date>2011-03-16 19:06:12</wp:comment_date>
			<wp:comment_date_gmt>2011-03-16 06:06:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the advice,  I will start with the progressive approach and see what causes the faults.  I will let you know the outcome.
Regards]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1300255572.5966";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>207</wp:comment_id>
			<wp:comment_author><![CDATA[xinlu]]></wp:comment_author>
			<wp:comment_author_email>xinlunsm@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>199.213.51.74</wp:comment_author_IP>
			<wp:comment_date>2011-03-17 05:37:23</wp:comment_date>
			<wp:comment_date_gmt>2011-03-16 16:37:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,
Thanks for your very useful article. BTW, the link to download the code is broken. Could you fix that?

Thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1300301965.0999";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1300293443.414";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>208</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>58.28.164.27</wp:comment_author_IP>
			<wp:comment_date>2011-03-17 08:01:29</wp:comment_date>
			<wp:comment_date_gmt>2011-03-16 19:01:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="#comment-207" rel="nofollow">@xinlu </a> Should be fixed now. Thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1300302089.8082";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>188</wp:comment_id>
			<wp:comment_author><![CDATA[JDeVil]]></wp:comment_author>
			<wp:comment_author_email>jacodv_32@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>196.210.206.241</wp:comment_author_IP>
			<wp:comment_date>2011-03-02 03:07:39</wp:comment_date>
			<wp:comment_date_gmt>2011-03-01 14:07:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I wonder if you can help me with my Workflow.  I have followed the steps above, but for the life of me can not get me workflow to correlate.

I create the workflow successfully, return the corrolation id (WorlflowId:System.Guid), Initialize the Correlation handle with WorkflowId.ToString(),  and the call the workflow again passed in the WorkflowId as string as second parameter.

The client is Silverlight...

Please HELP!

Regards
Jaco]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299017415.0701";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1298988459.1934";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>189</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>58.28.164.27</wp:comment_author_IP>
			<wp:comment_date>2011-03-02 11:15:36</wp:comment_date>
			<wp:comment_date_gmt>2011-03-01 22:15:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[OK so here are a couple of things to check:
- Have you setup the CorrelatesOn property with the correct correlation handle for CorrelatedWith and the XPath query?
- Have you given the same key for the XPath query in the Correlation Initializer of your initial Receive/SendReply and in the CorrelatesOn of your second Receive/SendReply. If the key names are different then your correlation will not match
- Can you query your service from WCF Test Client?

Thanks,
Pete]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>188</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299017736.0552";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>192</wp:comment_id>
			<wp:comment_author><![CDATA[JDeVil]]></wp:comment_author>
			<wp:comment_author_email>jacodv_32@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.134.85.106</wp:comment_author_IP>
			<wp:comment_date>2011-03-02 21:32:00</wp:comment_date>
			<wp:comment_date_gmt>2011-03-02 08:32:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks, XAML follows


  
    
      
      
      
      
    
    
      
        True
      
    
    
      
        
          True
          False
        
      
      
        
          [SubmittedData]
          [SubmittedBy]
        
      
      
        
          [WorkflowInstanceId]
        
        
          [System.Guid.NewGuid()]
        
      
      
        
          [WorkflowInstanceId]
        
      
      
        [WorkflowInstanceId.ToString()]
      
      
      
      
        [SubmittedData.WorkflowInstanceId]
        [SubmittedData.Reviewers(0).Name]
        [SubmittedData.Reviewers(0).Email]
        [SubmittedData.WorkflowDescription]
        [SubmittedData.ProcessName]
        Waiting for review
        [SubmittedData.Originator.UserName]
        [SubmittedData.Originator.Email]
        
          
        
        False
        [SubmittedData.Reviewers(0).SLADateTime]
      
    
    
      
        
      
      
        
          True
          False
        
      
      
        
          
            
              
                http://tempuri.org/
              
            sm:body()/xgSc:Review/xgSc:reviewInstanceId
        
        
          [ReviewData]
          
        
      
      
      
        [WorkflowInstanceId]
      
    
  
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299054720.7926";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>191</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>118.92.21.74</wp:comment_author_IP>
			<wp:comment_date>2011-03-02 21:15:52</wp:comment_date>
			<wp:comment_date_gmt>2011-03-02 08:15:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[is it possible to send me some code? The XAML perhaps?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>190</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299053752.4199";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>190</wp:comment_id>
			<wp:comment_author><![CDATA[JDeVil]]></wp:comment_author>
			<wp:comment_author_email>jacodv_32@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.134.85.106</wp:comment_author_IP>
			<wp:comment_date>2011-03-02 21:04:53</wp:comment_date>
			<wp:comment_date_gmt>2011-03-02 08:04:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Pete, I think I have configured all the correlation properties correctly.  If I test with the WCF Test Client, then the Initial Receive works and returns the WorkflowId.  Then I invoke the second receive passing the WorkflowId as second parameter and get the folowing message
"One-way message is successfully delivered to the service side"

Regards
Jaco]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299053093.9939";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>252</wp:comment_id>
			<wp:comment_author><![CDATA[igor]]></wp:comment_author>
			<wp:comment_author_email>igor_alvarez_suarez@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>62.22.15.146</wp:comment_author_IP>
			<wp:comment_date>2011-10-06 02:35:11</wp:comment_date>
			<wp:comment_date_gmt>2011-10-05 13:35:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, your paper is fantastic!.
Im trying to load it from a custom activity, and i receive and error WorkflowApplicationUnhandledExceptionEventArgs: Only registered bookmark scopes can be used for creating scoped bookmarks

Any idea?

You can download code here : https://skydrive.live.com/?cid=9442ba11e8a19a6a&amp;sc=documents&amp;uc=1&amp;id=9442BA11E8A19A6A!809#]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1317821711.6763";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1317886721.1155";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>260</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>118.93.164.92</wp:comment_author_IP>
			<wp:comment_date>2011-10-06 21:30:28</wp:comment_date>
			<wp:comment_date_gmt>2011-10-06 08:30:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Basically the problem here is that the InvokeWorkflow activity is trying to dynamically execute an activity using the method described at <a href="http://blogs.msdn.com/b/rjacobs/archive/2011/03/29/wf4-how-to-invoke-a-child-workflow-as-xaml.aspx" rel="nofollow">http://blogs.msdn.com/b/rjacobs/archive/2011/03/29/wf4-how-to-invoke-a-child-workflow-as-xaml.aspx</a>. This is an issue because the target activity (Calculadora.xaml) has Receive activities in it. 

When the WorkflowServiceHost loads it needs to setup endpoints for all of the Receive activities in it's definition. However, using the dynamic load and execute method in InvokeWorkflow, the WorkflowServiceHost does not know about this activity or it's Receive endpoints when it is started as it is not yet part of the activity tree, therefore there are no endpoints setup for them and they are not really valid when it attempts to create the bookmark, hence your exception.

Unfortunately I suspect that the result is that you cannot host Receive activities in a .xaml file that will be invoked by InvokeWorkflow.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>252</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1317889828.6203";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Unit Testing Workflow 4 Activities : Basics</title>
		<link>http://blog.petegoo.com/index.php/2010/08/16/unit-testing-workflow-4-activities-basics/</link>
		<pubDate>Sun, 15 Aug 2010 12:22:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2010/08/16/unit-testing-workflow-4-activities-basics.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Unit testing workflows became a lot easier in WF4. The basic approach is the same as for normal code classes except for a few differences which we will cover in the posts in this series.</p>  <p>Lets start off with a simple code activity which will return the time in a given city.</p>  <pre class="code"><font size="2"><span style="color: blue">public class </span><span style="color: #2b91af">GetCityTime </span>: <span style="color: #2b91af">CodeActivity</span>&lt;<span style="color: #2b91af">DateTime</span>&gt;{

    [<span style="color: #2b91af">RequiredArgument</span>]
    <span style="color: blue">public </span><span style="color: #2b91af">InArgument</span>&lt;<span style="color: blue">string</span>&gt; City { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }

    <span style="color: blue">public </span><span style="color: #2b91af">InArgument</span>&lt;<span style="color: #2b91af">DateTime</span>&gt; LocalTime { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }

    <span style="color: blue">protected override </span><span style="color: #2b91af">DateTime </span>Execute(<span style="color: #2b91af">CodeActivityContext </span>context) {
        <span style="color: blue">string </span>city = City.Get(context);

        <span style="color: #2b91af">TimeZoneInfo </span>timeZoneInfo = GetTimeZoneForCity(city);
        <span style="color: blue">if </span>(timeZoneInfo == <span style="color: blue">null</span>) {
            <span style="color: blue">throw new </span><span style="color: #2b91af">ArgumentOutOfRangeException</span>(<span style="color: blue">string</span>.Format(<span style="color: #a31515">"Could not find timezone matching city '{0}'"</span>, city));
        }

        <span style="color: blue">return </span><span style="color: #2b91af">TimeZoneInfo</span>.ConvertTime(LocalTime == <span style="color: blue">null </span>? <span style="color: #2b91af">DateTime</span>.Now : LocalTime.Get(context), timeZoneInfo);
    }

    <span style="color: blue">private </span><span style="color: #2b91af">TimeZoneInfo </span>GetTimeZoneForCity(<span style="color: blue">string </span>city) {
        <span style="color: blue">return </span><span style="color: #2b91af">TimeZoneInfo</span>.GetSystemTimeZones()
            .Where(
                timezone =&gt; timezone.DisplayName.ToUpperInvariant().Contains(city.ToUpperInvariant()))
            .FirstOrDefault();

    }
}</font></pre>

<p>So lets start to build our first test. The <a title="WorkflowInvoker on MSDN" href="http://msdn.microsoft.com/en-us/library/system.activities.workflowinvoker.aspx" target="_blank">WorkflowInvoker</a> class allows us to execute a workflow activity in a blocking manner, meaning that it will execute the activity and wait for completion before continuing. We begin by testing that the City argument in indeed a required argument. This is always a good place to start and will make you think about the validations in your activity.</p>

<pre class="code"><font size="2">[<span style="color: #2b91af">ExpectedException</span>(<span style="color: blue">typeof</span>(<span style="color: #2b91af">ArgumentException</span>))]
[<span style="color: #2b91af">TestMethod</span>]
<span style="color: blue">public void </span>CityIsARequiredArgument() {
    <span style="color: #2b91af">WorkflowInvoker</span>.Invoke(<span style="color: blue">new </span><span style="color: #2b91af">GetCityTime</span>());
}
</font></pre>


<p> </p>

<p>Next we are going to check that providing an invalid value for City will indeed throw an exception.</p>

<pre class="code"><font size="2">[<span style="color: #2b91af">ExpectedException</span>(<span style="color: blue">typeof</span>(<span style="color: #2b91af">ArgumentOutOfRangeException</span>))]
[<span style="color: #2b91af">TestMethod</span>]
<span style="color: blue">public void </span>InvalidCityThrowsArgumentException() {
    <span style="color: #2b91af">WorkflowInvoker</span>.Invoke(<span style="color: blue">new </span><span style="color: #2b91af">GetCityTime</span>() {City = <span style="color: #a31515">"BlaBlaBla"</span>});
}
</font></pre>



<p>The last test is to check the actual execution. A handy feature of the WorkflowInvoker generic static methods are that you can execute an Activity&lt;T&gt; and the return signature of the WorkflowInvoker.Invoke method will be the Result type of our Activity (T).</p>

<pre class="code"><font size="2">[<span style="color: #2b91af">TestMethod</span>]
<span style="color: blue">public void </span>ExecuteConvertsTimeToTargetCity() {
    <span style="color: #2b91af">DateTime </span>currentLocalTime = <span style="color: #2b91af">DateTime</span>.Now;
    <span style="color: blue">string </span>cityName = <span style="color: #a31515">"London"</span>;

    <span style="color: #2b91af">TimeZoneInfo </span>timeZoneInfo =
        <span style="color: #2b91af">TimeZoneInfo</span>.GetSystemTimeZones().Where(
            timeZone =&gt; timeZone.DisplayName.ToUpperInvariant().Contains(cityName.ToUpperInvariant())).First();

    <span style="color: #2b91af">DateTime </span>result = <span style="color: #2b91af">WorkflowInvoker</span>.Invoke(<span style="color: blue">new </span><span style="color: #2b91af">GetCityTime</span>() {
                                                          City = cityName,
                                                          LocalTime = <span style="color: blue">new </span><span style="color: #2b91af">InArgument</span>&lt;<span style="color: #2b91af">DateTime</span>&gt;(currentLocalTime)
                                                      });
    <span style="color: #2b91af">Assert</span>.AreEqual(<span style="color: #2b91af">TimeZoneInfo</span>.ConvertTime(currentLocalTime, timeZoneInfo), result);
}
</font></pre>


<p> </p>

<div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:F60BB8FA-6F02-4999-8F5E-9DD4E92C4DA7:231146bc-bf73-4d5f-bd7e-83d8ef9f85c2" class="wlWriterEditableSmartContent"><div><a href="http://blog.petegoo.com/images/blog_petegoo_com/WindowsLiveWriter/UnitTestingWorkflow4Activities_1294C/UnitTestingActivities.zip" target="_self">UnitTestingActivities.zip</a></div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date>2010-08-16 01:22:42</wp:post_date>
		<wp:post_date_gmt>2010-08-15 12:22:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>unit-testing-workflow-4-activities-basics</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<category domain="category" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<category domain="post_tag" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="post_tag" nicename="wf"><![CDATA[WF]]></category>
		<category domain="category" nicename="wf4"><![CDATA[WF4]]></category>
		<category domain="post_tag" nicename="workflow"><![CDATA[Workflow]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>176</wp:comment_id>
			<wp:comment_author><![CDATA[Brian]]></wp:comment_author>
			<wp:comment_author_email>bbakkebo@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.beginnersoft.com</wp:comment_author_url>
			<wp:comment_author_IP>77.241.102.138</wp:comment_author_IP>
			<wp:comment_date>2011-02-02 22:53:12</wp:comment_date>
			<wp:comment_date_gmt>2011-02-02 09:53:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Pete, these were helpful for a workflow newbie.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1296640392.8627";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1296641638.5942";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Unit Testing Workflow 4 Activities : The TestContext Tracking Participant</title>
		<link>http://blog.petegoo.com/index.php/2010/08/16/unit-testing-workflow-4-activities-the-testcontext-tracking-participant/</link>
		<pubDate>Sun, 15 Aug 2010 12:48:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2010/08/16/unit-testing-workflow-4-activities-the-testcontext-tracking-participant.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I’m a big believer in using <a title="TestContext on MSDN" href="http://msdn.microsoft.com/en-us/library/ms404699(VS.80).aspx" target="_blank">TestContext</a> in MSTest or Console.WriteLine, Debug.WriteLine etc in your favourite Unit Testing framework to give context to passed or failed tests. Especially if you do <a title="Continuous Integration on Wikipedia" href="http://en.wikipedia.org/wiki/Continuous_integration" target="_blank">CI</a> and have only the test results to look at from the build server to try to understand why a build went wrong.</p>  <p>Taking this into account I use a TestContext Tracking Participant to get more visibility into my workflow unit tests. This enables me to see what tracking records have been raised against my invoked workflows. In only a few lines of code you can quickly enable extra logging.</p>  <pre class="code"><font size="2"><span style="color: blue">public class </span><span style="color: #2b91af">TestContextTrackingParticipant </span>: <span style="color: #2b91af">TrackingParticipant </span>{
    <span style="color: blue">private readonly </span><span style="color: #2b91af">TestContext </span>testContext;

    <span style="color: blue">public </span>TestContextTrackingParticipant(<span style="color: #2b91af">TestContext </span>testContext) {
        <span style="color: blue">this</span>.testContext = testContext;
    }

    <span style="color: blue">protected override void </span>Track(<span style="color: #2b91af">TrackingRecord </span>record, <span style="color: #2b91af">TimeSpan </span>timeout) {
        testContext.WriteLine(<span style="color: blue">string</span>.Format(<span style="color: #a31515">"- {0}"</span>, 
            record.ToString()
            .Replace(<span style="color: #a31515">"{"</span>, <span style="color: #a31515">"{{"</span>)
            .Replace(<span style="color: #a31515">"}"</span>, <span style="color: #a31515">"}}"</span>)));
    }
}
</font></pre>


<p> </p>

<p>The only issue is that our invoker code from the <a title="Unit Testing Basics" href="http://blog.petegoo.com/archive/2010/08/16/unit-testing-workflow-4-activities-basics.aspx" target="_blank">previous post</a> is a little more verbose.</p>

<pre class="code"><font size="2">[<span style="color: #2b91af">TestMethod</span>]
<span style="color: blue">public void </span>ExecuteConvertsTimeToTargetCity() {

    <span style="color: #2b91af">DateTime </span>currentLocalTime = <span style="color: #2b91af">DateTime</span>.Now;
    <span style="color: blue">string </span>cityName = <span style="color: #a31515">"London"</span>;

    <span style="color: #2b91af">TimeZoneInfo </span>timeZoneInfo =
        <span style="color: #2b91af">TimeZoneInfo</span>.GetSystemTimeZones().Where(
            timeZone =&gt; timeZone.DisplayName.ToUpperInvariant().Contains(cityName.ToUpperInvariant())).First();

    <span style="color: #2b91af">GetCityTime </span>activity = <span style="color: blue">new </span><span style="color: #2b91af">GetCityTime</span>() {
                                                    City = cityName,
                                                    LocalTime = <span style="color: blue">new </span><span style="color: #2b91af">InArgument</span>&lt;<span style="color: #2b91af">DateTime</span>&gt;(currentLocalTime)
                                                };
    <span style="color: #2b91af">WorkflowInvoker </span>invoker = <span style="color: blue">new </span><span style="color: #2b91af">WorkflowInvoker</span>(activity);

    invoker.Extensions.Add(<span style="color: blue">new </span><span style="color: #2b91af">TestContextTrackingParticipant</span>(TestContext));

    <span style="color: #2b91af">DateTime </span>result = (<span style="color: #2b91af">DateTime</span>)invoker.Invoke()[<span style="color: #a31515">"Result"</span>];

    <span style="color: #2b91af">Assert</span>.AreEqual(<span style="color: #2b91af">TimeZoneInfo</span>.ConvertTime(currentLocalTime, timeZoneInfo), result);
}</font></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date>2010-08-16 01:48:52</wp:post_date>
		<wp:post_date_gmt>2010-08-15 12:48:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>unit-testing-workflow-4-activities-the-testcontext-tracking-participant</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
		<category domain="category" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<category domain="post_tag" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="post_tag" nicename="wf"><![CDATA[WF]]></category>
		<category domain="category" nicename="wf4"><![CDATA[WF4]]></category>
		<category domain="post_tag" nicename="workflow"><![CDATA[Workflow]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Unit Test Workflow 4 Activities : Dependency Injection</title>
		<link>http://blog.petegoo.com/index.php/2010/08/16/unit-test-workflow-4-activities-dependency-injection/</link>
		<pubDate>Sun, 15 Aug 2010 14:04:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2010/08/16/unit-test-workflow-4-activities-dependency-injection.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>At first glance unit testing workflow activities with <a title="Martin Fowler on Dependency Injection" href="http://martinfowler.com/articles/injection.html" target="_blank">dependency injection</a> seems like a no-brainer. For example consider the following activity using constructor-based dependency injection.</p>  <pre class="code"><font size="2"><span style="color: blue">public class </span><span style="color: #2b91af">SendEmail </span>: <span style="color: #2b91af">CodeActivity </span>{
    <span style="color: blue">private readonly </span><span style="color: #2b91af">IEmailClient </span>emailClient;

    <span style="color: blue">public </span>SendEmail() : <span style="color: blue">this</span>(<span style="color: blue">new </span><span style="color: #2b91af">EmailClient</span>()) {}

    <span style="color: blue">public </span>SendEmail(<span style="color: #2b91af">IEmailClient </span>emailClient) {
        <span style="color: blue">this</span>.emailClient = emailClient;
    }

    <span style="color: blue">public </span><span style="color: #2b91af">InArgument</span>&lt;<span style="color: blue">string</span>&gt; To { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }

    <span style="color: blue">public </span><span style="color: #2b91af">InArgument</span>&lt;<span style="color: blue">string</span>&gt; From { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }

    <span style="color: blue">public </span><span style="color: #2b91af">InArgument</span>&lt;<span style="color: blue">string</span>&gt; Subject { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }

    <span style="color: blue">public </span><span style="color: #2b91af">InArgument</span>&lt;<span style="color: blue">string</span>&gt; Message { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }

    <span style="color: blue">protected override void </span>Execute(<span style="color: #2b91af">CodeActivityContext </span>context) {
        emailClient.SendEmail(
            To.Get(context),
            From.Get(context),
            Subject.Get(context),
            Message.Get(context)
            );
    }
}

<span style="color: blue">public interface </span><span style="color: #2b91af">IEmailClient </span>{
    <span style="color: blue">void </span>SendEmail(<span style="color: blue">string </span>to, <span style="color: blue">string </span>from, <span style="color: blue">string </span>subject, <span style="color: blue">string </span>message);
}

<span style="color: blue">public class </span><span style="color: #2b91af">EmailClient </span>: <span style="color: #2b91af">IEmailClient </span>{
    <span style="color: blue">public void </span>SendEmail(<span style="color: blue">string </span>to, <span style="color: blue">string </span>from, <span style="color: blue">string </span>subject, <span style="color: blue">string </span>message) {
        <span style="color: blue">throw new </span><span style="color: #00008b">NotImplementedException</span>();
    }
}
</font></pre>


<p> </p>

<p>I have an email client but I choose to write my tests so that I can replace the implementation of IEmailClient such that I can stub or mock the implementation out as below. This is absolutely necessary for unit testing as we cannot have our real implementation of the Email Client sending emails when we run our unit tests. Therefore we swap out with a stub implementation that simply logs the fact that we have called SendEmail.</p>

<pre class="code"><font size="2">[<span style="color: #2b91af">TestMethod</span>]
<span style="color: blue">public void </span>ExecuteCallsSendEmailOnClient() {
    <span style="color: #2b91af">StubEmailClient </span>stubEmailClient = <span style="color: blue">new </span><span style="color: #2b91af">StubEmailClient</span>();
    <span style="color: #2b91af">WorkflowInvoker</span>.Invoke(
        <span style="color: blue">new </span><span style="color: #2b91af">SendEmail</span>(
            stubEmailClient) {
                                       From = <span style="color: #a31515">"foo@foo.com"</span>,
                                       To = <span style="color: #a31515">"bar@bar.com"</span>,
                                       Subject = <span style="color: #a31515">"The Subject"</span>,
                                       Message = </font><font size="2"><span style="color: #a31515">"The Message"
                                   </span>});

    <span style="color: #2b91af">Assert</span>.AreEqual(1, stubEmailClient.SentEmails);
}

<span style="color: blue">private class </span><span style="color: #2b91af">StubEmailClient </span>: <span style="color: #2b91af">IEmailClient </span>{
    <span style="color: blue">private int </span>sentEmails;
    <span style="color: blue">public int </span>SentEmails {
        <span style="color: blue">get </span>{ <span style="color: blue">return </span>sentEmails; }
    }
    <span style="color: blue">public void </span>SendEmail(<span style="color: blue">string </span>to, <span style="color: blue">string </span>from, <span style="color: blue">string </span>subject, <span style="color: blue">string </span>message) {
        sentEmails++;
    }
}</font></pre>

<p> </p>

<p>So great! Now we have unit tested our activity and all is good with the world, no different from any other unit testing, right? But what if I have a workflow activity written in XAML that uses my SendEmail activity. </p>

<pre class="code"><font size="2"><span style="color: blue">&lt;</span><span style="color: #a31515">Activity </span><span style="color: red">mc:Ignorable</span><span style="color: blue">=</span>"<span style="color: blue">sap</span>"
          <span style="color: red">x:Class</span><span style="color: blue">=</span>"<span style="color: blue">PeteGoo.TimeService.Activities.SendMultipleEmails</span>"
          <span style="color: red">xmlns</span><span style="color: blue">=</span>"<span style="color: blue">http://schemas.microsoft.com/netfx/2009/xaml/activities</span>"
          <span style="color: red">xmlns:local</span><span style="color: blue">=</span>"<span style="color: blue">clr-namespace:PeteGoo.TimeService.Activities</span>"
          <span style="color: red">xmlns:mc</span><span style="color: blue">=</span>"<span style="color: blue">http://schemas.openxmlformats.org/markup-compatibility/2006</span>" 
          <span style="color: red">xmlns:mva</span><span style="color: blue">=</span>"<span style="color: blue">clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities</span>" 
          <span style="color: red">xmlns:sad</span><span style="color: blue">=</span>"<span style="color: blue">clr-namespace:System.Activities.Debugger;assembly=System.Activities</span>"
          <span style="color: red">xmlns:sap</span><span style="color: blue">=</span>"<span style="color: blue">http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation</span>" 
          <span style="color: red">xmlns:x</span><span style="color: blue">=</span>"<span style="color: blue">http://schemas.microsoft.com/winfx/2006/xaml</span>"</font><font size="2"><span style="color: blue">&gt;
  &lt;</span><span style="color: #a31515">x:</span><span style="color: red">Members</span></font><font size="2"><span style="color: blue">&gt;
    &lt;</span><span style="color: #a31515">x:</span><span style="color: red">Property Name</span><span style="color: blue">=</span>"<span style="color: blue">FromAddress</span>"
                <span style="color: red">Type</span><span style="color: blue">=</span>"<span style="color: blue">InArgument(x:String)</span>" </font><font size="2"><span style="color: blue">/&gt;
    &lt;</span><span style="color: #a31515">x:</span><span style="color: red">Property Name</span><span style="color: blue">=</span>"<span style="color: blue">Subject</span>"
                <span style="color: red">Type</span><span style="color: blue">=</span>"<span style="color: blue">InArgument(x:String)</span>" </font><font size="2"><span style="color: blue">/&gt;
    &lt;</span><span style="color: #a31515">x:</span><span style="color: red">Property Name</span><span style="color: blue">=</span>"<span style="color: blue">Message</span>"
                <span style="color: red">Type</span><span style="color: blue">=</span>"<span style="color: blue">InArgument(x:String)</span>" </font><font size="2"><span style="color: blue">/&gt;
    &lt;</span><span style="color: #a31515">x:</span><span style="color: red">Property Name</span><span style="color: blue">=</span>"<span style="color: blue">ToAddresses</span>"
                <span style="color: red">Type</span><span style="color: blue">=</span>"<span style="color: blue">InArgument(s:String[])</span>" </font><font size="2"><span style="color: blue">/&gt;
  &lt;/</span><span style="color: #a31515">x:</span><span style="color: red">Members</span></font><font size="2"><span style="color: blue">&gt;
  &lt;</span><span style="color: #a31515">ForEach </span><span style="color: red">x:TypeArguments</span><span style="color: blue">=</span>"<span style="color: blue">x:String</span>"
           <span style="color: red">DisplayName</span><span style="color: blue">=</span>"<span style="color: blue">ForEach</span><span style="color: red">&amp;lt;</span><span style="color: blue">String</span><span style="color: red">&amp;gt;</span>"
           <span style="color: red">sad:XamlDebuggerXmlReader.FileName</span><span style="color: blue">=</span>"<span style="color: blue">E:\Code\Blog\UnitTestingActivities\PeteGoo.TimeService.Activities\SendMultipleEmails.xaml</span>"
           <span style="color: red">sap:VirtualizedContainerService.HintSize</span><span style="color: blue">=</span>"<span style="color: blue">287,206</span>"
           <span style="color: red">Values</span><span style="color: blue">=</span>"<span style="color: blue">[ToAddresses]</span>"</font><font size="2"><span style="color: blue">&gt;
    &lt;</span><span style="color: #a31515">ActivityAction </span><span style="color: red">x:TypeArguments</span><span style="color: blue">=</span>"<span style="color: blue">x:String</span>"</font><font size="2"><span style="color: blue">&gt;
      &lt;</span><span style="color: #a31515">ActivityAction.</span><span style="color: red">Argument</span></font><font size="2"><span style="color: blue">&gt;
        &lt;</span><span style="color: #a31515">DelegateInArgument </span><span style="color: red">x:TypeArguments</span><span style="color: blue">=</span>"<span style="color: blue">x:String</span>"
                            <span style="color: red">Name</span><span style="color: blue">=</span>"<span style="color: blue">toAddress</span>" </font><font size="2"><span style="color: blue">/&gt;
      &lt;/</span><span style="color: #a31515">ActivityAction.</span><span style="color: red">Argument</span></font><font size="2"><span style="color: blue">&gt;
      &lt;</span><span style="color: #a31515">local:SendEmail </span><span style="color: red">From</span><span style="color: blue">=</span>"<span style="color: blue">[FromAddress]</span>"
                       <span style="color: red">sap:VirtualizedContainerService.HintSize</span><span style="color: blue">=</span>"<span style="color: blue">257,100</span>"
                       <span style="color: red">Message</span><span style="color: blue">=</span>"<span style="color: blue">[Message]</span>"
                       <span style="color: red">Subject</span><span style="color: blue">=</span>"<span style="color: blue">[Subject]</span>"
                       <span style="color: red">To</span><span style="color: blue">=</span>"<span style="color: blue">[toAddress]</span>" </font><font size="2"><span style="color: blue">/&gt;
    &lt;/</span><span style="color: #a31515">ActivityAction</span></font><font size="2"><span style="color: blue">&gt;
  &lt;/</span><span style="color: #a31515">ForEach</span></font><font size="2"><span style="color: blue">&gt;
&lt;/</span><span style="color: #a31515">Activity</span></font><span style="color: blue"><font size="2">&gt;
</font></span></pre>



<p>Now suppose I want to test my XAML activity, how can I use dependency injection? XAML is now in control of the construction, so I cannot use constructor based Dependency Injection. This is a big problem as we really want to use the composition model that WF4 provides us and the declarative programming model of XAML but that stops us from using familiar unit testing techniques. Yes, there are other types of dependency injection but maybe workflow extensions can be useful here.Workflow Extensions allow us to provide common services in a Service Locator pattern built into the execution context. Typically they are used for Tracking Participants and Persistence Participants which are recognised as they implement a well known contract, in this case however we are going to take advantage of the fact that workflow extensions can be any arbitrary type. Consider the following workflow extension and the associated Extension method.</p>

<pre class="code"><font size="2"><span style="color: blue">public class </span><span style="color: #2b91af">DependencyInjectionExtension </span>{

    <span style="color: blue">private readonly </span><span style="color: #2b91af">Dictionary</span>&lt;<span style="color: #2b91af">Type</span>, <span style="color: blue">object</span>&gt; dependencies = <span style="color: blue">new </span><span style="color: #2b91af">Dictionary</span>&lt;<span style="color: #2b91af">Type</span>, <span style="color: blue">object</span>&gt;();
    <span style="color: blue">public void </span>AddDependency&lt;T&gt;(T instance) {
        dependencies.Add(<span style="color: blue">typeof</span>(T), instance);
    }

    <span style="color: blue">public </span>T GetDependency&lt;T&gt;(<span style="color: #2b91af">Func</span>&lt;T&gt; defaultFunc) <span style="color: blue">where </span>T : <span style="color: blue">class </span>{
        <span style="color: blue">if </span>(dependencies.ContainsKey(<span style="color: blue">typeof</span>(T))) {
            <span style="color: blue">return </span>dependencies[<span style="color: blue">typeof </span>(T)] <span style="color: blue">as </span>T;
        }

        <span style="color: blue">return </span>defaultFunc();
    }
}

<span style="color: blue">public static class </span><span style="color: #2b91af">ActivityContextExtensions </span>{
    <span style="color: blue">public static </span>T GetDependency&lt;T&gt;(<span style="color: blue">this </span><span style="color: #2b91af">ActivityContext </span>context, <span style="color: #2b91af">Func</span>&lt;T&gt; defaultFunc) <span style="color: blue">where </span>T : <span style="color: blue">class </span>{
        <span style="color: #2b91af">DependencyInjectionExtension </span>extension = context.GetExtension&lt;<span style="color: #2b91af">DependencyInjectionExtension</span>&gt;();
        
        <span style="color: blue">return </span>extension == <span style="color: blue">null </span>? defaultFunc() : extension.GetDependency&lt;T&gt;(defaultFunc);
        
    }
}</font></pre>

<p> </p>

<p>Now we can use this extension and the extension method to change our Execute implementation to the following.</p>

<pre class="code"><font size="2"><span style="color: blue">protected override void </span>Execute(<span style="color: #2b91af">CodeActivityContext </span>context) {
    <span style="color: #2b91af">IEmailClient </span>client = context.GetDependency&lt;<span style="color: #2b91af">IEmailClient</span>&gt;(() =&gt; <span style="color: blue">new </span><span style="color: #2b91af">EmailClient</span>());

    client.SendEmail(
        To.Get(context),
        From.Get(context),
        Subject.Get(context),
        Message.Get(context)
        );
}</font></pre>

<p> </p>

<p>This shows that we will ask the GetDependency extension method for a certain service (IEmailClient) and if it has not been specified simply use a new EmailClient instance. The extension method in turn, checks whether the extension has been added and if so asks it for the dependency. If the extension is not present or it does not contain a dependency for our type then the supplied func is called which will return that EmailClient instance. And our test is as follows:</p>

<pre class="code"><font size="2">[<span style="color: #2b91af">TestMethod</span>]
<span style="color: blue">public void </span>ExecuteCallsSendEmailOnClient() {
    <span style="color: #2b91af">StubEmailClient </span>stubEmailClient = <span style="color: blue">new </span><span style="color: #2b91af">StubEmailClient</span>();

    <span style="color: #2b91af">WorkflowInvoker </span>invoker = <span style="color: blue">new </span><span style="color: #2b91af">WorkflowInvoker</span>(
        <span style="color: blue">new </span><span style="color: #2b91af">SendEmail </span>{
                                       From = <span style="color: #a31515">"foo@foo.com"</span>,
                                       To = <span style="color: #a31515">"bar@bar.com"</span>,
                                       Subject = <span style="color: #a31515">"The Subject"</span>,
                                       Message = </font><font size="2"><span style="color: #a31515">"The Message"
                                   
        </span>});

    <span style="color: #2b91af">DependencyInjectionExtension </span>dependencyInjectionExtension = <span style="color: blue">new </span><span style="color: #2b91af">DependencyInjectionExtension</span>();
    dependencyInjectionExtension.AddDependency&lt;<span style="color: #2b91af">IEmailClient</span>&gt;(stubEmailClient);

    invoker.Extensions.Add(dependencyInjectionExtension);

    invoker.Invoke();

    <span style="color: #2b91af">Assert</span>.AreEqual(1, stubEmailClient.SentEmails);
}</font></pre>


<p> </p>

<p>So now we have implemented a dependency injection pattern explicitly for workflow activities. We can now test composite XAML or code-based activities as well as ordinary code activities without requiring that we stay in control of the construction of our object instances.</p>
<div class="xdownload">
<div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:F60BB8FA-6F02-4999-8F5E-9DD4E92C4DA7:f0b4dfdc-efb7-45e7-b0fe-73569988a506" class="wlWriterEditableSmartContent"><div><a href="http://blog.petegoo.com/wp-content/uploads/2011/10/UnitTestingActivities.zip" target="_self">UnitTestingActivities.zip</a></div></div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date>2010-08-16 03:04:53</wp:post_date>
		<wp:post_date_gmt>2010-08-15 14:04:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>unit-test-workflow-4-activities-dependency-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
		<category domain="category" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<category domain="post_tag" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="post_tag" nicename="wf"><![CDATA[WF]]></category>
		<category domain="category" nicename="wf4"><![CDATA[WF4]]></category>
		<category domain="post_tag" nicename="workflow"><![CDATA[Workflow]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>235</wp:comment_id>
			<wp:comment_author><![CDATA[Andrew Heys]]></wp:comment_author>
			<wp:comment_author_email>andrew.heys.mobile@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>80.169.192.244</wp:comment_author_IP>
			<wp:comment_date>2011-09-30 22:26:46</wp:comment_date>
			<wp:comment_date_gmt>2011-09-30 09:26:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The link to UnitTestingActivities.zip appears to be broken:(]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1317374806.8111";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1317537054.0805";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>236</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>118.93.187.66</wp:comment_author_IP>
			<wp:comment_date>2011-10-02 19:39:14</wp:comment_date>
			<wp:comment_date_gmt>2011-10-02 06:39:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The link has now been fixed. Thanks for letting me know.

Pete]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>235</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1317537554.7709";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1654</wp:comment_id>
			<wp:comment_author><![CDATA[Dmytro Kudryavtsev]]></wp:comment_author>
			<wp:comment_author_email>dimaKudr@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>141.228.106.148</wp:comment_author_IP>
			<wp:comment_date>2012-06-12 01:56:53</wp:comment_date>
			<wp:comment_date_gmt>2012-06-11 12:56:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very handy approach! Thank you.
By the way. Don't you think that it will be better to have a reference to configured IoC container in DependencyInjectionExtension instead of managing Dictionary there?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1339419413.1869";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1339471735.2711";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1655</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>58.28.164.27</wp:comment_author_IP>
			<wp:comment_date>2012-06-13 09:26:46</wp:comment_date>
			<wp:comment_date_gmt>2012-06-12 20:26:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, it would be possible to use a dependency injection container but at the time I didn't want to enter the discussion of which one to use :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1339532806.1333";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1697</wp:comment_id>
			<wp:comment_author><![CDATA[Kool Architectural Resources and Sample Apps(mostly in .NET) | Insight&#039;s Delight]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://insightsdelight.wordpress.com/2011/10/12/kool-architectural-resources-and-sample-apps-in-net/</wp:comment_author_url>
			<wp:comment_author_IP>72.232.113.15</wp:comment_author_IP>
			<wp:comment_date>2013-09-15 07:43:07</wp:comment_date>
			<wp:comment_date_gmt>2013-09-14 18:43:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] vi) WF4 and Dependency Injection [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1379184187.4671891;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381616193.7825401;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Workflow 4: Human based workflows with an Email Approval Sample</title>
		<link>http://blog.petegoo.com/index.php/2010/08/22/workflow-4-email-approval-sample/</link>
		<pubDate>Sat, 21 Aug 2010 21:13:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2010/08/22/workflow-4-email-approval-sample.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[<p>One of the questions that a lot of people ask about workflow 4 is how to integrate manual tasks into the workflow process so that humans can be involved and interact with the workflow process. After all, what use is a stateful, long running service if no humans are involved? All of the activities that ship with workflow 4 and many of the samples provided only really cover programmatic activities but what about user interaction, I mean WF4 does not even ship with an email activity.</p>  <p>The purpose of this post is to introduce the concept of a manual task into a workflow process and show how correlation can be used to help route service calls back to the originating workflow instance. </p>  <h2>Scenario</h2>  <p>The problem we will try to solve is that we have a textual statement that needs to be sent to a number of people (approvers) who must approve or decline, indicating their acceptance of the statement. Once all the approvers have completed their tasks a report of the number of approvals is sent to the requestor. We are going to use emails to send the manual tasks to our approvers. The emails will have “Approve” and “Decline” links in them, clicking these links will update the status of the task in the workflow.</p>  <h2>The Workflow</h2>  <p>We start our workflow by creating a Workflow Service Library project and adding the parameters to our Receive activity to take the list of approver emails, the message which will be the statement that should be accepted or declined and the email of the requestor so that the report can be sent back to them. These parameters will be assigned to variables within our workflow.</p>  <p><a href="http://blog.petegoo.com/blog/images/blog_petegoo_com/blog/WindowsLiveWriter/98851c857a1e_11F48/ApprovalSampleInitialReceive_2.gif"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="ApprovalSampleInitialReceive" border="0" alt="ApprovalSampleInitialReceive" src="http://blog.petegoo.com/blog/images/blog_petegoo_com/blog/WindowsLiveWriter/98851c857a1e_11F48/ApprovalSampleInitialReceive_thumb.gif" width="525" height="545" /></a></p>  <p>Next we have to process each of the approval emails and handle the corresponding responses. The rest of the workflow is shown below.</p>  <p><a href="http://blog.petegoo.com/blog/images/blog_petegoo_com/blog/WindowsLiveWriter/98851c857a1e_11F48/ApprovalWorkflow2_2.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="ApprovalWorkflow2" border="0" alt="ApprovalWorkflow2" src="http://blog.petegoo.com/blog/images/blog_petegoo_com/blog/WindowsLiveWriter/98851c857a1e_11F48/ApprovalWorkflow2_thumb.png" width="837" height="1134" /></a></p>  <p>So lets walk through it. </p>  <p><strong>ParallelForEach&lt;string&gt;</strong></p>  <p>The first thing we need to consider is that we are going to process each of the approvals in parallel so that we are not dependent on the order of the responses. To do this we use a ParallelForEach&lt;T&gt; activity, this is essentially a parallel activity which will create a branch for each item in the source collection. The source collection in our case is the array of approver email addresses.</p>  <p><strong>Send Approval and Wait for Response</strong></p>  <p>This sequence will contain all our processing for a single approver branch. The most important things here which can’t be seen from the above image are the variables that belong to this sequence.</p>  <p>- approverId :This is a unique Guid initialised here to a new random guid. This will be used as a unique identifier for this approver.</p>  <p>- ApprovalCorrelationHandle: A correlation handle is a special type in workflow which holds information about how an incoming information can find our instance More on this later.</p>  <p><strong>Send Approver Email</strong></p>  <p>First we construct and send an email using a custom SendEmail activity included in the source. The implementation of this activity is not important, for our purposes all we care about is that it has four arguments, ToAddress, FromAddress, Subject and Body. The body contains an HTML message with Accept an Decline links to the web site we will create later.</p>  <pre class="code"><span style="color: #a31515">"&lt;html&gt;" </span>&amp; _
<span style="color: #a31515">"  &lt;body&gt;" </span>&amp; _
<span style="color: #a31515">"    &lt;p&gt;Please approve or decline the following statement:&lt;/p&gt;" </span>&amp; _
<span style="color: #a31515">"    &lt;h2&gt;" </span>&amp; messageToApprove &amp; <span style="color: #a31515">"&lt;/h2&gt;" </span>&amp; _
<span style="color: #a31515">"    &lt;a href=""http://localhost/TechEdNZ/Approval.Web/Approval/Approve/" </span>&amp; approverId.ToString() &amp; <span style="color: #a31515">"""&gt;Approve&lt;/a&gt;&lt;br/&gt;" </span>&amp; _
<span style="color: #a31515">"    &lt;a href=""http://localhost/TechEdNZ/Approval.Web/Approval/Decline/" </span>&amp; approverId.ToString() &amp; <span style="color: #a31515">"""&gt;Decline&lt;/a&gt;&lt;br/&gt;" </span>&amp; _
<span style="color: #a31515">"  &lt;/body&gt;" </span>&amp; _
<span style="color: #a31515">"&lt;/html&gt;"
</span></pre>

<p> </p>

<p>As you can see it contains a bunch of not so pretty VB string concatenation. Not ideal but fit for our purposes.</p>

<p><strong>InitializeCorrelation</strong></p>

<p>The initialize correlation activity is used to setup our CorrelationHandle we declared earlier, We simply set the name of a correlation key “approverId” to the value of our guid variable “approverId.ToString()”. This means that we now have a correlation handle which can be used later on our Receive activity to allow the runtime to find this specific instance when the Receive endpoint is called with a compatible correlation parameter.</p>

<p><strong>Pick</strong></p>

<p>A pick is a very useful activity which basically says, perform each of my branches’ “trigger” sections in parallel and when the first one of them completes, cancel the other branched and run the completed branches’ “action” section. This is especially useful if you want to setup a number of Receive activities, essentially presenting a choice, and continue the workflow when a choice is made. In our case these triggers will be our Accept and Decline Receive activities.</p>

<p><strong>Receive and SendReply</strong></p>

<p>The two receive activities are simply operations on the same endpoint named “Accept” and “Decline”, they both have a single parameter called approverId which correlates to our unique guid via our CorrelationHandle, for more on how to setup correlation, see my <a href="http://blog.petegoo.com/archive/2010/06/27/wf4-services-part-2-ndash-correlation.aspx" target="_blank">previous post on the subject</a>.</p>

<p><strong>Assign</strong></p>

<p>The assign simply increments an approval counter if the approver selected Approve</p>

<p><strong>Send Result Email</strong></p>

<p>The send result sends the approval count to the original requestor.</p>

<h2>The Web App</h2>

<p>Unfortunately, WF4 does not easily support REST as a communication mechanism for its Receive activities so we needed the links in our email to present a confirmation to the approver and at the same time call our workflow. This was most easily accomplished via an ASP.Net MVC2 web application with an ApprovalController as follows:</p>

<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">ApprovalController </span>: <span style="color: #2b91af">Controller </span>{

    <span style="color: blue">public </span><span style="color: #2b91af">ActionResult </span>Approve(<span style="color: blue">string </span>id) {
        ApprovalWorkflowService.<span style="color: #2b91af">ServiceClient </span>serviceClient = <span style="color: blue">new </span>ApprovalWorkflowService.<span style="color: #2b91af">ServiceClient</span>();
        serviceClient.Approve(id);
        <span style="color: blue">return </span>View();
    }

    <span style="color: blue">public </span><span style="color: #2b91af">ActionResult </span>Decline(<span style="color: blue">string </span>id) {
        ApprovalWorkflowService.<span style="color: #2b91af">ServiceClient </span>serviceClient = <span style="color: blue">new </span>ApprovalWorkflowService.<span style="color: #2b91af">ServiceClient</span>();
        serviceClient.Decline(id);
        <span style="color: blue">return </span>View();
    }

}</pre>

<pre class="code"><font face="Lucida Sans Unicode">The RouteMapping in ASP.Net MVC will automatically turn our email link into the above method call which in turn will call our workflow with the appropriate approverId.</font></pre>

<h2>The Client</h2>

<p>The client app here is just a console app with the following code:</p>

<pre class="code">ApprovalWorkflowService.<span style="color: #2b91af">ServiceClient </span>client = <span style="color: blue">new </span>ApprovalWorkflowService.<span style="color: #2b91af">ServiceClient</span>();
client.BeginApprovalProcess(<span style="color: blue">new</span>[] {
                                      <span style="color: #a31515">"approver1@foo.com"</span>, 
                                      <span style="color: #a31515">"approver2@foo.com"</span>, 
                                      <span style="color: #a31515">"approver3@foo.com"
                                  </span>}, 
                                  <span style="color: #a31515">"Holiday approval for Joe Bloggs from 2nd December to 12th January?"</span>, 
                                  <span style="color: #a31515">"joe.bloggs@foo.com"</span>);</pre>

<h2>Summary</h2>

<p>And that’s about it. Correlation comes to the rescue enabling us to send the 3 emails to the above addresses and, when they all click the links in their emails, the MVC app sends a message to our workflow definition. That message is routed to the correct workflow instance because the Receive activity told the runtime to wait for a call to “Accept” with one of 3 approver ids and to route that call to our instance. After they have all responded the workflow will continue past the ParallelForEach and the result is sent.</p>

<p>This application is fully compliant with pretty much any platform that has email and a browser and that’s as as simple as it gets.</p>

<h2>What Next</h2>

<p>This is just the beginning of how manual tasks can work in workflow. You could start to expand on this concept by mapping more data into your emails so that the approver is doing something more useful. Another option is to implement a threshold using a simple “If” so that e.g. 2 out of 3 approvers must approve and the workflow could subsequently decide whether to make a call to an HR service or something similar.</p>

<p>I hope you found this post helpful, code below.</p>

<div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:F60BB8FA-6F02-4999-8F5E-9DD4E92C4DA7:8ab5b3e8-a679-434b-8e69-28e274031ef4" class="wlWriterEditableSmartContent"><div><a href="https://github.com/PeteGoo/Workflow.EmailApprovalSample" target="_self">Get the code at github</a></div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>141</wp:post_id>
		<wp:post_date>2010-08-22 10:13:17</wp:post_date>
		<wp:post_date_gmt>2010-08-21 21:13:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>workflow-4-email-approval-sample</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<category domain="post_tag" nicename="task"><![CDATA[Task]]></category>
		<category domain="category" nicename="teched"><![CDATA[TechEd]]></category>
		<category domain="post_tag" nicename="wf"><![CDATA[WF]]></category>
		<category domain="category" nicename="wf4"><![CDATA[WF4]]></category>
		<category domain="post_tag" nicename="workflow"><![CDATA[Workflow]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>363</wp:comment_id>
			<wp:comment_author><![CDATA[Exploring Workflow Foundation 4 for Human based workflows - ekok]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://netindonesia.net/blogs/ekok/archive/2011/11/09/exploring-workflow-foundation-4-for-human-based-workflows.aspx</wp:comment_author_url>
			<wp:comment_author_IP>202.155.61.90</wp:comment_author_IP>
			<wp:comment_date>2011-11-09 20:40:59</wp:comment_date>
			<wp:comment_date_gmt>2011-11-09 07:40:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 4: Human based workflows with an Email Approval Sample http://blog.petegoo.com/index.php/2010/08/22/workflow-4-email-approval-sample/WF Scenarios Guidance: Human Workflow http://msdn.microsoft.com/en-us/library/cc709416.aspx Share [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1320962448.1911";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1691</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>58.28.164.27</wp:comment_author_IP>
			<wp:comment_date>2012-12-18 11:14:49</wp:comment_date>
			<wp:comment_date_gmt>2012-12-17 22:14:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You may need to install ASP.Net MVC to make sure that you have the bits necessary to load the project]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1688</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1355782489.1336";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1702</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>202.89.54.17</wp:comment_author_IP>
			<wp:comment_date>2013-10-16 09:04:42</wp:comment_date>
			<wp:comment_date_gmt>2013-10-15 20:04:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've updated the sample for the latest version of ASP.Net MVC (4) and re-tested it. The code is now on github (https://github.com/PeteGoo/Workflow.EmailApprovalSample) and as instructions for setting it up for your local environment, including the email server setup.

Let me know if you still have issues.

Thanks,
Pete]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1700</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381867482.342243;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1688</wp:comment_id>
			<wp:comment_author><![CDATA[Ahmet]]></wp:comment_author>
			<wp:comment_author_email>burdayimhocam@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>188.132.175.98</wp:comment_author_IP>
			<wp:comment_date>2012-12-18 04:31:34</wp:comment_date>
			<wp:comment_date_gmt>2012-12-17 15:31:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi
I couldnt open the solution of this project. I have an exception like this : "One or more projects in the solution were not loaded correctly. "]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1355758294.9228";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1355782350.8545";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1700</wp:comment_id>
			<wp:comment_author><![CDATA[Gokul]]></wp:comment_author>
			<wp:comment_author_email>gocool.k@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.110.120.98</wp:comment_author_IP>
			<wp:comment_date>2013-10-16 04:20:40</wp:comment_date>
			<wp:comment_date_gmt>2013-10-15 15:20:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the sample ! Works really great when I run it under IIS express. But if I want to setup the site to be running under IIS as a intranet facing web server, that I get multiple issues trying to run it:

1. This is what I see when anyone (including me on my physical box) tries to approve or reject.
[InvalidOperationException: Could not find default endpoint element that references contract 'ApprovalWorkflowService.IService' in the ServiceModel client configuration section. This might be because no configuration file was found for your application, or because no endpoint element matching this contract could be found in the client element.]

2. Also the service references added to Approval.Web and ApprovalClient dont add the service reference citing: difference in client and service bindings. 

Any clues? I can send you my .config files.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381850440.973207;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381867405.3853941;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Code and slides for Dev208 at Tech Ed NZ</title>
		<link>http://blog.petegoo.com/index.php/2010/08/31/code-and-slides-for-dev208-at-tech-ed-nz/</link>
		<pubDate>Tue, 31 Aug 2010 08:48:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2010/09/01/code-and-slides-for-dev208-at-tech-ed-nz.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[Here are the slides and demos for the Tech Ed NZ talk <a title="Stefan Sewell's Blog" href="http://web.me.com/stefsewell/TechEd2010/" target="_blank">Stef</a> and I did on Intro to Workflow 4. It includes the Approval Sample we didn’t manage to fit in.

P.S. I know this blog sucks in IE, working on a fix when I get some time.
<div id="scid:F60BB8FA-6F02-4999-8F5E-9DD4E92C4DA7:350719bf-bc00-4346-8ce5-19d74e21ed47" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div><a href="http://blog.petegoo.com/blog/images/blog_petegoo_com/blog/WindowsLiveWriter/Codeandslidesfor_894F/DEV208-GettingStartedWithWorkflow.pptx" target="_self">DEV208-GettingStartedWithWorkflow.pptx</a></div>
</div>
<div id="scid:F60BB8FA-6F02-4999-8F5E-9DD4E92C4DA7:daf04593-bce8-46b0-b802-a36da8c3c0f5" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div><a href="http://blog.petegoo.com/blog/images/blog_petegoo_com/blog/WindowsLiveWriter/Codeandslidesfor_894F/Intro.To.WF.Demos.zip" target="_self">Intro To WF Demos.zip</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date>2010-08-31 21:48:39</wp:post_date>
		<wp:post_date_gmt>2010-08-31 08:48:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>code-and-slides-for-dev208-at-tech-ed-nz</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="appfabric"><![CDATA[AppFabric]]></category>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="category" nicename="presentations"><![CDATA[Presentations]]></category>
		<category domain="category" nicename="teched"><![CDATA[TechEd]]></category>
		<category domain="category" nicename="tenz"><![CDATA[tenz]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wf"><![CDATA[WF]]></category>
		<category domain="category" nicename="wf4"><![CDATA[WF4]]></category>
		<category domain="post_tag" nicename="workflow"><![CDATA[Workflow]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Tech Ed NZ sessions now online</title>
		<link>http://blog.petegoo.com/index.php/2010/09/12/tech-ed-nz-sessions-now-online/</link>
		<pubDate>Sun, 12 Sep 2010 10:37:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2010/09/13/tech-ed-nz-sessions-now-online.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[You can now watch the Tech-Ed NZ talks <a href="http://web.me.com/stefsewell/TechEd2010/">Stef</a> and I did on Workflow and AppFabric on the <a href="http://www.msteched.com" target="_blank">msteched</a> website

<a href="http://www.msteched.com/2010/NewZealand/DEV208" target="_blank">Getting Started with Workflow in .NET 4</a>

<a href="http://www.msteched.com/2010/NewZealand/DEV306" target="_blank">Taming SOA Deployments using Windows Server AppFabric</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>143</wp:post_id>
		<wp:post_date>2010-09-12 23:37:14</wp:post_date>
		<wp:post_date_gmt>2010-09-12 10:37:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tech-ed-nz-sessions-now-online</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="appfabric"><![CDATA[AppFabric]]></category>
		<category domain="category" nicename="presentations"><![CDATA[Presentations]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wf"><![CDATA[WF]]></category>
		<category domain="post_tag" nicename="workflow"><![CDATA[Workflow]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Speaking at North Shore .Net Users Group</title>
		<link>http://blog.petegoo.com/index.php/2010/11/08/speaking-at-north-shore-net-users-group/</link>
		<pubDate>Mon, 08 Nov 2010 08:09:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2010/11/09/speaking-at-north-shore-net-users-group.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[I’ll be speaking at the North Shore .Net users group on 18th November details below.
<blockquote><strong>Workflow Services</strong>

This talk will focus on the what, why and how of workflow services. We will discuss the runtime architecture of workflows, persistence, tracking, on-premise hosting in IIS and Windows Server AppFabric and how you can leverage these out-of-the-box features to build scalable, reliable services which support long-running human-based processes with ease.
<strong>About the Speaker</strong>
Pete is a lead developer based in Auckland working for ADERANT, a leading ISV in the legal and professional services market. Over the last 18 months Pete has been working with .NET 4 and AppFabric as part of the Microsoft Technology Adoption Program (TAP). This work has migrated the ADERANT Expert Golden Gate product from .NET 3 to .NET 4 and includes the adoption of Workflow 4 and AppFabric. Pete has been working with Microsoft .Net since version 1.0, mainly in the UK financial industry before moving to New Zealand and joining ADERANT 4 years ago, taking particular interest in Workflow, WCF, DSL Tools and Software Factories.

Date: Thursday 18th November 2010
Gather for food and drinks at 5:45pm,
Presentation starting at 6:15pm
Door Charge: Free!
Venue: Quadrangle B;
Seminar Room 3(QB3), Massey University, Albany
<a href="http://nsug-dotnet.groups.live.com/">http://nsug-dotnet.groups.live.com/</a></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>144</wp:post_id>
		<wp:post_date>2010-11-08 21:09:54</wp:post_date>
		<wp:post_date_gmt>2010-11-08 08:09:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>speaking-at-north-shore-net-users-group</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="presentations"><![CDATA[Presentations]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wf"><![CDATA[WF]]></category>
		<category domain="post_tag" nicename="workflow"><![CDATA[Workflow]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Slides and Code for Practical Workflow Services</title>
		<link>http://blog.petegoo.com/index.php/2010/11/18/slides-and-code-for-practical-workflow-services/</link>
		<pubDate>Thu, 18 Nov 2010 06:46:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/blog/archive/2010/11/19/slides-and-code-for-practical-workflow-services.aspx</guid>
		<description></description>
		<content:encoded><![CDATA[I’ve attached the slides and code for the Practical Workflow Services talk I gave last night to the North Shore .Net Users Group.

Thanks to all those that came along. Its great to see so many people interested in WF4.
<div id="scid:F60BB8FA-6F02-4999-8F5E-9DD4E92C4DA7:8a4604b3-3406-44e9-a48f-21667e53239e" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div><a href="http://blog.petegoo.com/blog/images/blog_petegoo_com/blog/Windows-Live-Writer/Slides-and-Code-for-Practical-Workflow-S_7ACD/Practical.Workflow.Services.pptx" target="_blank">Practical Workflow Services.pptx</a></div>
</div>
<div id="scid:F60BB8FA-6F02-4999-8F5E-9DD4E92C4DA7:8ba37f91-8109-46e3-bb13-e75e24e53273" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div><a href="http://blog.petegoo.com/blog/images/blog_petegoo_com/blog/Windows-Live-Writer/Slides-and-Code-for-Practical-Workflow-S_7ACD/Practical.Workflow.Services.Code.zip" target="_blank">Practical Workflow Services Code.zip</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>145</wp:post_id>
		<wp:post_date>2010-11-18 19:46:02</wp:post_date>
		<wp:post_date_gmt>2010-11-18 06:46:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>slides-and-code-for-practical-workflow-services</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="presentations"><![CDATA[Presentations]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wf"><![CDATA[WF]]></category>
		<category domain="post_tag" nicename="workflow"><![CDATA[Workflow]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Moved blog to Wordpress</title>
		<link>http://blog.petegoo.com/index.php/2010/12/17/moved-blog-to-wordpress/</link>
		<pubDate>Fri, 17 Dec 2010 00:01:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://petegoo.com/wordpress/?p=200</guid>
		<description></description>
		<content:encoded><![CDATA[
                I've decided. to move my blog implementation to wordpress. Subtext just doesn't seem as mature anymore plus my host now provides mysql, sweet!

Posted from WordPress for Windows Phone
              ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>200</wp:post_id>
		<wp:post_date>2010-12-17 13:01:40</wp:post_date>
		<wp:post_date_gmt>2010-12-17 00:01:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>moved-blog-to-wordpress</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="blog"><![CDATA[blog]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
				<title>Workflow Designer attributes, IRegisterMetadata and derived properties</title>
		<link>http://blog.petegoo.com/index.php/2011/01/07/workflow-designer-attributes-iregistermetadata-and-derived-properties/</link>
		<pubDate>Fri, 07 Jan 2011 01:24:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/index.php/2011/01/07/workflow-designer-attributes-iregistermetadata-and-derived-properties/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>If you are using the IRegisterMetadata type combined with the *.Design.dll deployment method for your custom WF4 activities, you need to be careful if you have an activity derived from a base activity.</p>  <p>For example if you have code like the following:</p>  <pre class="csharpcode">            builder.AddCustomAttributes(
                <span class="kwrd">typeof</span>(MyBaseActivity&lt;&gt;),
                <span class="str">&quot;MyProperty&quot;</span>,
                <span class="kwrd">new</span> EditorAttribute(<span class="kwrd">typeof</span>(MyPropertyValueEditor), <span class="kwrd">typeof</span>(PropertyValueEditor)));</pre>
<style type="text/css">


.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>Then you need to be aware that on the standard properties you can declare your EditorAttribute against the base class but for Argument property types you will need to declare them on the derived class. So the above example would work if MyProperty was a string for example, but if it was an InArgument&lt;string&gt; then you would need to register custom attributes against the derived class and for each derived class.</p>

<p>I suspect the WF designer is automagically adding custom attributes for the Argument properties (to enable the Expression Text Box in the properties grid) against the derived classes and are hence overriding our base registrations.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>205</wp:post_id>
		<wp:post_date>2011-01-07 14:24:48</wp:post_date>
		<wp:post_date_gmt>2011-01-07 01:24:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>workflow-designer-attributes-iregistermetadata-and-derived-properties</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
				<title>Getting Entity Framework and MySQL to play nice on my Hosting Provider</title>
		<link>http://blog.petegoo.com/index.php/2011/01/23/getting-entity-framework-and-mysql-to-play-nice-on-my/</link>
		<pubDate>Sun, 23 Jan 2011 04:00:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/index.php/2011/01/23/getting-entity-framework-and-mysql-to-play-nice-on-my/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>After moving my blog to wordpress, I decided to update the recent posts section on my main site to point to the wordpress repository instead of the old SubText one. SubText was using MSSQL but Wordpress is using MySQL so I had to get things strung together again.</p>  <p>For the original code talking to the SubText repository I had created an EDMX and simply queried against it using LINQ to extract the top 5 most recent blog posts and display them on my sites main page. </p>  <p>The first thing I figured I would have to do is to find a connector for MySQL to allow the Entity Framework to talk to MySQL. A <a href="http://www.google.co.nz/search?sourceid=chrome&amp;ie=UTF-8&amp;q=entity+framework+mySql" target="_blank">quick google</a> supplied me with the location to go pick that provider up <a href="http://www.mysql.com/downloads/connector/net" target="_blank">directly from the guys at MySQL</a>.Once that was installed I had to restart VS2010 and go through the process of adding a new EDMX model for the WordPress repository. Once that was done I had to change some of the nonsensical casing and naming in the Entity list, the model namespace and entities class.</p>  <p>I added a quick WCF Data Service and used <a href="http://www.linqpad.net/" target="_blank">LinqPad</a> to prove that everything was working. I then updated the query in my home page to talk to the new entities source. So far, so good. Time to upload to my hosting provider and job done.</p>  <p>Now this is where things got a little pear shaped. Firstly I received the following error.</p>  <blockquote>   <p>Unable to find the requested .Net Framework Data Provider. It may not be installed.</p> </blockquote>  <p>OK I figured, I looked at my local project and I had no references to anything MySql, therefore I added the references and set them to copy local, then re-deployed. Same thing.</p>  <p>Next I did a bit more googling.&#160; At this point I should make it clear that I’m using WinHost as my hosting provider, they are really good, they seem to be pretty responsive on their forums and I can mostly find the answers I need (without ever having to ask them directly) when it comes to getting some relatively new tech working on their kit. Therefore I came across <a href="http://forum.winhost.com/showthread.php?t=7740" target="_blank">this forum post</a> which pointed me to the fact that I had to add this config section in my web.config (remember to change the assembly version to whichever you have downloaded from MySQL).</p>  <blockquote>&lt;configuration&gt;<br />&#160; &lt;system.data&gt;<br />&#160;&#160;&#160; &lt;DbProviderFactories&gt;<br />&#160;&#160;&#160;&#160;&#160; &lt;add name=&quot;MySQL Data Provider&quot;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; invariant=&quot;MySql.Data.MySqlClient&quot;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; description=&quot;.Net Framework Data Provider for MySQL&quot;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; type=&quot;MySql.Data.MySqlClient.MySqlClientFactory, MySql.Data, Version=6.3.6.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d&quot; /&gt;<br />&#160;&#160;&#160; &lt;/DbProviderFactories&gt;<br />&#160; &lt;/system.data&gt;</blockquote>  <p>Righto, now publish my changes and away we go….almost.</p>  <p>This time I had something like the following error.</p>  <blockquote>   <p>System.Security.SecurityException: Security error.</p> </blockquote>  <p>The details mentioned that something was making a request to perform an action that wasn’t allowed under <strong>medium trust</strong>. A bit more googling and I found this <a href="http://support.winhost.com/KB/a657/changing-the-default-aspnet-trust-level.aspx" target="_blank">winhost kb article</a> on enabling full-trust. What nice people!</p>  <p>After correcting a few problems with my web.release.config and relocating the MySql password I was up and running.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date>2011-01-23 17:00:37</wp:post_date>
		<wp:post_date_gmt>2011-01-23 04:00:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-entity-framework-and-mysql-to-play-nice-on-my</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="asp-net"><![CDATA[ASP.Net]]></category>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="category" nicename="entity-framework"><![CDATA[Entity Framework]]></category>
		<category domain="category" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
	</item>
	<item>
				<title>Speaking at Tech-Ed NZ 2011 tomorrow</title>
		<link>http://blog.petegoo.com/index.php/2011/08/24/speaking-at-tech-ed-nz-2011-tomorrow/</link>
		<pubDate>Wed, 24 Aug 2011 02:29:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/index.php/2011/08/24/speaking-at-tech-ed-nz-2011-tomorrow/</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://web.me.com/stefsewell/TechEd2010/">Stef</a> and I are presenting the 5:45 slot tomorrow in the Marlborough room at <a href="http://newzealand.msteched.com/default.aspx" target="_blank">Tech Ed NZ</a>. The subject of the talk is <a href="http://newzealand.msteched.com/topic/details/DEV404#showdetails" target="_blank">Hardcore Workflow</a> , basically a list of hurdles we had to overcome to implement enterprise workflow.</p>  <p>I’ll post the slides and code in the next few days.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>212</wp:post_id>
		<wp:post_date>2011-08-24 15:29:40</wp:post_date>
		<wp:post_date_gmt>2011-08-24 02:29:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>speaking-at-tech-ed-nz-2011-tomorrow</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="presentations"><![CDATA[Presentations]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="category" nicename="tenz"><![CDATA[tenz]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="post_tag" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="category" nicename="wf4"><![CDATA[WF4]]></category>
		<category domain="post_tag" nicename="wf4"><![CDATA[WF4]]></category>
		<category domain="post_tag" nicename="workflow"><![CDATA[Workflow]]></category>
	</item>
	<item>
				<title>Code and slides for TechEd NZ 2011&#8211;DEV 404 Hardcore Workflow</title>
		<link>http://blog.petegoo.com/index.php/2011/08/29/code-and-slides-for-teched-nz-2011dev-404-hardcore-workflow/</link>
		<pubDate>Sun, 28 Aug 2011 23:33:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/index.php/2011/08/29/code-and-slides-for-teched-nz-2011dev-404-hardcore-workflow/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Below are the slides and the code for the talk <a href="http://web.me.com/stefsewell/TechEd2010/">Stef</a> and I did at Teched NZ 2011. I hope to do a post in the future explaining this in more detail.</p>  <p>   <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:F60BB8FA-6F02-4999-8F5E-9DD4E92C4DA7:874a3ff9-7a01-4353-ae76-1e2997edff08" class="wlWriterEditableSmartContent"><div><a href="http://blog.petegoo.com/wp-content/uploads/2011/08/EnterpriseWorkflowDemo.zip" target="_self">EnterpriseWorkflowDemo.zip</a></div></div> </p>  <p>   <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:F60BB8FA-6F02-4999-8F5E-9DD4E92C4DA7:ef9750f4-fd93-4c7c-b2e7-89e615433ea6" class="wlWriterEditableSmartContent"><div><a href="http://blog.petegoo.com/wp-content/uploads/2011/08/DEV404-HardCoreWorkflow4.pptx" target="_self">DEV404-HardCoreWorkflow4.pptx</a></div></div></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>216</wp:post_id>
		<wp:post_date>2011-08-29 12:33:13</wp:post_date>
		<wp:post_date_gmt>2011-08-28 23:33:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>code-and-slides-for-teched-nz-2011dev-404-hardcore-workflow</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[C#]]></category>
		<category domain="category" nicename="presentations"><![CDATA[Presentations]]></category>
		<category domain="category" nicename="teched"><![CDATA[TechEd]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wf"><![CDATA[WF]]></category>
		<category domain="category" nicename="wf4"><![CDATA[WF4]]></category>
		<category domain="post_tag" nicename="wf4"><![CDATA[WF4]]></category>
	</item>
	<item>
				<title>Building an Enterprise Workflow system with WF4</title>
		<link>http://blog.petegoo.com/index.php/2011/09/02/building-an-enterprise-workflow-system-with-wf4/</link>
		<pubDate>Fri, 02 Sep 2011 09:24:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/index.php/2011/09/02/building-an-enterprise-workflow-system-with-wf4/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Recently <a title="Stefan Sewell" href="http://web.me.com/stefsewell/TechEd2010/" target="_blank">Stef</a> and I presented the session “Hardcore Workflow” at Tech-Ed New Zealand in which I gave a demo of how to create your own enterprise workflow system in WF4. I had been deliberating for a while on whether I should reveal a lot of the techniques we used but I came to the conclusion that they are all just standard features in WF4 and they don’t seem to be well documented anywhere. Therefore I thought it was important to document just how easy it can be to get started creating your own enterprise workflow solution.</p>  <h3>WF4?</h3>  <p>If you are new to WF4, it is Workflow Foundation 4 supplied by Microsoft free as part of the .Net Framework. I am going to presume that you have some knowledge of WF4 and have tried to create a workflow service.</p>  <h3>Enterprise Workflow?</h3>  <p>To me the term “Enterprise Workflow” represents a system which has the goals of allowing end users (or at least power users) to be able to design and create their own business processes using declarative authoring tools that coordinate people and integrate with their business systems and to have those processes hosted in a reliable, scalable way. </p>  <p>There are companies that exclusively make complex software solutions to perform this task, what I want to show you is that WF4 gives you the keys to create your own solution but by no means will I be able to show you how to solve all the problems in this space.</p>  <p>Taking this into account I believe the system we are going to build should have the following characteristics:</p>  <ul>   <li>Simple visual authoring experience </li>    <li>Concerns like Persistence, Tracking, Scalability, Correlation, Service Hosting etc should come for free, authors should not have to think about it </li>    <li>Activities should be supplied to enable integration with business systems and human participants. </li> </ul>  <h3>The Series</h3>  <p>So I’m going to break this demo down into a series of posts. These will probably look like the following, I’ll fill in the links as I write the posts.</p>  <ul>   <li><a href="http://blog.petegoo.com/index.php/2011/09/03/activities-vs-wf-services-in-search-of-the-ideal-authoring-experience/" target="_blank">Activities vs WF Services: In search of the ideal authoring experience</a> </li>    <li><a href="http://blog.petegoo.com/index.php/2011/09/07/hosting-an-activity-as-a-service-using-the-workflowservicehostfactory/" target="_blank">Hosting an Activity as a Service using the WorkflowServiceHostFactory</a> </li>    <li><a title="Starting WF Instances using the Creation Endpoint" href="http://blog.petegoo.com/index.php/2011/09/19/starting-wf-instances-using-the-creation-endpoint/" target="_blank">Starting WF Instances using the Creation Endpoint</a> </li>    <li><a href="http://blog.petegoo.com/index.php/2011/09/23/responding-to-wf-completion-using-the-creation-context/" target="_blank">Responding to WF completion using the Creation Context</a> </li> </ul>  <ul></ul>  <div class="xdownload">   <div style="padding-bottom: 0px; border-right-width: 1px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; padding-top: 0px" id="scid:fb3a1972-4489-4e52-abe7-25a00bb07fdf:7112bb3d-3a91-4f1e-b688-368c61bf308d" class="wlWriterSmartContent">     <p>Download the Code <a href="http://blog.petegoo.com/wp-content/uploads/2011/09/EnterpriseWorkflowDemo1.zip" target="_blank">EnterpriseWorkflowDemo.zip</a></p>   </div> </div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date>2011-09-02 22:24:58</wp:post_date>
		<wp:post_date_gmt>2011-09-02 09:24:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>building-an-enterprise-workflow-system-with-wf4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="post_tag" nicename="wf"><![CDATA[WF]]></category>
		<category domain="category" nicename="wf4"><![CDATA[WF4]]></category>
		<category domain="post_tag" nicename="wf4"><![CDATA[WF4]]></category>
		<category domain="post_tag" nicename="workflow"><![CDATA[Workflow]]></category>
		<wp:comment>
			<wp:comment_id>211</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo &raquo; Activities vs WF Services: In search of the ideal authoring experience]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.petegoo.com/index.php/2011/09/03/activities-vs-wf-services-in-search-of-the-ideal-authoring-experience/</wp:comment_author_url>
			<wp:comment_author_IP>96.31.35.44</wp:comment_author_IP>
			<wp:comment_date>2011-09-03 17:55:49</wp:comment_date>
			<wp:comment_date_gmt>2011-09-03 04:55:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This is the first post in a series about Building an Enterprise Workflow system with WF4. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1315031457.9974";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1315025749.3653";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>223</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo » Starting WF Instances using the Creation Endpoint]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.petegoo.com/index.php/2011/09/19/starting-wf-instances-using-the-creation-endpoint/</wp:comment_author_url>
			<wp:comment_author_IP>96.31.35.44</wp:comment_author_IP>
			<wp:comment_date>2011-09-19 23:57:05</wp:comment_date>
			<wp:comment_date_gmt>2011-09-19 10:57:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] post is the third in a series on building an Enterprise Workflow System using WF4. Previously we discussed how to get the activity authoring experience for workflow service authors [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1316429825.0419";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>227</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo &raquo; Responding to WF completion using the Creation Context]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.petegoo.com/index.php/2011/09/23/responding-to-wf-completion-using-the-creation-context/</wp:comment_author_url>
			<wp:comment_author_IP>96.31.35.44</wp:comment_author_IP>
			<wp:comment_date>2011-09-23 00:59:10</wp:comment_date>
			<wp:comment_date_gmt>2011-09-22 11:59:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] is the fourth post in a series on building an Enterprise Workflow system using WF4. Previously we looked at the WorkflowServiceHostFactory, the WorkflowCreationEndpoint and how we [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1316692750.3983";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1316693332.4714";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>224</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo » Hosting an Activity as a Service using the WorkflowServiceHostFactory]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.petegoo.com/index.php/2011/09/07/hosting-an-activity-as-a-service-using-the-workflowservicehostfactory/</wp:comment_author_url>
			<wp:comment_author_IP>96.31.35.44</wp:comment_author_IP>
			<wp:comment_date>2011-09-19 23:59:01</wp:comment_date>
			<wp:comment_date_gmt>2011-09-19 10:59:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This is the second post in a series about Building an Enterprise Workflow system with WF4. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1316429941.744";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>433</wp:comment_id>
			<wp:comment_author><![CDATA[(WF4 &#8211; Link) For your reading pleasure – PeteGoo | MSDN Blogs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://msdnrss.thecoderblogs.com/2012/01/wf4-link-for-your-reading-pleasure-%e2%80%93-petegoo/</wp:comment_author_url>
			<wp:comment_author_IP>65.254.224.36</wp:comment_author_IP>
			<wp:comment_date>2012-01-20 15:57:29</wp:comment_date>
			<wp:comment_date_gmt>2012-01-20 02:57:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://blog.petegoo.com/index.php/2011/09/02/building-an-enterprise-workflow-system-with-wf4/ (post # 1 series of 4 posts) [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327600095.2161";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>443</wp:comment_id>
			<wp:comment_author><![CDATA[Steve C]]></wp:comment_author>
			<wp:comment_author_email>scookstlmo@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>192.131.153.211</wp:comment_author_IP>
			<wp:comment_date>2012-02-28 11:26:05</wp:comment_date>
			<wp:comment_date_gmt>2012-02-27 22:26:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It would be great to see this demo but the following project will not load:

The EnterpriseWorkflowDemo1\EnterpriseWorkflow\MagicEightBall.Web\MagicEightBall.Web.csproj cannot be opened.   The project type is not supported by this installation.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1330381565.9547";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1330381995.0062";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>444</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>58.28.164.27</wp:comment_author_IP>
			<wp:comment_date>2012-02-28 11:35:07</wp:comment_date>
			<wp:comment_date_gmt>2012-02-27 22:35:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Make sure you have ASP.Net MVC 3 installed (I'm pretty sure I used 3 and not 2).

<a href="http://www.asp.net/mvc" title="ASP.Net MVC" rel="nofollow">http://www.asp.net/mvc</a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>443</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1330382107.9228";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1696</wp:comment_id>
			<wp:comment_author><![CDATA[Kool Architectural Resources and Sample Apps(mostly in .NET) | Insight&#039;s Delight]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://insightsdelight.wordpress.com/2011/10/12/kool-architectural-resources-and-sample-apps-in-net/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.69.75</wp:comment_author_IP>
			<wp:comment_date>2013-08-30 10:15:27</wp:comment_date>
			<wp:comment_date_gmt>2013-08-29 21:15:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] v) Building an Enterprise Workflow System using WF4 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1377810927.632581;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1377810995.938684;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Activities vs WF Services: In search of the ideal authoring experience</title>
		<link>http://blog.petegoo.com/index.php/2011/09/03/activities-vs-wf-services-in-search-of-the-ideal-authoring-experience/</link>
		<pubDate>Sat, 03 Sep 2011 04:55:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/index.php/2011/09/03/activities-vs-wf-services-in-search-of-the-ideal-authoring-experience/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is the first post in a series about <a title="Building an Enterprise Workflow system with WF4" href="http://blog.petegoo.com/index.php/2011/09/02/building-an-enterprise-workflow-system-with-wf4/" target="_blank">Building an Enterprise Workflow system with WF4</a>.     <br /></p>  <h3></h3>  <h3>Hosting our Workflows</h3>  <p>   <br />When we were building our enterprise workflow solution at our company, it was during the development of .Net 4 and we were heavily involved in the Microsoft TAP (early adopters) program. We looked at all the features for WF4 and realised (along with advice from the workflow team) that the best hosting story was using the <a title="WorkflowServiceHost on MSDN" href="http://msdn.microsoft.com/en-us/library/system.servicemodel.workflowservicehost.aspx" target="_blank">WorkflowServiceHost</a> (WSH) in IIS as opposed to a roll-your-own host approach with WorkflowApplication etc. There are many reasons for this but the primary one is <a title="Windows Server AppFabric" href="http://msdn.microsoft.com/en-us/windowsserver/ee695849" target="_blank">AppFabric</a> and the services it provides on top of the WF runtime. Here is a list of some of the benefits those features provide.</p>  <ul>   <li>IIS management console UI for tracking instances and controlling them (Suspend, Terminate, Cancel) </li>    <li>Management of tracking level for workflow and WCF services via the tracking level slider bar </li>    <li>The <a title="Workflow Management Service" href="http://msdn.microsoft.com/en-us/library/ff383397.aspx" target="_blank">WorkflowManagementService</a> that comes with IIS would wake up our instances when they have an expired timer (delay). This was a big plus as we wouldn’t have to write another service to monitor timer expirations. </li>    <li><a title="AppFabric powershell" href="http://msdn.microsoft.com/en-us/library/ee677219.aspx" target="_blank">Powershell management API</a>. </li>    <li>IIS horizontal scalability and lock configuration through web farm management, along with consolidated tracking logging. </li> </ul>  <p>Having decided that the WSH was the key to getting what we wanted hosting-wise, we started looking at the built in service templates and the samples that we were given. The store then was pretty much the same as it is today, you create a new project using the project template “WCF Workflow Service Application”.</p>  <p><a href="http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture1.jpg"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="WCF Workflow Service Application in the New Project dialog" border="0" alt="WCF Workflow Service Application in the New Project dialog" src="http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture1_thumb.jpg" width="504" height="188" /></a></p>  <p>Having done that, we are presented with a project structure that has a <strong>Service1.xamlx</strong> file and a <strong>web.config</strong> file.</p>  <p><a href="http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture3.jpg"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="The WCF Workflow Service Application project structure" border="0" alt="The WCF Workflow Service Application project structure" src="http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture3_thumb.jpg" width="244" height="121" /></a></p>  <p>The Service1.xamlx file is our workflow which is quite similar to a workflow activity but it has some major differences.</p>  <p><a href="http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture4.jpg"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="The out of the box Workflow Service Application" border="0" alt="The out of the box Workflow Service Application" src="http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture4_thumb.jpg" width="304" height="428" /></a></p>  <p>There are no arguments to define, in fact the arguments option usually present in activity authoring is not present in our workflow service. Instead we get 2 activities already on our surface, a <a href="http://msdn.microsoft.com/en-us/library/system.workflow.activities.receiveactivity.aspx" target="_blank">Receive</a> and a <a href="http://msdn.microsoft.com/en-us/library/system.servicemodel.activities.sendreply.aspx" target="_blank">SendReply</a>. </p>  <p>So what are these things? </p>  <p>Well, these are the 2 main activities used to expose a WCF service from WF4. There is also the combination of <a title="SendActivity on MSDN" href="http://msdn.microsoft.com/en-us/library/system.workflow.activities.sendactivity.aspx" target="_blank">Send</a> and <a title="ReceiveReply activity on MSDN" href="http://msdn.microsoft.com/en-us/library/system.servicemodel.activities.receivereply.aspx" target="_blank">ReceiveReply</a> which is used to consume a WCF service in WF4. On the Content (View Message) section you add message parameters or a message type and map them to variables in your workflow, this forms the parameters on your WCF operation contract.     <br /></p>  <h3></h3>  <h3></h3>  <h3>Introducing the Magic Eight Ball </h3>  <p>   <br />The sample for this blog post series will be that we are a website offering a magic eight ball service, users can ask a question, choose an eight ball to ask and we will send them back a response. </p>  <p>We want ordinary users of our website to be able to create their own magic eight ball implementations that we will host for them. We will provide them activities to help them do this but they are not coders and they shouldn’t have to understand WCF/WF/C# etc. </p>  <p>For example, below is a workflow service I have written which is a Magic Eight Ball service, you give it a question and your email address and it will email you a response.</p>  <p><a href="http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture5.jpg"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="The Magic Eight Ball as a standard workflow service" border="0" alt="The Magic Eight Ball as a standard workflow service" src="http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture5_thumb.jpg" width="229" height="484" /></a></p>  <p>The message parameters on the ReceiveRequest activity are defined as follows:</p>  <p><a href="http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture6.jpg"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="The Magic Eight Ball Receive activity" border="0" alt="The Magic Eight Ball Receive activity" src="http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture6_thumb.jpg" width="504" height="174" /></a></p>  <p>As you may be able to tell, this is simply defining a WCF Service contract.</p>  <p>Remember from our <a href="http://blog.petegoo.com/index.php/2011/09/02/building-an-enterprise-workflow-system-with-wf4/" target="_blank">requirements</a>, the sample that we are going to create in this blog series will be an enterprise workflow system where a business user could create their own workflows using a simple authoring experience. </p>  <p>Already this workflow code example I have above is starting to seem a little complicated for an ordinary user, if we look at the properties on the Receive activity we are asked for namespaces, which serializer should we use, correlation, known types etc. These are not things that a business user should be concerned about.</p>  <h3>&#160;</h3>  <h3>Users don’t / shouldn’t care about WCF configuration</h3>  <p>   <br />When<em> </em>building our company’s solution we started to ponder how we could avoid the business user having to see this stuff and you should ask yourself the same question. Should your users have to be presented with options that they should never understand? It’s not a very reassuring experience to say to your end users: “Don’t touch that stuff there or it will break”. Therefore we didn’t want them messing with this WCF stuff. </p>  <p>We knew we would probably supply our users a project template that would start them off and the subsequent experience we wanted for them was basically the activity authoring experience. A blank canvas, no messing around with things that shouldn’t concern them.</p>  <p>If you look at the XAML for a Workflow Service (xamlx) by using “View Code” from solution explorer you will see that the root element is a “WorkflowService”. If you look at a composite activity (.xaml) you will see that it’s root is an “Activity”. This tells us that fundamentally, our XAML is creating 2 different types of objects in these scenarios.</p>  <p>How then did we do this? How do we host a normal workflow activity as a service? Well that is where the <a title="WorkflowServiceHostFactory on MSDN" href="http://msdn.microsoft.com/en-us/library/system.servicemodel.activation.workflowservicehostfactory.aspx" target="_blank">WorkflowServiceHostFactory</a> comes in to play. As we will see in <a title="WorkflowServiceHostFactory" href="http://blog.petegoo.com/index.php/2011/09/07/hosting-an-activity-as-a-service-using-the-workflowservicehostfactory/" target="_blank">the next post</a>, it allows us to host an ordinary activity as a service, and to customize all the features we want on the Workflow Service Host, e.g. tracking, persistence, idle behavior etc.</p>  <div class="xdownload"> <div style="padding-bottom: 0px; border-right-width: 1px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; padding-top: 0px" id="scid:fb3a1972-4489-4e52-abe7-25a00bb07fdf:7112bb3d-3a91-4f1e-b688-368c61bf308d" class="wlWriterSmartContent"> <p>Download the Code <a href="http://blog.petegoo.com/wp-content/uploads/2011/09/EnterpriseWorkflowDemo1.zip" target="_blank">EnterpriseWorkflowDemo.zip</a></p> </div> </div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>229</wp:post_id>
		<wp:post_date>2011-09-03 17:55:32</wp:post_date>
		<wp:post_date_gmt>2011-09-03 04:55:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>activities-vs-wf-services-in-search-of-the-ideal-authoring-experience</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="enterprise-workflow"><![CDATA[Enterprise Workflow]]></category>
		<category domain="post_tag" nicename="enterprise-workflow"><![CDATA[Enterprise Workflow]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="post_tag" nicename="wf"><![CDATA[WF]]></category>
		<category domain="category" nicename="wf4"><![CDATA[WF4]]></category>
		<category domain="post_tag" nicename="wf4"><![CDATA[WF4]]></category>
		<category domain="post_tag" nicename="workflow"><![CDATA[Workflow]]></category>
		<wp:comment>
			<wp:comment_id>230</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo &raquo; Starting WF Instances using the Creation Endpoint]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.petegoo.com/index.php/2011/09/19/starting-wf-instances-using-the-creation-endpoint/</wp:comment_author_url>
			<wp:comment_author_IP>96.31.35.44</wp:comment_author_IP>
			<wp:comment_date>2011-09-23 01:06:28</wp:comment_date>
			<wp:comment_date_gmt>2011-09-22 12:06:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] post is the third in a series on building an Enterprise Workflow System using WF4. Previously we discussed how to get the activity authoring experience for workflow service authors by using a [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1316693188.3308";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1316693332.425";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>216</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo &raquo; Hosting an Activity as a Service using the WorkflowServiceHostFactory]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.petegoo.com/index.php/2011/09/07/hosting-an-activity-as-a-service-using-the-workflowservicehostfactory/</wp:comment_author_url>
			<wp:comment_author_IP>96.31.35.44</wp:comment_author_IP>
			<wp:comment_date>2011-09-07 21:59:20</wp:comment_date>
			<wp:comment_date_gmt>2011-09-07 08:59:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] the previous post we discussed how the default workflow service design experience wasn’t really what we would want [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1315386240.8672";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1315385960.4257";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>218</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo &raquo; Building an Enterprise Workflow system with WF4]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.petegoo.com/index.php/2011/09/02/building-an-enterprise-workflow-system-with-wf4/</wp:comment_author_url>
			<wp:comment_author_IP>96.31.35.44</wp:comment_author_IP>
			<wp:comment_date>2011-09-07 22:00:44</wp:comment_date>
			<wp:comment_date_gmt>2011-09-07 09:00:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Activities vs WF Services: In search of the ideal authoring experience [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1315386044.8983";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1315386240.8297";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Speaking at North Shore .Net Users Group</title>
		<link>http://blog.petegoo.com/index.php/2011/09/06/speaking-at-north-shore-net-users-group-2/</link>
		<pubDate>Tue, 06 Sep 2011 10:51:34 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/index.php/2011/09/06/speaking-at-north-shore-net-users-group-2/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I’m giving a talk on Thursday 15th September at the North Shore .Net users group in Auckland on Visual Studio Extensibility, DSL Tools and T4 Code Generation.</p>  <p>Quadrangle B;&#160; Seminar Room 3(QB3), Massey University, Albany </p>  <p><a name="SPBookmark_EventDate"></a>Start Time: 15/09/2011 5:45 p.m. </p>  <blockquote>   <p>We’ll look at how to increase your productivity by creating your own simple extensions to visual studio. Then we’ll delve a little deeper and look at how DSL tools and T4 text templating allow you to apply the patterns of Model Driven Development to take away all those boring repetitive tasks, leaving you with the time to concentrate on the real problems. We'll see examples of how we have managed to successfully apply these techniques to our development lifecycle and products at ADERANT.</p> </blockquote>  <p><a title="North Shore .Net User Group" href="http://www.dot.net.nz/Lists/Events%20Calendar/DispForm.aspx?ID=492&amp;Source=http%3A%2F%2Fwww%2Edot%2Enet%2Enz%2FLists%2FEvents%2520Calendar%2Fcalendar%2Easpx" target="_blank">More details at North Shore .Net User Group</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date>2011-09-06 23:51:34</wp:post_date>
		<wp:post_date_gmt>2011-09-06 10:51:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>speaking-at-north-shore-net-users-group-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>215</wp:comment_id>
			<wp:comment_author><![CDATA[Ivan Towlson]]></wp:comment_author>
			<wp:comment_author_email>ivan@hestia.cc</wp:comment_author_email>
			<wp:comment_author_url>http://hestia.typepad.com/flatlander/</wp:comment_author_url>
			<wp:comment_author_IP>203.173.196.71</wp:comment_author_IP>
			<wp:comment_date>2011-09-07 20:58:03</wp:comment_date>
			<wp:comment_date_gmt>2011-09-07 07:58:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Would love to see you bring this one to Wellington.  Are you in touch with Kirk and Owen?  If not, drop me a line and I'll try to hook you up.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1315386240.8879";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1315382283.1884";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Hosting an Activity as a Service using the WorkflowServiceHostFactory</title>
		<link>http://blog.petegoo.com/index.php/2011/09/07/hosting-an-activity-as-a-service-using-the-workflowservicehostfactory/</link>
		<pubDate>Wed, 07 Sep 2011 08:57:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/index.php/2011/09/07/hosting-an-activity-as-a-service-using-the-workflowservicehostfactory/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is the second post in a series about <a title="Building an Enterprise Workflow system with WF4" href="http://blog.petegoo.com/index.php/2011/09/02/building-an-enterprise-workflow-system-with-wf4/">Building an Enterprise Workflow system with WF4</a>.</p>  <p>In the <a title="Activities vs WF Services: In search of the ideal authoring experience" href="http://blog.petegoo.com/index.php/2011/09/03/activities-vs-wf-services-in-search-of-the-ideal-authoring-experience/">previous post</a> we discussed how the default workflow service design experience wasn’t really what we would want for an enterprise workflow system. We decided that the activity authoring experience we wanted was much better and we even hinted that the <a title="WorkflowServiceHostFactory on MSDN" href="http://msdn.microsoft.com/en-us/library/system.servicemodel.activation.workflowservicehostfactory.aspx" target="_blank">WorkflowServiceHostFactory</a> would enable us to host an activity as a service. Lets look at how we can do this.</p>  <p>I have modified the Magic Eight Ball sample from the <a title="Activities vs WF Services: In search of the ideal authoring experience" href="http://blog.petegoo.com/index.php/2011/09/03/activities-vs-wf-services-in-search-of-the-ideal-authoring-experience/">previous post</a> to make it an activity rather than a xamlx workflow service file.</p>  <p>&#160;<a href="http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture7.jpg"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="CropperCapture[7]" border="0" alt="CropperCapture[7]" src="http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture7_thumb.jpg" width="304" height="258" /></a></p>  <p>In a normal .xamlx workflow service like the one you get with the workflow service library template, the web.config makes no mention of the .xamlx file or workflow or anything that would suggest the app will host a workflow. In fact the .xamlx is automatically mapped by the runtime with a default binding and endpoint using the simplified configuration feature of WCF 4. This means that a .xamlx file will be hosted as a service using the BasicHttpBinding at the address of the xamlx file, much like the svc file for standard WCF services.</p>  <p>We can however specify our own service activation in the web.config as follows:</p>  <pre class="brush: xml;">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;configuration&gt;
  ...
  &lt;system.serviceModel&gt;
    ...
    &lt;serviceHostingEnvironment multipleSiteBindingsEnabled=&quot;true&quot; &gt;
      &lt;!-- Add the service Activations section--&gt;
      &lt;serviceActivations&gt;
        &lt;add relativeAddress=&quot;~/EightBall.svc&quot;
             service=&quot;BasicMagicEightBall.EightBall, BasicMagicEightBall&quot;
             factory=&quot; EightBallLibrary.Hosting.EnterpriseServiceHostFactory, EightBallLibrary&quot;/&gt;
      &lt;/serviceActivations&gt;
    &lt;/serviceHostingEnvironment&gt;
  &lt;/system.serviceModel&gt;
  ...
&lt;/configuration&gt;</pre>

<p>&#160;</p>

<p>If we break the serviceActivation element down:</p>

<ul>
  <li>relativeAddress: The relative URI that we will use, this does not have to end with .xamlx and the file in the path does actually exist </li>

  <li>service: The service to load, in our case this is the compiled xaml activity name and assembly name </li>

  <li>factory: This is our custom service host factory </li>
</ul>

<ul>In WCF you have a <a title="ServiceHost on MSDN" href="http://msdn.microsoft.com/en-us/library/system.servicemodel.servicehost.aspx" target="_blank">ServiceHost</a>, in Workflow we have a <a title="WorkflowServiceHost on MSDN" href="http://msdn.microsoft.com/en-us/library/system.servicemodel.workflowservicehost.aspx" target="_blank">WorkflowServiceHost</a>. In WCF we have a <a title="ServiceHostFactory on MSDN" href="http://msdn.microsoft.com/en-us/library/system.servicemodel.activation.servicehostfactory.aspx" target="_blank">ServiceHostFactory</a>, therefore in Workflow we have a <a title="WorkflowServiceHostFactory on MSDN" href="http://msdn.microsoft.com/en-us/library/system.servicemodel.activation.workflowservicehostfactory.aspx">WorkflowServiceHostFactory</a>. </ul>

<p>Notice that when we implement a custom class deriving from WorkflowServiceHostFactory that we have 2 overrides for CreateWorkflowServiceHost, one that takes a WorkflowService and one that takes an Activity. Obviously the second one is the one that is going to run in our case.</p>

<pre class="brush: csharp;">protected override WorkflowServiceHost CreateWorkflowServiceHost(WorkflowService service, Uri[] baseAddresses) {
    WorkflowServiceHost workflowServiceHost = base.CreateWorkflowServiceHost(service, baseAddresses);
    AddBehaviorsAndEndpoints(workflowServiceHost);
    return workflowServiceHost;
}

protected override WorkflowServiceHost CreateWorkflowServiceHost(System.Activities.Activity activity, Uri[] baseAddresses) {
    WorkflowServiceHost workflowServiceHost = base.CreateWorkflowServiceHost(activity, baseAddresses);
    AddBehaviorsAndEndpoints(workflowServiceHost);
    return workflowServiceHost;
}</pre>

<p>&#160;</p>

<p>We can add our own behaviors etc, hence the call to my AddBehaviorsAndEndpoints method. With this we can do many things to configure our WorkflowServiceHost including:</p>

<ul>
  <li>Hard Code Instance Store persistence </li>

  <li>Add WF Idle Behavior </li>

  <li>Add WF Unhandled Exception Behavior </li>

  <li>Add a WF control endpoint for controlling running instances </li>

  <li>Add a custom WF tracking behavior </li>

  <li>Add custom WF extensions </li>

  <li>Customize behaviors etc on WF hosted endpoints (Like adding security behaviors etc) </li>

  <li>Add a WF Creation Endpoint – more on that later. </li>
</ul>

<p>Now we have a workflow activity hosted as a service, just one problem. Remember that in our workflow service xamlx created by the Workflow Service Library project template we had a Receive activity with a SendReply. If you look closer on the properties for the Receive activity you will notice that there is a property called CanCreateInstance set to true. </p>

<p>When you have a Receive /SendResponse activity pair on a workflow definition, the workflow service host sets up that activity pair as a WCF service operation on the workflow service when the service host starts. If it has “CanCreateInstance” set, any call to that service operation will create a new instance of our workflow definition.</p>

<p>With our new hosted activity we have no way of starting a new instance as we do not have a Receive activity waiting on an incoming call. This is where the <a title="WorkflowCreationEndpoint on MSDN" href="http://msdn.microsoft.com/en-us/library/system.servicemodel.activities.workflowhostingendpoint.aspx" target="_blank">WorkflowCreationEndpoint</a> comes in, it will allow us to have a standard contract for creating new instances of our workflow, it will also be the subject of the <a title="The Creation Endpoint" href="http://blog.petegoo.com/index.php/2011/09/19/starting-wf-instances-using-the-creation-endpoint/" target="_blank">next post</a>.</p>

<div class="xdownload">
<div style="padding-bottom: 0px; border-right-width: 1px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; padding-top: 0px" id="scid:fb3a1972-4489-4e52-abe7-25a00bb07fdf:7112bb3d-3a91-4f1e-b688-368c61bf308d" class="wlWriterSmartContent">
<p>Download the Code <a href="http://blog.petegoo.com/wp-content/uploads/2011/09/EnterpriseWorkflowDemo1.zip" target="_blank">EnterpriseWorkflowDemo.zip</a></p>
</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>238</wp:post_id>
		<wp:post_date>2011-09-07 21:57:41</wp:post_date>
		<wp:post_date_gmt>2011-09-07 08:57:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hosting-an-activity-as-a-service-using-the-workflowservicehostfactory</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="category" nicename="enterprise-workflow"><![CDATA[Enterprise Workflow]]></category>
		<category domain="post_tag" nicename="enterprise-workflow"><![CDATA[Enterprise Workflow]]></category>
		<category domain="category" nicename="teched"><![CDATA[TechEd]]></category>
		<category domain="category" nicename="tenz"><![CDATA[tenz]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wf"><![CDATA[WF]]></category>
		<category domain="category" nicename="wf4"><![CDATA[WF4]]></category>
		<category domain="post_tag" nicename="wf4"><![CDATA[WF4]]></category>
		<wp:comment>
			<wp:comment_id>217</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo &raquo; Activities vs WF Services: In search of the ideal authoring experience]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.petegoo.com/index.php/2011/09/03/activities-vs-wf-services-in-search-of-the-ideal-authoring-experience/</wp:comment_author_url>
			<wp:comment_author_IP>96.31.35.44</wp:comment_author_IP>
			<wp:comment_date>2011-09-07 21:59:36</wp:comment_date>
			<wp:comment_date_gmt>2011-09-07 08:59:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] as a service? Well that is where the WorkflowServiceHostFactory comes in to play. As we will see in the next post, it allows us to host an ordinary activity as a service, and to customize all the features we want [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1315386240.8542";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1315385976.3595";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>226</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo » Building an Enterprise Workflow system with WF4]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.petegoo.com/index.php/2011/09/02/building-an-enterprise-workflow-system-with-wf4/</wp:comment_author_url>
			<wp:comment_author_IP>96.31.35.44</wp:comment_author_IP>
			<wp:comment_date>2011-09-20 00:25:06</wp:comment_date>
			<wp:comment_date_gmt>2011-09-19 11:25:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Hosting an Activity as a Service using the WorkflowServiceHostFactory [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1316431506.6135";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Starting WF Instances using the Creation Endpoint</title>
		<link>http://blog.petegoo.com/index.php/2011/09/19/starting-wf-instances-using-the-creation-endpoint/</link>
		<pubDate>Mon, 19 Sep 2011 10:56:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/index.php/2011/09/19/starting-wf-instances-using-the-creation-endpoint/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This post is the third in a <a title="Building an Enterprise Workflow System using WF4" href="http://blog.petegoo.com/index.php/2011/09/02/building-an-enterprise-workflow-system-with-wf4/" target="_blank">series on building an Enterprise Workflow System using WF4</a>. <a href="http://blog.petegoo.com/index.php/2011/09/03/activities-vs-wf-services-in-search-of-the-ideal-authoring-experience/" target="_blank">Previously</a> we discussed how to get the activity authoring experience for workflow service authors by using a custom <a title="WorkflowServiceHostFactory on MSDN" href="http://msdn.microsoft.com/en-us/library/system.servicemodel.activation.workflowservicehostfactory.aspx" target="_blank">WorkflowServiceHostFactory</a> to tell the <a title="WorkflowServiceHost on MSDN" href="http://msdn.microsoft.com/en-us/library/system.servicemodel.workflowservicehost.aspx" target="_blank">WorkflowServiceHost</a> to <a href="http://blog.petegoo.com/index.php/2011/09/07/hosting-an-activity-as-a-service-using-the-workflowservicehostfactory/" target="_blank">host a compiled activity</a> instead of a xamlx file.</p>  <p>Now we have a problem in that our workflow service cannot be started because it does not have a Receive Activity with a “CanCreateInstance” flag. Well, this is where the <a title="WorkflowCreationEndpoint on MSDN" href="http://msdn.microsoft.com/en-us/library/system.servicemodel.activities.workflowhostingendpoint.aspx" target="_blank">WorkflowCreationEndpoint</a> steps in. This little beauty is an endpoint that can sit on our workflow service and when a request is processed by this endpoint, it will start a new instance of our workflow.</p>  <p>The only strange thing about this class is that it is a little different to implement than a standard WCF service. In WCF we would normally have an interface that represented our contract and we would only have to write a class that implements that contract. The WorkflowCreationEndpoint works slightly differently, before we get to that, lets create the interface that our clients will use to start a new instance of our workflow. Remember that we are building a Magic Eight Ball service such that we can ask a question, provide an email address and we will be emailed the response. Therefore our contract looks like this:</p>  <p>&#160;</p>  <pre class="brush: csharp;">[ServiceContract(Name = &quot;IEightBallContract&quot;)]
public interface IEightBallContract {
    [OperationContract]
    Guid Ask(string question, string email);
}</pre>

<p>Notice that we have an operation called Ask that takes a question and an email address. The Guid return value will be our Workflow Instance Id.</p>

<p>Now for the implementation of the WorkflowCreationEndpoint:</p>

<pre class="brush: csharp;">internal class EnterpriseWorkflowCreationEndpoint : WorkflowHostingEndpoint  {
    public EnterpriseWorkflowCreationEndpoint(Binding binding, EndpointAddress endpointAddress)
        : base(typeof(IEightBallContract), binding, endpointAddress) {}

    protected override WorkflowCreationContext OnGetCreationContext(object[] inputs, OperationContext operationContext, Guid instanceId, WorkflowHostingResponseContext responseContext) {

        if(!operationContext.IncomingMessageHeaders.Action.EndsWith(&quot;Ask&quot;)) {
            throw new InvalidOperationException();
        }

        EnterpriseWorkflowCreationContext workflowCreationContext = new EnterpriseWorkflowCreationContext();

        string question = inputs[0] as string;
        string email = inputs[1] as string;

        workflowCreationContext.WorkflowArguments.Add(&quot;Question&quot;, question);
        workflowCreationContext.Email = email;

        responseContext.SendResponse(instanceId, null);

        return workflowCreationContext;
    }
}</pre>

<p>&#160;</p>

<p>In the creation endpoint, we override the OnGetCreationContext method and first validate that we are dealing with the “Ask” operation that we expect. We will cover the WorkflowCreationContext in more detail in the next post but notice that we can take the inputs, in this case only the question, and pass them as arguments to our Workflow using the creation context. We then send a response to the user containing the instance id and we are done.</p>

<p>The last step here is to wire up the creation endpoint on our WorkflowServiceHostFactory. For this we override the CreateWorkflowServiceHost method in the factory and add the endpoints as follows:</p>

<pre class="brush: csharp;">protected override WorkflowServiceHost CreateWorkflowServiceHost(System.Activities.Activity activity, Uri[] baseAddresses) {
    WorkflowServiceHost workflowServiceHost = base.CreateWorkflowServiceHost(activity, baseAddresses);
    AddBehaviorsAndEndpoints(workflowServiceHost);
    return workflowServiceHost;
}

/// &lt;summary&gt;
/// Adds the standard behaviors and endpoints to our workflow service host.
/// &lt;/summary&gt;
/// &lt;param name=&quot;workflowServiceHost&quot;&gt;The workflow service host.&lt;/param&gt;
private void AddBehaviorsAndEndpoints(WorkflowServiceHost workflowServiceHost) {
    // Check whether we have already initialised the service host
    if (workflowServiceHost.Description.Endpoints.Where(endpoint =&gt; endpoint is EnterpriseWorkflowCreationEndpoint).Any()) {
        return;
    }

    // Add endpoints for any services that have been defined in the workflow
    workflowServiceHost.AddDefaultEndpoints();

    ServiceEndpoint firstEndpoint = (from endpoint in workflowServiceHost.Description.Endpoints
                         where endpoint.IsSystemEndpoint == false
                         select endpoint).FirstOrDefault();

    BasicHttpBinding binding = new BasicHttpBinding();
    EndpointAddress endpointAddress = new EndpointAddress(workflowServiceHost.BaseAddresses[0]);

    // Add the creation endpoint
    EnterpriseWorkflowCreationEndpoint creationEndpoint = new EnterpriseWorkflowCreationEndpoint(firstEndpoint != null ? firstEndpoint.Binding : binding, firstEndpoint != null ? firstEndpoint.Address : endpointAddress);

    workflowServiceHost.AddServiceEndpoint(creationEndpoint);

}</pre>

<p>&#160;</p>

<p>There is a lot more that can be done here but the important things to know are that we are using AddDefaultEndpoints to first add any endpoints that are specified by Receive activities on our workflow activity, this is important if we want to support a workflow that can be called from outside while in process. </p>

<p>Next we create a default endpoint address and binding in case we are going to need it and then we try to reuse the address and binding of a previous endpoint if one exists otherwise use our new ones. Finally we simply call AddServiceEndpoint to add the WorkflowCreationEndpoint to our host. Now we have a workflow that can be started by calling Ask. You can test this using the WCF Test Client as below:</p>

<p><a href="http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture8.jpg"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="CropperCapture[8]" border="0" alt="CropperCapture[8]" src="http://blog.petegoo.com/wp-content/uploads/2011/09/CropperCapture8_thumb.jpg" width="504" height="281" /></a></p>

<p>We can also write client code to access our service easily, either by using the Add Service Reference in Visual Studio or using the ChannelFactory.</p>

<pre class="brush: csharp;">// Start the EightBall workflow
IEightBallContract eightBall = ChannelFactory&lt;IEightBallContract&gt;.CreateChannel(
    new BasicHttpBinding(),
    new EndpointAddress(
       &quot;http://localhost/HardcoreWorkflow/BasicMagicEightBall/EightBall.svc&quot;));

eightBall.Ask(model.Question, model.Email);</pre>

<p>&#160;</p>

<p>In the <a title="Responding to Workflow completion with the WorkflowCreationContext" href="http://blog.petegoo.com/index.php/2011/09/23/responding-to-wf-completion-using-the-creation-context/" target="_blank">next post we will look at the WorkflowCreationContext</a> and how we can use it to store state about how our instance was started without requiring our workflow to know about it. We will also look at how we can respond to the completion of the workflow and perform an action once it is complete, cancelled or terminated.</p>

<div class="xdownload">
  <div style="padding-bottom: 0px; border-right-width: 1px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; padding-top: 0px" id="scid:fb3a1972-4489-4e52-abe7-25a00bb07fdf:7112bb3d-3a91-4f1e-b688-368c61bf308d" class="wlWriterSmartContent">
    <p>Download the Code <a href="http://blog.petegoo.com/wp-content/uploads/2011/09/EnterpriseWorkflowDemo1.zip" target="_blank">EnterpriseWorkflowDemo.zip</a></p>
  </div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date>2011-09-19 23:56:43</wp:post_date>
		<wp:post_date_gmt>2011-09-19 10:56:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>starting-wf-instances-using-the-creation-endpoint</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="category" nicename="enterprise-workflow"><![CDATA[Enterprise Workflow]]></category>
		<category domain="post_tag" nicename="enterprise-workflow"><![CDATA[Enterprise Workflow]]></category>
		<category domain="category" nicename="teched"><![CDATA[TechEd]]></category>
		<category domain="category" nicename="tenz"><![CDATA[tenz]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wf"><![CDATA[WF]]></category>
		<category domain="category" nicename="wf4"><![CDATA[WF4]]></category>
		<category domain="post_tag" nicename="wf4"><![CDATA[WF4]]></category>
		<wp:comment>
			<wp:comment_id>228</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo &raquo; Building an Enterprise Workflow system with WF4]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.petegoo.com/index.php/2011/09/02/building-an-enterprise-workflow-system-with-wf4/</wp:comment_author_url>
			<wp:comment_author_IP>96.31.35.44</wp:comment_author_IP>
			<wp:comment_date>2011-09-23 01:03:09</wp:comment_date>
			<wp:comment_date_gmt>2011-09-22 12:03:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Starting WF Instances using the Creation Endpoint [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1316692989.1123";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1316693332.4594";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>225</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo » Hosting an Activity as a Service using the WorkflowServiceHostFactory]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.petegoo.com/index.php/2011/09/07/hosting-an-activity-as-a-service-using-the-workflowservicehostfactory/</wp:comment_author_url>
			<wp:comment_author_IP>96.31.35.44</wp:comment_author_IP>
			<wp:comment_date>2011-09-20 00:00:07</wp:comment_date>
			<wp:comment_date_gmt>2011-09-19 11:00:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] a standard contract for creating new instances of our workflow, it will also be the subject of the next post. Share this:    Categories: C#, Enterprise Workflow, TechEd, tenz, Uncategorized, WCF, WF4 Tags: [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1316430007.2299";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Responding to WF completion using the Creation Context</title>
		<link>http://blog.petegoo.com/index.php/2011/09/23/responding-to-wf-completion-using-the-creation-context/</link>
		<pubDate>Thu, 22 Sep 2011 11:39:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/index.php/2011/09/23/responding-to-wf-completion-using-the-creation-context/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is the fourth post in a series on <a href="http://blog.petegoo.com/index.php/2011/09/02/building-an-enterprise-workflow-system-with-wf4/" target="_blank">building an Enterprise Workflow system using WF4</a>. Previously we looked at the <a title="WorkflowServiceHostFactory on MSDN" href="http://msdn.microsoft.com/en-us/library/system.servicemodel.activation.workflowservicehostfactory.aspx" target="_blank">WorkflowServiceHostFactory</a>,</a> the <a title="WorkflowCreationEndpoint on MSDN" href="http://msdn.microsoft.com/en-us/library/system.servicemodel.activities.workflowhostingendpoint.aspx" target="_blank">WorkflowCreationEndpoint</a> and how we can use these to host activities as our own services. In this post I want to explore how we can execute some action once the workflow has completed.</p>  <p>Of course we could just put some activity at the end of our workflow but we are building an enterprise workflow system so we do not want to force our users to have to do this. Instead we want it to simply happen for them. Remember from the previous posts that we were creating a site that would allow users to create their own Magic Eight Ball implementations and upload them for an end user to consume, the end user could select an implementation, ask a question, supply an email address and get emailed a response.</p>  <p>In this example we do not want the implementation writer to have to worry about sending the email so how can we get this to happen automatically. Well, enter the WorkflowCreationContext. The WorkflowCreationContext is basically a class that captures some information at workflow creation, we used it <a href="http://blog.petegoo.com/index.php/2011/09/19/starting-wf-instances-using-the-creation-endpoint/" target="_blank">previously</a> to add the arguments in our creation endpoint when starting our workflow.</p>  <pre class="brush: csharp;">internal class EnterpriseWorkflowCreationEndpoint : WorkflowHostingEndpoint  {
    public EnterpriseWorkflowCreationEndpoint(Binding binding, EndpointAddress endpointAddress)
        : base(typeof(IEightBallContract), binding, endpointAddress) {}

    protected override WorkflowCreationContext OnGetCreationContext(object[] inputs, OperationContext operationContext, Guid instanceId, WorkflowHostingResponseContext responseContext) {

        if(!operationContext.IncomingMessageHeaders.Action.EndsWith(&quot;Ask&quot;)) {
            throw new InvalidOperationException();
        }

        EnterpriseWorkflowCreationContext workflowCreationContext = new EnterpriseWorkflowCreationContext();

        string question = inputs[0] as string;
        string email = inputs[1] as string;

        workflowCreationContext.WorkflowArguments.Add(&quot;Question&quot;, question);
        workflowCreationContext.Email = email;

        responseContext.SendResponse(instanceId, null);

        return workflowCreationContext;
    }
}</pre>

<p>&#160;</p>

<p>Notice that we have used an<strong> EnterpriseWorkflowCreationContext</strong>, we could have just used the standard WorkflowCreationEndpoint but I wanted to do something special, I wanted to add behaviour to the completion of our workflow but there was one other thing. If the author of the workflow should not have to worry about the email then they should not be sent the email address supplied by the user, therefore I needed a way to store some data (the email address) along with the workflow but outside of the workflow’s activities.</p>

<p>It just so happens that the WorkflowCreationContext gets serialized along with the instance so I am able to mark it up with DataContract and DataMember and add a property, this will survive till the end of the workflow and be available to my completion behaviour.</p>

<pre class="brush: csharp;">[DataContract]
public class EnterpriseWorkflowCreationContext : WorkflowCreationContext {
    [DataMember]
    public string Email { get; set; }

    protected override System.IAsyncResult OnBeginWorkflowCompleted(System.Activities.ActivityInstanceState completionState, System.Collections.Generic.IDictionary&lt;string, object&gt; workflowOutputs, System.Exception terminationException, System.TimeSpan timeout, System.AsyncCallback callback, object state) {

        if(terminationException == null) {
            MailMessage mail = new MailMessage();
            mail.To.Add(Email);

            mail.From = new MailAddress(&quot;peter.goodman@aderant.com&quot;);

            mail.Subject = &quot;The workflow has completed&quot;;

            StringBuilder stringBuilder = new StringBuilder();
            
            stringBuilder.AppendLine(&quot;The result of the workflow was: &quot;);
            
            workflowOutputs.ToList().ForEach(kvp =&gt; 
                stringBuilder.AppendLine(string.Format(&quot;{0}: {1}&quot;, kvp.Key, kvp.Value))
            );
            
            mail.Body = stringBuilder.ToString();

            mail.IsBodyHtml = false;

            SmtpClient smtp = new SmtpClient();
            smtp.Send(mail);
            
        }

        return base.OnBeginWorkflowCompleted(completionState, workflowOutputs, terminationException, timeout, callback, state);
    }
    
}</pre>

<p>&#160;</p>

<p>All I had to do was derive from WorkflowCreationContext and override the mind numbing OnBeginWorkflowCompleted method (basically when the workflow is starting to end). I use the previously saved Email address to construct an email and in this case I enumerate all the out arguments of the workflow into the body. The workflowOutputs will actually contain all the OutArgument and InOutArgument properties on your workflow definition keyed by their names.</p>

<p>Of course this example is rather contrived but you could do more interesting things like respond to the workflow being terminated or cancelled by processing the exception, or as I have done before, implement a sub workflow activity.</p>

<h3>Sub Workflow</h3>

<p>It’s probably worth a quick overview of how you could implement a sub workflow using the WorkflowCreationContext. Basically you have an activity that knows how to call another workflow’s creation endpoint, passing the id of the source workflow and a correlation token as arguments. Immediately following that creation call, the calling activity sets up a Receive activity waiting on a response. </p>

<p>Meanwhile the target workflow runs to completion and in the OnBeginWorkflowCompleted event realises that it has a source workflow id and correlation token to callback a source workflow to notify it that the target workflow has completed. It does so thus resuming the source workflow as if it had just called another activity instead of a whole other workflow.</p>

<p>The only complexity is in mapping the arguments and providing a generic way of doing so. I tend to use IDictionary&lt;string, object&gt; for this kind of stuff.</p>

<p>Why is this useful? Well, it allows for finer grained versioning of aspects of large processes. The more state you have in a long running workflow the more likely you will have problems versioning any aspect of it. If you split these large processes up into smaller ones, you can easily upgrade a sub-process and have it affect larger workflows. More on that in a later post.</p>

<p>So that was the use of the WorkflowCreationContext. In the source I have supplied I have also created a Manual Task Activity based on my <a title="Human Based Workflows" href="http://blog.petegoo.com/index.php/2010/08/22/workflow-4-email-approval-sample/" target="_blank">earlier posting about manual tasks in workflow</a>. </p>

<div class="xdownload">
<div style="padding-bottom: 0px; border-right-width: 1px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; padding-top: 0px" id="scid:fb3a1972-4489-4e52-abe7-25a00bb07fdf:7112bb3d-3a91-4f1e-b688-368c61bf308d" class="wlWriterEditableSmartContent"><p>Download the Code <a href="http://blog.petegoo.com/wp-content/uploads/2011/09/EnterpriseWorkflowDemo1.zip" target="_blank">EnterpriseWorkflowDemo.zip</a></p></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>252</wp:post_id>
		<wp:post_date>2011-09-23 00:39:09</wp:post_date>
		<wp:post_date_gmt>2011-09-22 11:39:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>responding-to-wf-completion-using-the-creation-context</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="enterprise-workflow"><![CDATA[Enterprise Workflow]]></category>
		<category domain="category" nicename="presentations"><![CDATA[Presentations]]></category>
		<category domain="category" nicename="teched"><![CDATA[TechEd]]></category>
		<category domain="category" nicename="tenz"><![CDATA[tenz]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wf"><![CDATA[WF]]></category>
		<category domain="category" nicename="wf4"><![CDATA[WF4]]></category>
		<category domain="post_tag" nicename="wf4"><![CDATA[WF4]]></category>
		<wp:comment>
			<wp:comment_id>229</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo &raquo; Building an Enterprise Workflow system with WF4]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.petegoo.com/index.php/2011/09/02/building-an-enterprise-workflow-system-with-wf4/</wp:comment_author_url>
			<wp:comment_author_IP>96.31.35.44</wp:comment_author_IP>
			<wp:comment_date>2011-09-23 01:04:40</wp:comment_date>
			<wp:comment_date_gmt>2011-09-22 12:04:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Responding to WF completion using the Creation Context [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1316693080.3388";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1316693332.4469";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>430</wp:comment_id>
			<wp:comment_author><![CDATA[Kedrick Weeks]]></wp:comment_author>
			<wp:comment_author_email>kweeks@maevva.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>76.183.58.122</wp:comment_author_IP>
			<wp:comment_date>2012-01-14 05:22:56</wp:comment_date>
			<wp:comment_date_gmt>2012-01-13 16:22:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,

I've managed to use this blog series to build a sample workflow service (different from this) and I'm able to host the workflow and consume the service from the WCF TestClient.  However, the service doesn't execute my workflow...

In fact, it doesn't call the OnBeginWorkflowCompleted... it simply returns the object I'm sending to the service and whatever modification I make in the WorkflowHostingEndpoint class.

I read that there's a flag that needs to be set in the WorkflowCreationContext object that indicates whether to execute the OnBeginWorkflowCompleted method and that flag isn't set when initialized in the OnGetCreationContext methods...

I'd appreciate any guidance as to why my workflow activity isn't being called by the service.

Thanks!
KBW]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1326533625.944";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1326471776.3244";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>431</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>118.93.168.6</wp:comment_author_IP>
			<wp:comment_date>2012-01-14 22:42:52</wp:comment_date>
			<wp:comment_date_gmt>2012-01-14 09:42:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Have you perhaps created a CreationContext class that could not be serialized? You can write a test for it by using the DataContractSerializer class, or feel free to send me the code (I'll ping you an email so you have my address).

Normally this can happen if you have not left a parameterless constructor on your type or if it has some type of unserializable property on it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1326534172.9722";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Slides and Code for Visual Studio eXtensibility, DSL and T4</title>
		<link>http://blog.petegoo.com/index.php/2011/09/28/slides-and-code-for-visual-studio-extensibility-dsl-and-t4/</link>
		<pubDate>Wed, 28 Sep 2011 06:53:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/index.php/2011/09/28/slides-and-code-for-visual-studio-extensibility-dsl-and-t4/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Here are the slides and the code for the talk on VSX, DSLs and T4 that I did in the North Shore and Auckland .Net User Groups.</p>  <p><strong>Snippets</strong></p>  <p>For snippets I used the <a title="Snippet Designer on Visual Studio Galler" href="http://visualstudiogallery.msdn.microsoft.com/B08B0375-139E-41D7-AF9B-FAEE50F68392" target="_blank">Snippet Designer on Visual Studio Gallery</a>. The code for that template is attached below.</p>  <p>I also talked about using Resharper Live Templates, there is some pretty good documentation <a title="Resharper live templates" href="http://www.jetbrains.com/resharper/webhelp/Templates__Creating_and_Editing_Templates__Creating_a_Template.html" target="_blank">here</a>.</p>  <p><strong>Macros</strong></p>  <p>We talked about macros and here they are:</p>  <p>Create a Guid. This macro will insert a new guid at the cursor location. We mapped this to a keyboard command (Alt+G) with the Tools-&gt;Options-&gt;Keyboard menu in VS.</p>  <pre class="brush: vb;">Sub Create_GUID()
    DTE.ActiveDocument.Selection.Text = System.Guid.NewGuid().ToString(&quot;D&quot;).ToUpper()
End Sub</pre>

<p>&#160;</p>

<p>Copy Files to Drop. This macro will copy the output of the selected project to a drop folder.</p>

<pre class="brush: vb;">Sub CopyFilesToDrop()
    For Each selectedItem As SelectedItem In DTE.SelectedItems
        If (selectedItem.Project IsNot Nothing) Then
            Dim project As Project = CType(selectedItem.Project, Project)
            Dim fullProjectPath As String = project.Properties.Item(&quot;FullPath&quot;).Value.ToString()
            Dim fileName As String = project.Properties.Item(&quot;OutputFilename&quot;).Value
            Dim outputPath As String = project.ConfigurationManager.ActiveConfiguration.Properties.Item(&quot;OutputPath&quot;).Value
            Dim outputFile As String = System.IO.Path.Combine(fullProjectPath, outputPath, fileName)
            System.IO.File.Copy(outputFile, System.IO.Path.Combine(&quot;c:\drop&quot;, fileName), True)
        End If
    Next
End Sub</pre>

<p>&#160;</p>

<p><strong>Custom Designer</strong></p>

<p>One of the things that became apparent when I was preparing this talk was how many designers in Visual Studio are simply a designer over an XML file, DSLs, Resx designer, project properties. A good sample for creating your own is the <a title="Designer over XML sample on Visual Studio code gallery" href="http://code.msdn.microsoft.com/Designer-View-Over-XML-20a81f17" target="_blank">Designer over XML sample on Visual Studio code gallery</a>.</p>

<p><strong>DSL Tools</strong></p>

<p>When we looked at DSL Tools for Visual Studio we simply took the Class Designer example that ships once you have installed the <a title="Visual Studio SDK" href="http://www.microsoft.com/download/en/details.aspx?id=21835" target="_blank">Visual Studio SDK</a> and the <a title="Visualization and Modeling SDK" href="http://archive.msdn.microsoft.com/vsvmsdk" target="_blank">Visualization and Modeling SDK</a>. If you want to save yourself some time look at getting the <a title="Domain Specific Development with Visual Studio DSL Tools" href="http://www.domainspecificdevelopment.com/" target="_blank">awesome book</a> written by the team that made the tools.</p>

<p><strong>T4</strong></p>

<p>We then created a tt file that would generate viewmodel code that implemented NotifyPropertyChanged form the class designer dsl implementation. THe whole DSL project is attached below. Simply install the VS SDK and the Visualization and Modeling SDK, open the project, hit the transform all templates button in solution explorer and hit CTRL+F5. This will open the debugging project where you can see the output of the ViewModels.tt file. Right click the file and run the custom tool to regenerate the output.</p>

<p>&#160;</p>

<div class="xdownload">
  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:fb3a1972-4489-4e52-abe7-25a00bb07fdf:29c1719a-8a5d-48c5-a738-e4a0751f0905" class="wlWriterEditableSmartContent"><p>Download the <a href="http://blog.petegoo.com/wp-content/uploads/2011/09/Visual-Studio-Extensibility-DSL-Tools-and-T42.pptx" target="_blank">Slides</a></p></div>

  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:fb3a1972-4489-4e52-abe7-25a00bb07fdf:361fd3b3-741d-4733-9410-38f0ad561cc5" class="wlWriterEditableSmartContent"><p>Download the <a href="http://blog.petegoo.com/wp-content/uploads/2011/09/SnippetFile1.snippet.txt" target="_blank">snippet</a></p></div>

  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:fb3a1972-4489-4e52-abe7-25a00bb07fdf:65208993-bb57-4dc4-a94b-9127a6fea3c6" class="wlWriterEditableSmartContent"><p>Download the <a href="http://blog.petegoo.com/wp-content/uploads/2011/09/Language4.zip" target="_blank">DSL Project with T4 Text Template</a></p></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>266</wp:post_id>
		<wp:post_date>2011-09-28 19:53:57</wp:post_date>
		<wp:post_date_gmt>2011-09-28 06:53:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>slides-and-code-for-visual-studio-extensibility-dsl-and-t4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="dsl"><![CDATA[DSL]]></category>
		<category domain="post_tag" nicename="dsl-tools"><![CDATA[DSL Tools]]></category>
		<category domain="post_tag" nicename="t4"><![CDATA[T4]]></category>
		<category domain="category" nicename="t4"><![CDATA[T4]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="post_tag" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="category" nicename="vsx"><![CDATA[VSX]]></category>
		<category domain="post_tag" nicename="vsx"><![CDATA[VSX]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Help make Workflow Foundation better</title>
		<link>http://blog.petegoo.com/index.php/2011/09/29/help-make-workflow-foundation-better/</link>
		<pubDate>Thu, 29 Sep 2011 02:43:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=270</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://blogs.msdn.com/b/rjacobs/" title="Ron Jacobs' blog on MSDN" target="_blank">Ron Jacobs</a> and the workflow team are <a href="http://wf4.uservoice.com/forums/135015-workflow-runtime" title="Workflow Foundation on User Voice" target="_blank">looking for feedback and ideas</a> for WF vNext. Help make it better by adding your suggestions or voting for some others.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>270</wp:post_id>
		<wp:post_date>2011-09-29 15:43:54</wp:post_date>
		<wp:post_date_gmt>2011-09-29 02:43:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>help-make-workflow-foundation-better</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="post_tag" nicename="wf"><![CDATA[WF]]></category>
		<category domain="category" nicename="wf4"><![CDATA[WF4]]></category>
		<category domain="post_tag" nicename="wf4"><![CDATA[WF4]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Workflow Service Tracking Viewer</title>
		<link>http://blog.petegoo.com/index.php/2011/10/02/workflow-service-tracking-viewer/</link>
		<pubDate>Sun, 02 Oct 2011 01:28:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=282</guid>
		<description></description>
		<content:encoded><![CDATA[If you are working with Workflow Services (.xamlx) and you want an easy way to see live tracking from your workflow your only out-of-the-box option right now is <a title="Windows Server AppFabric" href="http://msdn.microsoft.com/en-us/windowsserver/ee695849" target="_blank">AppFabric</a> which doesn’t show live data and the UI can be a little slow. The <a title="Workflow Service Tracking Viewer on NuGet" href="http://nuget.org/List/Packages/WorkflowServiceTrackingViewer" target="_blank">Workflow Service Tracking Viewer</a> (beta) uses <a title="SignalR on github" href="https://github.com/SignalR/SignalR" target="_blank">SignalR</a> and a custom tracking participant to serve a web page alongside your workflow endpoint that displays live tracking information as it happens.

The viewer is available as a <a title="NuGet" href="http://nuget.org/" target="_blank">NuGet</a> package that plugs in to your existing web application projects containing workflow services.

1. Add the WorkflowServiceTrackingViewer package to your project using <a title="NuGet" href="http://nuget.org/" target="_blank">NuGet</a>

<a href="http://blog.petegoo.com/wp-content/uploads/2011/10/CropperCapture9.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="CropperCapture[9]" src="http://blog.petegoo.com/wp-content/uploads/2011/10/CropperCapture9_thumb.jpg" alt="CropperCapture[9]" width="404" height="215" border="0" /></a>

2. If you have your project hosted in IIS or IIS Express rather than the Visual Studio Development Server then comment out the marked section in the web.config. Otherwise you will get an error when the Web Application starts.
<pre class="brush: xml;">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;configuration&gt;
  &lt;system.web&gt;
    &lt;compilation debug="true" targetFramework="4.0" /&gt;
    &lt;httpModules&gt;
      &lt;!-- Comment out this section if hosting in IIS 7.5 or IIS Express --&gt;
      &lt;add name="WorkflowServiceTrackingViewer"
           type="PeteGoo.WorkflowServiceTrackingViewer.TrackingViewerHttpModule, WorkflowServiceTrackingViewer" /&gt;

    &lt;/httpModules&gt;
,.  &lt;/system.web&gt;</pre>
3. Start the tracking viewer by going to the URI of your web application and adding “/trackingviewer” e.g. for the web application hosted at <a href="http://localhost/Foo/">http://localhost/Foo/</a>

<a href="http://blog.petegoo.com/wp-content/uploads/2011/10/TrackingViewerEmpty.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="TrackingViewerEmpty" src="http://blog.petegoo.com/wp-content/uploads/2011/10/TrackingViewerEmpty_thumb.png" alt="TrackingViewerEmpty" width="454" height="113" border="0" /></a>

4. Start an instance of your workflow service

<a href="http://blog.petegoo.com/wp-content/uploads/2011/10/wcfTestClient.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="wcfTestClient" src="http://blog.petegoo.com/wp-content/uploads/2011/10/wcfTestClient_thumb.png" alt="wcfTestClient" width="454" height="289" border="0" /></a>

5. The workflow tracking data should now appear in the browser window

<a href="http://blog.petegoo.com/wp-content/uploads/2011/10/trackingviewer.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="trackingviewer" src="http://blog.petegoo.com/wp-content/uploads/2011/10/trackingviewer_thumb.png" alt="trackingviewer" width="454" height="220" border="0" /></a>

&nbsp;

<strong>Known Issues</strong>

1. After applying and clearing a filter the grid is no longer the full length of the page.

2. After a while the page will slow down, clear the grid to get the performance back

3. When hosting in IIS on Win 7 the maximum connections to the tracking viewer is 2.

This seems to be related to the maximum connection for IIS as it affects any SignalR project

<div>The source is available on <a href="https://github.com/PeteGoo/Workflow-Service-Tracking-Viewer" title="GitHub" target="_blank">GitHub</a>.</div>
<div class="xdownload"><a title="Sample Project" href="http://blog.petegoo.com/wp-content/uploads/2011/10/TrackingSample.zip">Sample Project</a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>282</wp:post_id>
		<wp:post_date>2011-10-02 14:28:00</wp:post_date>
		<wp:post_date_gmt>2011-10-02 01:28:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>workflow-service-tracking-viewer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="trackingviewer"><![CDATA[TrackingViewer]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wf"><![CDATA[WF]]></category>
		<category domain="category" nicename="wf4"><![CDATA[WF4]]></category>
		<category domain="post_tag" nicename="wf4"><![CDATA[WF4]]></category>
		<category domain="category" nicename="workflow-service-tracking-viewer"><![CDATA[Workflow Service Tracking Viewer]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>249</wp:comment_id>
			<wp:comment_author><![CDATA[Mike Nooney]]></wp:comment_author>
			<wp:comment_author_email>mike.nooney@payglobal.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>123.100.99.97</wp:comment_author_IP>
			<wp:comment_date>2011-10-05 15:19:44</wp:comment_date>
			<wp:comment_date_gmt>2011-10-05 02:19:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This looks really useful. I've installed the package against a simple Workflow service and can see the trackingviewer running at http://localhost:8089/appname/trackingviewer. However no instances are appearing even though they exist in the sql instance store. Could you possibly upload a simple WF service that shows a working tracking viewer?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1317781184.72";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1317798136.1734";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>251</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>118.93.76.140</wp:comment_author_IP>
			<wp:comment_date>2011-10-05 20:05:15</wp:comment_date>
			<wp:comment_date_gmt>2011-10-05 07:05:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've updated the post with a sample app. Let me know how it goes. I've tested it with the default WCF Service Library template and our own in house workflows on a number of machines so I guess there must be a different use case at play here. Are you using the WorkflowServiceHost?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>249</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1317798315.8596";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>259</wp:comment_id>
			<wp:comment_author><![CDATA[Mike Nooney]]></wp:comment_author>
			<wp:comment_author_email>mike.nooney@payglobal.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.payglobal.com</wp:comment_author_url>
			<wp:comment_author_IP>203.184.15.144</wp:comment_author_IP>
			<wp:comment_date>2011-10-06 21:15:47</wp:comment_date>
			<wp:comment_date_gmt>2011-10-06 08:15:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The sample app works great, thanks. I just had to change the client profile to point to .NET4.0 on my home machine. I'll try again on the work machine where I had the issue. Probably something I misconfigured. This will be useful!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1317888947.7581";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>437</wp:comment_id>
			<wp:comment_author><![CDATA[Steve Goodman]]></wp:comment_author>
			<wp:comment_author_email>sgoodman@imeta.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>89.21.226.194</wp:comment_author_IP>
			<wp:comment_date>2012-01-27 04:34:33</wp:comment_date>
			<wp:comment_date_gmt>2012-01-26 15:34:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Another great post. Is there anyway that the DisplayName could be outputted?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327592073.3419";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327599880.2249";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>438</wp:comment_id>
			<wp:comment_author><![CDATA[Steve Goodman]]></wp:comment_author>
			<wp:comment_author_email>sgoodman@imeta.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>89.21.226.194</wp:comment_author_IP>
			<wp:comment_date>2012-01-27 06:21:03</wp:comment_date>
			<wp:comment_date_gmt>2012-01-26 17:21:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="#comment-437" rel="nofollow">@Steve Goodman  </a> 
Doh, somehow missed the fact you could scroll the window left and right. What a great tool. Thank you.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327598463.6228";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327599880.1964";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>440</wp:comment_id>
			<wp:comment_author><![CDATA[Roman Gavrilov]]></wp:comment_author>
			<wp:comment_author_email>clavrg@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>65.223.61.122</wp:comment_author_IP>
			<wp:comment_date>2012-02-22 07:01:57</wp:comment_date>
			<wp:comment_date_gmt>2012-02-21 18:01:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Is source code available?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1329847317.5626";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1330389124.4474";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>434</wp:comment_id>
			<wp:comment_author><![CDATA[(WF4 &#8211; Link) For your reading pleasure – PeteGoo | MSDN Blogs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://msdnrss.thecoderblogs.com/2012/01/wf4-link-for-your-reading-pleasure-%e2%80%93-petegoo/</wp:comment_author_url>
			<wp:comment_author_IP>65.254.224.36</wp:comment_author_IP>
			<wp:comment_date>2012-01-20 15:57:48</wp:comment_date>
			<wp:comment_date_gmt>2012-01-20 02:57:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://blog.petegoo.com/index.php/2011/10/02/workflow-service-tracking-viewer/ [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327600095.1933";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>436</wp:comment_id>
			<wp:comment_author><![CDATA[Mike Perrenoud]]></wp:comment_author>
			<wp:comment_author_email>mperren@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>205.143.204.206</wp:comment_author_IP>
			<wp:comment_date>2012-01-24 02:57:30</wp:comment_date>
			<wp:comment_date_gmt>2012-01-23 13:57:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Pete -- amazing tool and post, simply amazing!  WF is a great platform and has some awesome benefits but debugging has always been weak.  I've written software for more than 11 years and have never been so excited for simply text style logging with artifact names and stack traces.  I appreciate your willingness to contribute to the community, it's greatly appreciated and has likely saved me days of debugging.  Great job!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327454057.3294";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327327050.2279";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>445</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>58.28.164.27</wp:comment_author_IP>
			<wp:comment_date>2012-02-28 13:32:34</wp:comment_date>
			<wp:comment_date_gmt>2012-02-28 00:32:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Not yet but it is coming. Just clearing up some legal issues]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>440</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1330389154.5692";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>457</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>118.93.177.109</wp:comment_author_IP>
			<wp:comment_date>2012-03-20 20:05:11</wp:comment_date>
			<wp:comment_date_gmt>2012-03-20 07:05:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="#comment-440" rel="nofollow">@Roman Gavrilov </a> 
Source is now available on Git Hub https://github.com/PeteGoo/Workflow-Service-Tracking-Viewer]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1332227111.479";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1642</wp:comment_id>
			<wp:comment_author><![CDATA[Mike Nooney]]></wp:comment_author>
			<wp:comment_author_email>mike.nooney@payglobal.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.payglobal.com</wp:comment_author_url>
			<wp:comment_author_IP>123.100.99.97</wp:comment_author_IP>
			<wp:comment_date>2012-05-18 11:48:19</wp:comment_date>
			<wp:comment_date_gmt>2012-05-17 22:48:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[One thing I noticed is that the TrackingViewer web page did not work for me in IE9. This baffled me for a while as I thought it was something else. Loading the trackingviewer url in Chrome worked fine.
It may be that our IE setup is locked down in some way.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337294899.9525";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1643</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>58.28.164.27</wp:comment_author_IP>
			<wp:comment_date>2012-05-18 11:58:30</wp:comment_date>
			<wp:comment_date_gmt>2012-05-17 22:58:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[thanks mike, i'll have a look]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1642</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337295510.6757";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1665</wp:comment_id>
			<wp:comment_author><![CDATA[Philip Nelson]]></wp:comment_author>
			<wp:comment_author_email>panmanphilip@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://panmanphil.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>99.111.217.84</wp:comment_author_IP>
			<wp:comment_date>2012-11-03 03:26:14</wp:comment_date>
			<wp:comment_date_gmt>2012-11-02 14:26:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Interesting, I'll take a deeper dive soon. I have prepared something similar as a WCF Behavior instead of a HTTP module and will unveil at the Chippewa Valley Code Camp this weekend. Different goal for the tracking, but I wonder if it could be added to your project.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1351880215.0129";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1351866374.5987";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1666</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>27.252.240.250</wp:comment_author_IP>
			<wp:comment_date>2012-11-03 07:19:10</wp:comment_date>
			<wp:comment_date_gmt>2012-11-02 18:19:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Cool. I'd be interested to hear your ideas.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1665</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1351880350.559";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Macros getting dropped in Visual Studio v.Next (Dev 11)</title>
		<link>http://blog.petegoo.com/index.php/2011/10/05/macros-getting-dropped-in-visual-studio-v-next-dev-11/</link>
		<pubDate>Wed, 05 Oct 2011 07:12:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/index.php/2011/10/05/macros-getting-dropped-in-visual-studio-v-next-dev-11/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Looks like Macros are getting dropped in the next version of Visual Studio. Makes sense but I guess I’ll have to move the one or two macros I use onto commands in a package or add-in.</p>  <p><a href="http://www.infoq.com/news/2011/10/VS-Macros">http://www.infoq.com/news/2011/10/VS-Macros</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>290</wp:post_id>
		<wp:post_date>2011-10-05 20:12:48</wp:post_date>
		<wp:post_date_gmt>2011-10-05 07:12:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>macros-getting-dropped-in-visual-studio-v-next-dev-11</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="dev11"><![CDATA[Dev11]]></category>
		<category domain="post_tag" nicename="dev11"><![CDATA[Dev11]]></category>
		<category domain="category" nicename="productivity"><![CDATA[Productivity]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="post_tag" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="category" nicename="vsx"><![CDATA[VSX]]></category>
		<category domain="post_tag" nicename="vsx"><![CDATA[VSX]]></category>
	</item>
	<item>
				<title>Arghhh! Simultaneous Connection Limit in IIS (Windows 7)</title>
		<link>http://blog.petegoo.com/index.php/2011/11/10/arghhh-simultaneous-connection-limit-in-iis-windows-7/</link>
		<pubDate>Thu, 10 Nov 2011 09:27:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/index.php/2011/11/10/arghhh-simultaneous-connection-limit-in-iis-windows-7/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I’ve been playing with <a title="SignalR" href="https://github.com/SignalR" target="_blank">SignalR</a> recently and it drives me nuts that I can’t have more than a few simultaneous long polling requests open to the IIS server on Windows 7. It stops responding after about 2 clients. Even IIS Express supports unlimited simultaneous connections but we need AppFabric support.</p>  <p>We would seriously consider using it for our messaging solution but on a single machine developer install, we would need to come up with another solution for our many client apps.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>298</wp:post_id>
		<wp:post_date>2011-11-10 22:27:36</wp:post_date>
		<wp:post_date_gmt>2011-11-10 09:27:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>arghhh-simultaneous-connection-limit-in-iis-windows-7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="asp-net"><![CDATA[ASP.Net]]></category>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.Net]]></category>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="iis"><![CDATA[IIS]]></category>
		<category domain="post_tag" nicename="signalr"><![CDATA[SignalR]]></category>
		<wp:comment>
			<wp:comment_id>364</wp:comment_id>
			<wp:comment_author><![CDATA[Mario]]></wp:comment_author>
			<wp:comment_author_email>mariocannistra@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>188.65.1.1</wp:comment_author_IP>
			<wp:comment_date>2011-11-11 00:29:49</wp:comment_date>
			<wp:comment_date_gmt>2011-11-10 11:29:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Did you try calling IIS 7 on a WinServer ? I reached 40,000 thousands conns calling from an 8 logical cores client (laptop) to an 24 logical cores with Win Srv 2008 R2 ... and i did not complete my tests yet ! :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1320953691.6758";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1320924589.1256";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>365</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>58.28.164.27</wp:comment_author_IP>
			<wp:comment_date>2011-11-11 08:35:57</wp:comment_date>
			<wp:comment_date_gmt>2011-11-10 19:35:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, yes I was sure it would work awesomely on server.It's just that we have dev tools for our clients for whom we'll have to come up with another solution.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>364</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1320953757.0597";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>More efficient file enumeration in .Net 4</title>
		<link>http://blog.petegoo.com/index.php/2011/11/18/more-efficient-file-enumeration-in-net-4/</link>
		<pubDate>Fri, 18 Nov 2011 09:39:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/index.php/2011/11/18/more-efficient-file-enumeration-in-net-4/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This may be basics to some people but I thought it was worth mentioning. I was writing some simple code recently to compare the files in a remote directory with those in a local directory to determined if the remote was newer in any way. This seemed like a really simple problem so I made my first stab at it.</p>  <pre class="brush: csharp;">return (from remoteFile in Directory.GetFiles(remotePath)
        join localFile in Directory.GetFiles(localPath) 
            on Path.GetFileName(remoteFile) equals Path.GetFileName(localFile)
        where File.GetLastWriteTimeUtc(remotePath) &gt; File.GetLastWriteTimeUtc(localPath)
        select remoteFile).Any();</pre>

<p>&#160;</p>

<p>It became very apparent that there were some performance issues when running this code, especially when the remote location introduces any form of latency. The first issue is with Directory.GetFiles, if you actually reflect this method you will see that it ultimately calls the following:</p>

<pre class="brush: csharp;">return new List&lt;string&gt;(FileSystemEnumerableFactory.CreateFileNameIterator(path, userPathOriginal, searchPattern, includeFiles, includeDirs, searchOption)).ToArray();</pre>

<p>The existence of the ToArray means the full file list will be enumerated before the method returns, however we only care if any file has changed so it would be better if we had an enumerator so we could exit early when the first newer file is found. This is also true when performing the join as this will enumerate the joined collection first before enumerating the full original collection of remote files and then joining them.</p>

<p>We could solve the above issues using the new <a title="Directory.EnumerateFiles on MSDN" href="http://msdn.microsoft.com/en-us/library/system.io.directory.enumeratefiles.aspx" target="_blank">Directory.EnumerateFiles</a> method which will return an enumerator that will yield each file as it is enumerated. We could also get rid of the join and enumerate all the local files first before in a separate operation to allow the more expensive remote enumeration happen in sequence.</p>

<p>The next problem in the original attempt is that we are returning to the remote files to call another operation to evaluate the last write time stamp on the file metadata. This requires us to return to the remote file system and incur the same latency per file. I originally tried to solve this problem using the <a href="http://www.codeproject.com/KB/files/FastDirectoryEnumerator.aspx?msg=3218547" target="_blank">Fast Directory Enumerator on code project</a> which allowed me to enumerate the list of remote files at the same time as retrieving the file info, thus removing the need to return to the scene of the crime. This seemed to work ok but I was having an issue with it not completing the remote file enumeration sequence and discovered that there is actually an implementation introduced in .Net 4. The very well hidden <a title="DirectoryInfo.EnumerateFiles on MSDN" href="http://msdn.microsoft.com/en-us/library/system.io.directoryinfo.enumeratefiles.aspx" target="_blank">EnumerateFiles</a> on DirectoryInfo was the answer.</p>

<pre class="brush: csharp;">var localFiles = new DirectoryInfo(localPath).GetFiles();

return new DirectoryInfo(remotePath).EnumerateFiles()
    .Any(remoteFile =&gt; (from localFile in localFiles
                        where localFile.Name == remoteFile.Name 
                        &amp;&amp; remoteFile.LastWriteTimeUtc &gt; localFile.LastWriteTimeUtc
                        select remoteFile).Any());</pre>

<p>Notice the remote files retrieval now uses the EnumerateFiles method on DirectoryInfo. This allows us to exit when the first item matches the condition in the Any clause.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>299</wp:post_id>
		<wp:post_date>2011-11-18 22:39:59</wp:post_date>
		<wp:post_date_gmt>2011-11-18 09:39:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>more-efficient-file-enumeration-in-net-4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="net"><![CDATA[.Net]]></category>
		<category domain="post_tag" nicename="bcl"><![CDATA[BCL]]></category>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="file-system"><![CDATA[File System]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:comment>
			<wp:comment_id>1542</wp:comment_id>
			<wp:comment_author><![CDATA[WiXing Lyrical (part 1) &laquo; Kiwi.NET]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://stefsewell.com/2012/04/17/wixing-lyrical-part-1/</wp:comment_author_url>
			<wp:comment_author_IP>72.232.7.96</wp:comment_author_IP>
			<wp:comment_date>2012-04-18 15:47:10</wp:comment_date>
			<wp:comment_date_gmt>2012-04-18 02:47:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] going to drill into the bootstrapper, Pete has already discussed some of the performance aspects here. Instead we’ll walk through the process of creating an MSI to replace the ClickOnce based [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1334717230.629";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1334717292.0197";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Building an Auto Complete control with Reactive Extensions (Rx)</title>
		<link>http://blog.petegoo.com/index.php/2011/11/22/building-an-auto-complete-control-with-reactive-extensions-rx/</link>
		<pubDate>Tue, 22 Nov 2011 10:28:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/index.php/2011/11/22/building-an-auto-complete-control-with-reactive-extensions-rx/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I have been meaning to get into <a title="Ractive Extensions" href="http://msdn.microsoft.com/en-us/data/gg577609" target="_blank">Rx</a> for a while now and haven’t quite found the excuse or opportunity to do so. While playing with <a title="SignalR" href="https://github.com/SignalR/SignalR" target="_blank">SignalR</a> it became apparent that Rx was something that could help and while I was researching it I seen a lot of people talking about using Rx in UI frameworks and I thought, hmmm, that sounds interesting.</p>  <p>So I set myself a challenge, I wanted to use Rx to create an auto-complete WPF control with some of the major use cases I have seen in these types of controls.</p>  <h3>The App Shell</h3>  <p>First thing I was going to need was a WPF application with a MainWindow that would hold my text box, the results and a log window.</p>  <p>&#160;<a href="http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture1.jpg"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto; padding-top: 0px" title="CropperCapture[1]" border="0" alt="CropperCapture[1]" src="http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture1_thumb.jpg" width="478" height="320" /></a></p>  <p>The XAML looks something like this:</p>  <pre class="brush: xml;">&lt;Window
    x:Class=&quot;AutoCompleteWithRx.MainWindow&quot;
    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
    Title=&quot;AutoComplete with Rx&quot;
    Height=&quot;451&quot;
    Width=&quot;825&quot;
    xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;
    xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;
    xmlns:AutoCompleteWithRx=&quot;clr-namespace:AutoCompleteWithRx&quot;
    mc:Ignorable=&quot;d&quot;
    d:DataContext=&quot;{d:DesignInstance AutoCompleteWithRx:AutoCompleteViewModel}&quot;
    FocusManager.FocusedElement=&quot;{Binding ElementName=SearchBox}&quot;&gt;
    &lt;Grid&gt;
        &lt;Grid.RowDefinitions&gt;
            &lt;RowDefinition
                Height=&quot;Auto&quot; /&gt;
            &lt;RowDefinition /&gt;
        &lt;/Grid.RowDefinitions&gt;
        &lt;Grid.ColumnDefinitions&gt;
            &lt;ColumnDefinition /&gt;
            &lt;ColumnDefinition /&gt;
        &lt;/Grid.ColumnDefinitions&gt;
        &lt;TextBlock
            FontFamily=&quot;Segoe WP Light&quot;
            FontSize=&quot;26.667&quot;
            Text=&quot;Auto-Complete Sample&quot;
            Grid.ColumnSpan=&quot;2&quot; 
            
            /&gt;

        &lt;StackPanel
            Grid.Row=&quot;2&quot;&gt;
            &lt;Label&gt;Search&lt;/Label&gt;
            &lt;TextBox
                x:Name=&quot;SearchBox&quot;
                Text=&quot;{Binding SearchText, UpdateSourceTrigger=PropertyChanged}&quot;/&gt;
            &lt;ProgressBar Height=&quot;19&quot; IsIndeterminate=&quot;True&quot;/&gt;
            &lt;ListBox
                ItemsSource=&quot;{Binding SearchResults}&quot; /&gt;
        &lt;/StackPanel&gt;
        &lt;StackPanel Grid.Column=&quot;1&quot; Orientation=&quot;Vertical&quot; Grid.Row=&quot;1&quot; d:LayoutOverrides=&quot;Height&quot;&gt;
            &lt;Label&gt;Log&lt;/Label&gt;
            &lt;ListBox
                ItemsSource=&quot;{Binding LogOutput}&quot; /&gt;
        &lt;/StackPanel&gt;
    &lt;/Grid&gt;
&lt;/Window&gt;</pre>

<p>So that is basically the view for now. I have cheated and just instantiated my viewmodel in the code behind class for now.</p>

<pre class="brush: csharp;">public partial class MainWindow : Window {
    public MainWindow() {
        InitializeComponent();
        DataContext = new AutoCompleteViewModel();
    }
}</pre>

<p>Now that we have a window I need to get my view model up to scratch. I started with simply satisfying the data properties required by my form.</p>

<pre class="brush: csharp;">public class AutoCompleteViewModel : INotifyPropertyChanged {

    private string searchText;

    public string SearchText {
        get { return searchText; }
        set {
            if (searchText == value) {
                return;
            }
            searchText = value;
            NotifyPropertyChanged(&quot;SearchText&quot;);
        }
    }

    private readonly ObservableCollection&lt;string&gt; logOutput = new ObservableCollection&lt;string&gt;();

    public ObservableCollection&lt;string&gt; LogOutput {
        get { return logOutput; }
    }

    private readonly ObservableCollection&lt;string&gt; searchResults = new ObservableCollection&lt;string&gt;();

    public ObservableCollection&lt;string&gt; SearchResults {
        get { return searchResults; }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void NotifyPropertyChanged(string propertyName) {
        if (PropertyChanged != null) {
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}</pre>

<h3>&#160;</h3>

<h3>Subscribing to Property Changed Events using Rx</h3>

<h3></h3>

<p>OK. So that is simple enough but now I need to make my textbox do something when the user types into it. Before I start doing this though I will need to add Rx to my project. Right click the project choose “Manage <a title="Get NuGet if you don&#39;t have it" href="http://www.nuget.org" target="_blank">Nuget</a> Packages” and search for Rx, install Rx-Main and Rx-WPF.</p>

<p>Let’s start by simply logging the fact that the user has typed something. Add a constructor to our view model class with the following code:</p>

<pre class="brush: csharp;">public AutoCompleteViewModel() {
    // Listen to all property change events on SearchText
    var searchTextChanged = Observable.FromEventPattern&lt;PropertyChangedEventHandler, PropertyChangedEventArgs&gt;(
        ev =&gt; PropertyChanged += ev,
        ev =&gt; PropertyChanged -= ev
        )
        .Where(ev =&gt; ev.EventArgs.PropertyName == &quot;SearchText&quot;);

    // Transform the event stream into a stream of strings (the input values)
    var input = searchTextChanged
        .Select(args =&gt; SearchText);

    // Log all events in the event stream to the Log viewer
    input.ObserveOn(DispatcherScheduler.Instance)
        .Subscribe(e =&gt; LogOutput.Insert(0, 
            string.Format(&quot;Text Changed. Current Value - {0}&quot;, e)));
}</pre>

<p>The first section of slightly unwieldy syntax creates an <a title="IObservable(Of T) on MSDN" href="http://msdn.microsoft.com/en-us/library/dd990377.aspx" target="_blank">IObservable</a> from the <a title="PropertyChanged" href="http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged.propertychanged.aspx" target="_blank">PropertyChanged</a> event of <a title="INotifyPropertyChanged" href="http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged.aspx" target="_blank">INotifyPropertyChanged</a> which our view model implements. You can think of the IObservable as a stream of events that will happen or a collection of future objects that will be added to each time the event is raised. Our code will then filter those events to only those concerning the SearchText that our textbox is bound to.</p>

<p>The next line transforms the type of the events in our IObservable from <a title="PropertyChangeEventsArgs" href="http://msdn.microsoft.com/en-us/library/system.componentmodel.propertychangedeventargs.aspx" target="_blank">PropertyChangeEventsArgs</a> to string, the content of the textbox. Much more useful.</p>

<p>Finally we need to subscribe to the event stream and do something with the string, firstly though we tell the subscription that we want to observe the events on the WPF dispatcher (This helper singleton comes from the Rx-WPF package). Then we simply provide an inline function to execute for each event, in our case inserting into the log stack which our LogOutput list box is bound to.</p>

<p>The result looks like this.</p>

<p><a href="http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture2.jpg"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto; padding-top: 0px" title="CropperCapture[2]" border="0" alt="CropperCapture[2]" src="http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture2_thumb.jpg" width="521" height="286" /></a></p>

<p>OK. So far so good. Now let’s add an actual search to the mix.</p>

<h3>Chaining the Asynchronous Search</h3>

<p>Before I add my search function I want to create a structure that will encapsulate the search term and it’s result.</p>

<pre class="brush: csharp;">public struct SearchResult {
    public string SearchTerm { get; set; }
    public IEnumerable&lt;string&gt; Results { get; set; } 
}</pre>

<p>Next I add my search function. For now I’ve just created a synchronous function but chances are you would be calling an external service with <a title="Asynchronous Design Pattern Overview" href="http://msdn.microsoft.com/en-us/library/aa719595(v=vs.71).aspx" target="_blank">Async</a> methods (BeginXXX and EndXXX) for which you should use the <a href="http://rxwiki.wikidot.com/101samples#toc10" target="_blank">FromAsyncPattern</a> method instead of the <a title="Run a method asynchronously on demand" href="http://rxwiki.wikidot.com/101samples#toc2" target="_blank">ToAsync</a> I am using.</p>

<pre class="brush: csharp;">private SearchResult DoSearch(string searchTerm) {
    return new SearchResult {
        SearchTerm = searchTerm,
        Results =
            phrases.Where(item =&gt; item.ToUpperInvariant().Contains(searchTerm.ToUpperInvariant())).ToArray()
    };
}

private readonly string[] phrases = new[] {
    &quot;The badger knows something&quot;,
    &quot;Your head looks like a pineapple&quot;,
    &quot;etc...&quot;,
};</pre>

<p>And now for the magic. To invoke our search we add the following to our constructor:</p>

<pre class="brush: csharp;">// Setup an Observer for the search operation
var search = Observable.ToAsync&lt;string, SearchResult&gt;(DoSearch);

// Chain the input event stream and the search stream
var results = from searchTerm in input
              from result in search(searchTerm)
              select result;

// Log the search result and add the results to the results collection
results.ObserveOn(DispatcherScheduler.Instance)
.Subscribe(result =&gt; {
    searchResults.Clear();
    LogOutput.Insert(0, string.Format(&quot;Search for '{0}' returned '{1}' items&quot;, result.SearchTerm, result.Results.Count()));
    result.Results.ToList().ForEach(item =&gt; searchResults.Add(item));
    }
);</pre>

<p align="left">Here we firstly call <a title="Run a method asynchronously on demand" href="http://rxwiki.wikidot.com/101samples#toc2" target="_blank">ToAsync</a>, this will create a function that takes a string (our search term) and returns an Observable that will only ever produce one event (the Completed / End) and then close.</p>

<p align="left">We chain the incoming input stream with the result of the search function using <a href="http://msdn.microsoft.com/en-us/library/bb308959.aspx#linqoverview_topic5" target="_blank">simplified LINQ syntax</a> and produce a new observable of SearchResult. We then observe the result, logging and updating the autocomplete items.</p>

<p>The result is this:</p>

<p><a href="http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture4.jpg"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto; padding-top: 0px" title="CropperCapture[4]" border="0" alt="CropperCapture[4]" src="http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture4_thumb.jpg" width="477" height="302" /></a></p>

<p>OK. So this is round about where my mind exploded and grey matter started to leak out of my ears. Basically what is happening is we are treating these incoming events as collections before they actually happen, then we can manipulate them using LINQ and even chain the events much like pipelining in UNIX / Powershell.</p>

<p>We’re not done yet. We still have a number of issues.</p>

<h3>Using Throttle to enforce an idle period before searching</h3>

<p>One of the issues you can see in the above screenshot is that the search was done after every single key press. The owner of the service we are calling will not be too happy with us flooding them with unnecessary searches, so how do we stop this from happening. Typically we would create a timer that would wait for a period of inactivity before searching, we would have to reset the timer every time the user typed something so that the search is not performed for each of the previous characters and there would be quite a few lines of code required to actually do this.</p>

<p>With Rx we can use the <a href="http://rxwiki.wikidot.com/101samples#toc29" target="_blank">Throttle</a> operator which will quite effectively do exactly the behaviour we want for free. We change our previous declaration of the input stream to add the Throttle method.</p>

<pre class="brush: csharp;">var input = searchTextChanged
    .Throttle(TimeSpan.FromMilliseconds(400))
    .Select(args =&gt; SearchText);</pre>

<p align="left">Now if we test we should get something like the following:</p>

<p><a href="http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture5.jpg"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto; padding-top: 0px" title="CropperCapture[5]" border="0" alt="CropperCapture[5]" src="http://blog.petegoo.com/wp-content/uploads/2011/11/CropperCapture5_thumb.jpg" width="428" height="182" /></a></p>

<p>That was too easy.</p>

<h3>Merging two event streams</h3>

<p>The next requirement was that I may want a larger throttle timeout for strings of less than 3 characters as people tend to type slower at the start of a search. To do this I needed to split my input stream into two different event streams that could be throttled differently.</p>

<pre class="brush: csharp;">var input = searchTextChanged
    .Where(ev =&gt; SearchText == null || SearchText.Length &lt; 4)
    .Throttle(TimeSpan.FromSeconds(3))
    .Merge(searchTextChanged
        .Where(ev =&gt; SearchText != null &amp;&amp; SearchText.Length &gt;= 4)
        .Throttle(TimeSpan.FromMilliseconds(400)))
    .Select(args =&gt; SearchText);</pre>

<p>So above I have simply cut the searchTextChanged stream 2 different ways, throttled them differently and then I can use the <a title="Merge" href="http://rxwiki.wikidot.com/101samples#toc41" target="_blank">Merge</a> operator to join the streams back together again into one.</p>

<h3></h3>

<h3>Creating a Reactive ICommand for MVVM</h3>

<p>The next requirement is that the search should be executed immediately if the user hits the <strong><em>enter</em></strong> key. To do this I decided to use the <a href="http://msdn.microsoft.com/en-us/magazine/dd419663.aspx" target="_blank">MVVM ICommand</a> pattern. We need to add the following Input <a title="KeyBinding on MSDN" href="http://msdn.microsoft.com/en-us/library/system.windows.input.keybinding.aspx" target="_blank">KeyBinding</a> to the TextBox in our XAML so that the enter key will be picked up and we point it at the command we will write below.</p>

<pre class="brush: xml;">&lt;TextBox
    x:Name=&quot;SearchBox&quot;
    Text=&quot;{Binding SearchText, UpdateSourceTrigger=PropertyChanged}&quot;&gt;
    &lt;TextBox.InputBindings&gt;
        &lt;KeyBinding
            Command=&quot;{Binding TextBoxEnterCommand}&quot;
            Key=&quot;Enter&quot; /&gt;
    &lt;/TextBox.InputBindings&gt;
&lt;/TextBox&gt;</pre>

<p>The next thing we need to do is create our own command type. If you use an MVVM framework that understands Rx like ReactiveUI then you should get this for free but implementing a simple version yourself is not difficult. We simply take the <a title="RelayCommand" href="http://msdn.microsoft.com/en-us/magazine/dd419663.aspx#id0090030" target="_blank">RelayCommand</a> defined by Josh Smith and add a <a title="Subject(Of T)" href="http://rxwiki.wikidot.com/101samples#toc48" target="_blank">Subject&lt;T&gt;</a> exposed as an Observable.</p>

<pre class="brush: csharp;">public class ReactiveRelayCommand : ICommand {
    private readonly Action&lt;object&gt; execute;
    private readonly Predicate&lt;object&gt; canExecute;
    
    public ReactiveRelayCommand(Action&lt;object&gt; execute)
        : this(execute, null) {
    }

    public ReactiveRelayCommand(Action&lt;object&gt; execute, Predicate&lt;object&gt; canExecute) {
        if (execute == null)
            throw new ArgumentNullException(&quot;execute&quot;);

        this.execute = execute;
        this.canExecute = canExecute;
    }

    [DebuggerStepThrough]
    public bool CanExecute(object parameter) {
        return canExecute == null || canExecute(parameter);
    }

    public event EventHandler CanExecuteChanged {
        add { CommandManager.RequerySuggested += value; }
        remove { CommandManager.RequerySuggested -= value; }
    }

    public void Execute(object parameter) {
        execute(parameter);
        executed.OnNext(parameter);
    }

    private readonly Subject&lt;object&gt; executed = new Subject&lt;object&gt;();

    public IObservable&lt;object&gt; Executed {
        get { return executed; }
    }
}</pre>

<p>Notice that it exactly the same as the standard RelayCommand except that we use a Subject&lt;object&gt; as the backing implementation for our IObservable. We call <a title="OnNext of IObserver" href="http://msdn.microsoft.com/en-us/library/dd782792.aspx" target="_blank">OnNext</a> whenever the command is Executed.</p>

<p>Add the following field and property to the viewmodel class to store our command:</p>

<pre class="brush: csharp;">private ReactiveRelayCommand textBoxEnterCommand;
public ReactiveRelayCommand TextBoxEnterCommand {
    get { return textBoxEnterCommand; }
    set { textBoxEnterCommand = value; }
}</pre>

<p>Then at the start of our constructor we setup the command itself:</p>

<pre class="brush: csharp;">// Setup the command for the enter key on the textbox
textBoxEnterCommand = new ReactiveRelayCommand(obj =&gt; { });</pre>

<p>Next we need to change our input event stream to take into account our command and merge that with our SearchText property change events so that either can fire our search:</p>

<pre class="brush: csharp;">// Transform the event stream into a stream of strings (the input values)
var input = searchTextChanged
    .Where(ev =&gt; SearchText == null || SearchText.Length &lt; 4)
    .Throttle(TimeSpan.FromSeconds(3))
    .Merge(searchTextChanged
        .Where(ev =&gt; SearchText != null &amp;&amp; SearchText.Length &gt;= 4)
        .Throttle(TimeSpan.FromMilliseconds(400)))
    .Select(args =&gt; SearchText)
    .Merge(
        textBoxEnterCommand.Executed.Select(e =&gt; SearchText));</pre>

<p>Notice we have just added the last line to merge the Executed observable on our command. Now when we run we can type a single character and hit enter if we do not want to wait for the idle period. How easy was that? Are we done? Almost.</p>

<h3></h3>

<h3>Removing duplicate consecutive events</h3>

<p>We still have an issue that when the user presses Enter, the idle timeout will expire some time later and we will get another event firing, essentially performing our search twice. So how do we stop the second duplicate event from being fired, easy, we just use <a title="DistinctUntilChanged" href="http://msdn.microsoft.com/en-us/library/system.reactive.linq.observable.distinctuntilchanged(v=vs.103).aspx" target="_blank">DistinctUntilChanged</a>. </p>

<p>We want a distinct search but we still want to allow the same search to be done later if the user tries another search in between. In other words we can have the same search done twice as long as they aren’t consecutive searches.</p>

<pre class="brush: csharp;">// Transform the event stream into a stream of strings (the input values)
var input = searchTextChanged
    .Where(ev =&gt; SearchText == null || SearchText.Length &lt; 4)
    .Throttle(TimeSpan.FromSeconds(3))
    .Merge(searchTextChanged
        .Where(ev =&gt; SearchText != null &amp;&amp; SearchText.Length &gt;= 4)
        .Throttle(TimeSpan.FromMilliseconds(400)))
    .Select(args =&gt; SearchText)
    .Merge(
        textBoxEnterCommand.Executed.Select(e =&gt; SearchText))
    .DistinctUntilChanged();</pre>

<p>&#160;</p>

<h3>Cancelling previous searches with TakeUntil</h3>

<p>The last issue here is that when searches return out of sequence, we could get the wrong results displayed. For example, the user searches for <strong>cr</strong> hits enter but then types <strong>crazy</strong> and hits enter. If the first search is taking a long time because of the number of results then the results for it will end up being displayed after the actual current search term is displayed. To simulate this we could add some latency to our search.</p>

<pre class="brush: csharp;">private readonly Random random = new Random(5);
private SearchResult DoSearch(string searchTerm) {
    Thread.Sleep(random.Next(100, 500)); // Simulate latency
    return new SearchResult {
        SearchTerm = searchTerm,
        Results =
            phrases.Where(item =&gt; item.ToUpperInvariant().Contains(searchTerm.ToUpperInvariant())).ToArray()
    };
}</pre>

<p>To solve this we need to stop the Async stream when more input is given, this is pretty easy with the TakeUntil operator. Take operators define a completion for an event stream. In the case of an Async operation this will effectively cancel the Async subscription. TakeUntil takes an observable as input such that an event on that stream will complete the current stream. To implement this change we simply say the we TakeUntil the <strong><em>input</em></strong> stream in our chaining code.</p>

<pre class="brush: csharp;">// Chain the input event stream and the search stream, cancelling searches when input is received
var results = from searchTerm in input
              from result in search(searchTerm).TakeUntil(input)
              select result;</pre>

<h3></h3>

<h3>Summary</h3>

<p>So we have managed to create the guts of an auto-complete control using Rx in a much more declarative way by responding to events in observables instead of writing lots of imperative code with little items of state sitting about to represent our state machine.</p>

<p>All of the heavy work can be easily seen in a single declaration of intent:</p>

<pre class="brush: csharp;">// Setup the command for the enter key on the textbox
textBoxEnterCommand = new ReactiveRelayCommand(obj =&gt; { });

// Listen to all property change events on SearchText
var searchTextChanged = Observable.FromEventPattern&lt;PropertyChangedEventHandler, PropertyChangedEventArgs&gt;(
    ev =&gt; PropertyChanged += ev,
    ev =&gt; PropertyChanged -= ev
    )
    .Where(ev =&gt; ev.EventArgs.PropertyName == &quot;SearchText&quot;);

// Transform the event stream into a stream of strings (the input values)
var input = searchTextChanged
    .Where(ev =&gt; SearchText == null || SearchText.Length &lt; 4)
    .Throttle(TimeSpan.FromSeconds(3))
    .Merge(searchTextChanged
        .Where(ev =&gt; SearchText != null &amp;&amp; SearchText.Length &gt;= 4)
        .Throttle(TimeSpan.FromMilliseconds(400)))
    .Select(args =&gt; SearchText)
    .Merge(
        textBoxEnterCommand.Executed.Select(e =&gt; SearchText))
    .DistinctUntilChanged();

// Log all events in the event stream to the Log viewer
input.ObserveOn(DispatcherScheduler.Instance)
    .Subscribe(e =&gt; LogOutput.Insert(0, 
        string.Format(&quot;Text Changed. Current Value - {0}&quot;, e)));

// Setup an Observer for the search operation
var search = Observable.ToAsync&lt;string, SearchResult&gt;(DoSearch);

// Chain the input event stream and the search stream, cancelling searches when input is received
var results = from searchTerm in input
              from result in search(searchTerm).TakeUntil(input)
              select result;

// Log the search result and add the results to the results collection
results.ObserveOn(DispatcherScheduler.Instance)
.Subscribe(result =&gt; {
    searchResults.Clear();
    LogOutput.Insert(0, string.Format(&quot;Search for '{0}' returned '{1}' items&quot;, result.SearchTerm, result.Results.Count()));
    result.Results.ToList().ForEach(item =&gt; searchResults.Add(item));
    }
);</pre>

<p>&#160;</p>

<p>Lots of the ideas and even the odd piece of code were taken from:</p>

<ul>
  <li><a title="Bart De Smet - Blog" href="http://bartdesmet.net/blogs/bart/default.aspx" target="_blank">Bart De Smet</a> on <a title="DevCamp 2010 Keynote - Rx: Curing your asynchronous programming blues" href="http://channel9.msdn.com/Blogs/codefest/DC2010T0100-Keynote-Rx-curing-your-asynchronous-programming-blues" target="_blank">Curing Asynchronous Blues</a> </li>

  <li><a href="http://stackoverflow.com/questions/1763411/reactive-extensions-rx-mvvm" target="_blank">Stack Overflow</a> 

    <br />

    <div class="xdownload">
      <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:F60BB8FA-6F02-4999-8F5E-9DD4E92C4DA7:fc7f2917-f963-4fbb-b889-f5b061331d26" class="wlWriterEditableSmartContent"><div><a href="http://blog.petegoo.com/wp-content/uploads/2011/11/AutoCompleteBlog.zip" target="_self">AutoCompleteBlog.zip</a></div></div>
    </div>
  </li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>309</wp:post_id>
		<wp:post_date>2011-11-22 23:28:08</wp:post_date>
		<wp:post_date_gmt>2011-11-22 10:28:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>building-an-auto-complete-control-with-reactive-extensions-rx</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[C#]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="category" nicename="rx"><![CDATA[Rx]]></category>
		<category domain="post_tag" nicename="rx"><![CDATA[Rx]]></category>
		<category domain="category" nicename="wpf"><![CDATA[WPF]]></category>
		<category domain="post_tag" nicename="wpf"><![CDATA[WPF]]></category>
		<wp:comment>
			<wp:comment_id>374</wp:comment_id>
			<wp:comment_author><![CDATA[Paul Betts]]></wp:comment_author>
			<wp:comment_author_email>paul@paulbetts.org</wp:comment_author_email>
			<wp:comment_author_url>http://www.reactiveui.net</wp:comment_author_url>
			<wp:comment_author_IP>24.19.48.31</wp:comment_author_IP>
			<wp:comment_date>2011-11-24 17:47:58</wp:comment_date>
			<wp:comment_date_gmt>2011-11-24 04:47:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great post! If you want to take these ideas a step further, check out ReactiveUI - it makes the types of things you're doing a bit cleaner since it removes many of the FromEventPatterns, as well as gives you an ICommand that works similarly to your ReactiveRelayCommand (though ICommand gets even more powerful when you start defining the CanExecute in terms of IObservable and you can relate CanExecute to the values of properties). 

If you think it's cool, let me know, and if you think it's lame, *definitely* let me know, as I'm working on making a rearchitected version for Win8 and I would love to hear what people like / don't like about RxUI.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1322110078.1221";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1322122773.0998";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1663</wp:comment_id>
			<wp:comment_author><![CDATA[Creating an Autocomplete search box for Windows Store apps in XAML | PeteGoo]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.petegoo.com/index.php/2012/10/20/creating-an-autocomplete-search-box-for-windows-store-apps-in-xaml/</wp:comment_author_url>
			<wp:comment_author_IP>96.31.35.44</wp:comment_author_IP>
			<wp:comment_date>2012-10-20 23:22:01</wp:comment_date>
			<wp:comment_date_gmt>2012-10-20 10:22:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] modified the code from my previous post on creating an AutoComplete search box using Reactive Extensions to work in XAML under WinRT in a Windows Store (Metro) app. This uses the latest version of Rx and [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1350728662.9723";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1350728521.7671";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>C# Static Field Initializers</title>
		<link>http://blog.petegoo.com/index.php/2012/01/18/c-static-field-initializers/</link>
		<pubDate>Wed, 18 Jan 2012 09:14:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=310</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I hit a problem recently where a singleton I was calling from an assembly resolver was throwing an exception. It turned out that the sync object used in the lock for the <a title="MSDN C# Singleton Pattern" href="http://msdn.microsoft.com/en-us/library/ff650316.aspx" target="_blank">singleton pattern</a> was null. How was this possible? Look at the code below:</p>  <pre class="brush: csharp;">using System;

public sealed class Singleton
{
   private static volatile Singleton instance;
   private static readonly object syncRoot = new Object();

   private Singleton() {}

   public static Singleton Instance
   {
      get 
      {
         if (instance == null) 
         {
            lock (syncRoot) 
            {
               if (instance == null) 
                  instance = new Singleton();
            }
         }

         return instance;
      }
   }
}</pre>

<p>How can this be, my static readonly field should be set by the field initializer. This should be run before it’s first usage. Normally, this is true but for some reason this was not the case. The C#spec though gives us a workaround, implement a static constructor. The <a href="http://msdn.microsoft.com/en-us/library/aa645612(v=vs.71).aspx" target="_blank">section on static constructors</a> states: </p>

<blockquote>
  <p>If a class contains any static fields with initializers, those initializers are executed in textual order immediately prior to executing the static constructor.</p>
</blockquote>

<p>Therefore, if we add a static constructor to our Singleton class, we get guaranteed initialization of the static field initializers before it is run, also:</p>

<blockquote>
  <p>The static constructor for a class executes at most once in a given application domain. The execution of a static constructor is triggered by the first of the following events to occur within an application domain:</p>

  <ul>
    <li>An instance of the class is created. </li>

    <li>Any of the static members of the class are referenced. </li>
  </ul>
</blockquote>

<p>Therefore our static constructor will run before our singleton Instance property.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>310</wp:post_id>
		<wp:post_date>2012-01-18 22:14:41</wp:post_date>
		<wp:post_date_gmt>2012-01-18 09:14:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>c-static-field-initializers</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[C#]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
	</item>
	<item>
				<title>Creating a .Net queryable client for ASP.Net Web API oData services</title>
		<link>http://blog.petegoo.com/index.php/2012/03/11/creating-a-net-queryable-client-for-asp-net-web-api-odata-services/</link>
		<pubDate>Sat, 10 Mar 2012 22:00:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=314</guid>
		<description></description>
		<content:encoded><![CDATA[<h5>TL;DR: How to create a client Linq api for querying IQueryable ASP.Net Web API rest services in very few lines of code using JSON.Net and Linq2Rest.</h5>  <p>&#160;</p>  <p>The <a href="http://www.asp.net/mvc/mvc4" target="_blank">ASP.Net MVC4 Beta</a> was released recently and included the Beta release of <a title="ASP.Net Web API" href="http://www.asp.net/web-api" target="_blank">ASP.Net Web API</a>, formally known as the WCF Web API. Lots of people have already talked about the benefits of the Web API and how it has been built with <a title="Problem Solver on ASP.Net Web API" href="http://msmvps.com/blogs/theproblemsolver/archive/2012/03/09/getting-started-with-the-asp-net-web-api.aspx" target="_blank">simplicity</a>, <a title="WCF Web API on codeplex" href="http://wcf.codeplex.com/wikipage?title=WCF%20HTTP" target="_blank">transparency</a>, <a title="plugging in a JSON.Net formatter for Web API" href="http://blogs.msdn.com/b/henrikn/archive/2012/02/18/using-json-net-with-asp-net-web-api.aspx" target="_blank">extensibility</a> and <a title="ScottGu on web api" href="http://weblogs.asp.net/scottgu/archive/2012/02/23/asp-net-web-api-part-1.aspx" target="_blank">testability</a> in mind so I’ll not go into too many details about that here. </p>  <h3>Using ASP.Net Web Api instead of WCF Data Services</h3>  <h3></h3>  <p>One of the features that excites me about Web Api is the ability to expose an IQueryable on a Rest service and have Web Api automatically map queries in oData uri format to actual linq queries on the source i expose. For example, if my Web API controller looks like this:</p>  <pre class="brush: csharp;">public class PeopleController : ApiController {
    public IQueryable&lt;Person&gt; GetModels() {

        return people.AsQueryable();
    }

    private readonly Person[] people = new Person[] {
            new Person {
                Id = 1,
                FirstName = &quot;Peter&quot;,
                LastName = &quot;Goodman&quot;
            }, 
            new Person {
                Id = 2,
                FirstName = &quot;Peter&quot;,
                LastName = &quot;Skeeter&quot;
            }, 
            new Person {
                Id = 3,
                FirstName = &quot;Tony&quot;,
                LastName = &quot;Stark&quot;
            }, 
            new Person {
                Id = 4,
                FirstName = &quot;Frank&quot;,
                LastName = &quot;Grimes&quot;
            }, 
            new Person {
                Id = 5,
                FirstName = &quot;Doug&quot;,
                LastName = &quot;Kettle&quot;
            }, 
            new Person {
                Id = 6,
                FirstName = &quot;Finbar&quot;,
                LastName = &quot;Coole&quot;
            }, 
        };
}</pre>

<p>&#160;</p>

<p>Web Api will now let me access this resource and query it using oData syntax e.g.:</p>

<p><em>/api/People?$filter=FirstName eq ‘Peter'&amp;$orderby=LastName desc</em></p>

<p>This of course is just like the kind of thing you get out of WCF Data Services with a couple of very important differences.</p>

<ul>
  <li>Web API does not currently support all of the features of oData, e.g. projection and expand</li>

  <li><strong>Web API is highly configurable and extensible.</strong></li>

  <li>Web API does not currently have a formatter Atom+Xml format, although an implementation is on the <a title="The ASP.Net MVC Roadmap" href="http://aspnet.codeplex.com/wikipage?title=asp.net%20mvc%204%20roadmap" target="_blank">roadmap</a></li>

  <li><strong>There currently is no built in .Net client api for issuing Linq queries to Web API rest services</strong></li>
</ul>

<p>One of the pains of WCF Data Services has been the inability to configure or extend the implementation, for example it is very difficult or impossible to add your own formatter/serializer. With Web API, this kind of stuff is almost trivial.</p>

<p>The WCF Data Services client API (DataServiceContext) only allows you to use Atom+Xml which for a lot of purposes is extremely bloated in comparison to something like <a title="Javascript Object Notation" href="http://www.json.org/" target="_blank">JSON</a> or <a title="Google&#39;s Protocol Buffers" href="http://code.google.com/p/protobuf/" target="_blank">protobuf</a>.</p>

<p>Unfortunately there also is no equivalent to the DataServiceContext that allows you to query the above service in Web API, therefore you cannot use LINQ to query the above service. This is what we are going to build. </p>

<h3>Setting up the project</h3>

<p>Make sure you have ASP.Net MVC4 Beta installed and create a new ASP.Net MVC 4 application project. When you get prompted for the Project Template make sure to choose “Web API” and hit OK.</p>

<p>Under models add a new class called Person and add the following code.</p>

<pre class="brush: csharp;">public class Person {
    public int Id { get; set; }

    public string FirstName { get; set; }

    public string LastName { get; set; }
}</pre>

<p>Change the name of the ValuesController in the Controllers folder to PeopleController and add the code at the start of this article.</p>

<p>Run your project and in the browser change the url to something like the following remembering to use the hostname and port of your own project:</p>

<p><em>http://localhost:21449/api/People</em></p>

<p>You should see a list of the people we have defined.</p>

<p>Now we should be able to change this to the following to see only the ‘Peter’s</p>

<p><em>http://localhost:21449/api/People?$filter=FirstName = 'Peter'</em></p>

<p>You will notice that the output is in Xml. We want to customize this to allow Json</p>

<h3></h3>

<h3>Creating the JSON.Net formatter</h3>

<p>To create a json formatted output for our service we are going to use JSON.Net, the Web API team have already said that they are going to ship with JSON.Net as the default JSON formatter when it goes RTM. Therefore you can skip this section if you are working with the RTM version.</p>

<p>Firstly, using <a title="Nuget package manager" href="http://www.nuget.org/" target="_blank">Nuget package manager</a>, add a package dependency to your project on JSON.Net</p>

<p>Create a folder in your web project called Infrastructure and add a class called JsonNetFormatter. Paste in the code for this class only from <a title="Henrik on Using JSON.Net with ASP.Net Web API" href="http://blogs.msdn.com/b/henrikn/archive/2012/02/18/using-json-net-with-asp-net-web-api.aspx" target="_blank">Henrik’s article on the subject</a>.</p>

<p>In the global.asax.cs file in your project add the following code in the RegisterRoutes method to register the JSON.Net formatter before the current default one. </p>

<pre class="brush: csharp;">JsonSerializerSettings serializerSettings = new JsonSerializerSettings();
serializerSettings.Converters.Add(new IsoDateTimeConverter());

HttpConfiguration configuration = GlobalConfiguration.Configuration;

configuration.Formatters.Insert(0, new JsonNetFormatter(serializerSettings));</pre>

<p>You can test that works in <a title="Fiddler" href="http://fiddler2.com/fiddler2/" target="_blank">fiddler2</a> by starting fiddler, re-running the previous query in the browser (you may need to replace the hostname with ipv4.fiddler to see it), drag the session into the composer tab and change the accept header to </p>

<p><em>Accept: application/json</em></p>

<p>You should now see that we have JSON output.</p>

<h3>Creating the client application and api</h3>

<p>Add a new console application project to your solution named something sensible. This is going to be our .Net client.</p>

<p>To create our client side code we are going to need something that can take a LINQ query and convert it to the <a title="OData URI Conventions" href="http://www.odata.org/developers/protocols/uri-conventions" target="_blank">oData URI format</a>. In another project I am working on I have recently been using the excellent <a title="Linq2Rest on BitBucket" href="https://bitbucket.org/jjrdk/linq2rest" target="_blank">Linq2Rest</a> library written by <a title="Jacob Reimers&#39; Blog" href="http://www.reimers.dk/" target="_blank">Jacob Reimers</a>. He has written Linq2Rest to solve the problem of converting between IQueryables and OData URIs. Unfortunately the client and server pieces for Linq2Rest are in the same assembly so you will need to make your console app targets .Net 4.0 instead of the client profile in the project properties in order to support the dependency on System.Web.</p>

<p>Add a nuget package reference in your console app to Linq2Rest and Json.Net. </p>

<p>Next we need to create a matching JSON.Net deserializer for the Linq2Rest library so that it will match our server side implementation. This is just to ensure compatibility, you could of course reference the same common serializer settings etc. Create a folder in your console app called Infrastructure and add the following code for the JsonNetSerializerFactory and it’s serializer.</p>

<pre class="brush: csharp;">public class JsonNetSerializerFactory : ISerializerFactory {
    public ISerializer&lt;T&gt; Create&lt;T&gt;() {
        return new JsonNetSerializer&lt;T&gt;();
    }

    public class JsonNetSerializer&lt;T&gt; : ISerializer&lt;T&gt; {
        public T Deserialize(string input) {
            return JsonConvert.DeserializeObject&lt;T&gt;(input);
        }

        public IList&lt;T&gt; DeserializeList(string input) {
            return JsonConvert.DeserializeObject&lt;IList&lt;T&gt;&gt;(input);
        }
    }
}</pre>

<p>&#160;</p>

<p>Now we are ready to create our equivalent of the DataServiceContext. Add a new class to that project called PeopleContext and fill it out with the following code.</p>

<pre class="brush: csharp;">public class PeopleContext {
    private readonly RestContext&lt;Person&gt; restContext;

    public PeopleContext(Uri uri, Format format) {
        restContext = new RestContext&lt;Person&gt;(GetRestClient(uri, format), GetSerializerFactory(format));
    }

    public enum Format {
        Pox,
        Json
    }

    public static IRestClient GetRestClient(Uri uri, Format format) {
        switch (format) {
            case Format.Pox:
                return new XmlRestClient(uri);
            case Format.Json:
                return new JsonRestClient(uri);
            default:
                throw new NotImplementedException();
        }
    }

    public static ISerializerFactory GetSerializerFactory(Format format) {
        switch (format) {
            case Format.Pox:
                return new XmlSerializerFactory(knownTypes);
            case Format.Json:
                return new JsonNetSerializerFactory();

            default:
                throw new NotImplementedException();
        }
    }

    private static readonly IEnumerable&lt;Type&gt; knownTypes = new[] {
        typeof (Person)
    };

    public IQueryable&lt;Person&gt; People {
        get { return restContext.Query; }
    }

}</pre>

<p>Now we are ready to consume our new fancy pants context class. In the Program.cs add the following code to query the service and display the results. Remember to replace the hostname and port with your settings. I’ve used the ipv4.fiddler address to force fiddler to log the session, this of course won’t work if you don’t have fiddler running.</p>

<pre class="brush: csharp;">class Program {
    static void Main(string[] args) {
        PrintQuery(PeopleContext.Format.Pox);
        PrintQuery(PeopleContext.Format.Json);

        Console.ReadKey(true);
    }

    private static void PrintQuery(PeopleContext.Format wireFormat) {
        Console.WriteLine();
        Console.WriteLine(&quot;*** Querying in {0} format ***&quot;, wireFormat);
        Console.WriteLine();

        // Perform Query
        new PeopleContext(new Uri(&quot;http://ipv4.fiddler:14061/api/People&quot;), wireFormat)
            .People
            .Where(model =&gt; model.FirstName.StartsWith(&quot;Pe&quot;))
            .ToList()
            .ForEach(item =&gt; {
                Console.WriteLine(&quot;-----------------------------------&quot;);
                Console.WriteLine(&quot;Id:{0}&quot;, item.Id);
                Console.WriteLine(&quot;First Name:{0}&quot;, item.FirstName);
                Console.WriteLine(&quot;Last Name:{0}&quot;, item.LastName);
            });
        Console.WriteLine(&quot;-----------------------------------&quot;);
    }
}</pre>

<p>&#160;</p>

<p>Run the console app and you should see:</p>

<blockquote>
  <p>
    <br /></p>

  <p>
    <br />*** Querying in Pox format ***</p>

  <p>-----------------------------------
    <br />Id:1

    <br />First Name:Peter

    <br />Last Name:Goodman

    <br />-----------------------------------

    <br />Id:2

    <br />First Name:Peter

    <br />Last Name:Skeeter

    <br />-----------------------------------</p>

  <p>*** Querying in Json format ***</p>

  <p>-----------------------------------
    <br />Id:1

    <br />First Name:Peter

    <br />Last Name:Goodman

    <br />-----------------------------------

    <br />Id:2

    <br />First Name:Peter

    <br />Last Name:Skeeter

    <br />-----------------------------------</p>

  <p>
    <br /></p>
</blockquote>

<p>&#160;</p>

<p>And we’re done. You should be able to see in fiddler now that we have issued a request in each format (Xml and Json) and received the appropriate format in your response. I have even used this approach to implement a protobuf-net version for even greater speed and reduced payload.</p>

<p>You can get the source for this sample on GitHub</p>

<p><a href="https://github.com/PeteGoo/WebApiContext.Sample">https://github.com/PeteGoo/WebApiContext.Sample</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>314</wp:post_id>
		<wp:post_date>2012-03-11 11:00:19</wp:post_date>
		<wp:post_date_gmt>2012-03-10 22:00:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creating-a-net-queryable-client-for-asp-net-web-api-odata-services</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="linq"><![CDATA[Linq]]></category>
		<category domain="post_tag" nicename="linq2rest"><![CDATA[Linq2Rest]]></category>
		<category domain="category" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="category" nicename="odata"><![CDATA[ODAta]]></category>
		<category domain="post_tag" nicename="rest"><![CDATA[REST]]></category>
		<category domain="category" nicename="web-api"><![CDATA[Web API]]></category>
		<category domain="post_tag" nicename="web-api"><![CDATA[Web API]]></category>
		<wp:comment>
			<wp:comment_id>446</wp:comment_id>
			<wp:comment_author><![CDATA[Jacob Reimers]]></wp:comment_author>
			<wp:comment_author_email>jacob@reimers.dk</wp:comment_author_email>
			<wp:comment_author_url>http://www.reimers.dk</wp:comment_author_url>
			<wp:comment_author_IP>89.100.126.237</wp:comment_author_IP>
			<wp:comment_date>2012-03-11 11:59:32</wp:comment_date>
			<wp:comment_date_gmt>2012-03-10 22:59:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Just a quick note on your comment about the server and client side being bundled in the same assembly:
I put them together because the client will have to access the REST service over the web, so it did not seem like an onerous dependency. I may consider taking out the System.Web dependency in the future if there is solid evidence that people will be accessing web services using other means than web requests.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331420372.2659";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331426078.2827";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>448</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>118.92.128.121</wp:comment_author_IP>
			<wp:comment_date>2012-03-11 14:22:10</wp:comment_date>
			<wp:comment_date_gmt>2012-03-11 01:22:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Fair enough. I've created a branch to test how easy it would be to create a Linq2Rest.Client with just the provider pieces and seems relatively easy. If I ever need to rely on the Client Profile, CF, Silverlight etc I'll use this one.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>446</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331428930.0784";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>449</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo &raquo; Supporting oData expands for EF includes in ASP.Net Web API]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.petegoo.com/index.php/2012/03/11/supporting-odata-expands-for-ef-includes-in-asp-net-web-api/</wp:comment_author_url>
			<wp:comment_author_IP>96.31.35.44</wp:comment_author_IP>
			<wp:comment_date>2012-03-11 20:47:53</wp:comment_date>
			<wp:comment_date_gmt>2012-03-11 07:47:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] on from my previous post on creating a client API for ASP.Net Web API queryable oData services, I wanted to prove that expand clauses could also work for Entity Framework object [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331452073.2395";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1331452205.912";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1631</wp:comment_id>
			<wp:comment_author><![CDATA[Hari]]></wp:comment_author>
			<wp:comment_author_email>hrbaharibabu@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>203.99.193.60</wp:comment_author_IP>
			<wp:comment_date>2012-04-24 03:33:14</wp:comment_date>
			<wp:comment_date_gmt>2012-04-23 14:33:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great post. Will Querying capability work well when I need to perform some business validations before returning the data on large data? Eg: Table – Employee, Total no. of records – 100000, Scenario - my service need to respond with CURRENT employees(approx count 50000) only and expose the querying capability to it. I visualize as, service receives the oData queries, business layer performs the validation and an ORM performs the execution on the DB based on the query cascaded from business layer.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1335191594.3827";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1335211842.8632";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>544</wp:comment_id>
			<wp:comment_author><![CDATA[Dmitry Starosta]]></wp:comment_author>
			<wp:comment_author_email>dstarosta@optonline.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>38.105.230.1</wp:comment_author_IP>
			<wp:comment_date>2012-03-30 10:47:45</wp:comment_date>
			<wp:comment_date_gmt>2012-03-29 21:47:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am trying to integrate Linq2Rest into an MVC application and have a question. Is it possible to filter data by an inner collection properties through the URL $filter syntax?

Let's say I have the following model

class Company
{
     int ID { get; set; }
     Contact[] Contacts { get; set; }
}

class Contact
{
    string FirstName;
    string LastName;
}

What would be the $filter clause to find all companies where a contact named John Smith works?

Thank you,
Dmitry]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333057665.0713";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333491473.4046";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1415</wp:comment_id>
			<wp:comment_author><![CDATA[Jacob Reimers]]></wp:comment_author>
			<wp:comment_author_email>jacob@reimers.dk</wp:comment_author_email>
			<wp:comment_author_url>http://www.reimers.dk</wp:comment_author_url>
			<wp:comment_author_IP>89.100.126.237</wp:comment_author_IP>
			<wp:comment_date>2012-04-16 05:25:23</wp:comment_date>
			<wp:comment_date_gmt>2012-04-15 16:25:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="#comment-544" rel="nofollow">@Dmitry Starosta </a> Peter contributed the feature to query collections using Any and All queries. It is not currently included in the published Nuget package because of some difficulties coordinating versions with Microsoft's Rx Team. I'm hoping it will be included soon, so you will be able to query:
Company.Where(x=&gt;x.Contacts.Any(y=&gt;y.LastName == "Smith"));]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1334507123.5859";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>592</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>58.28.164.27</wp:comment_author_IP>
			<wp:comment_date>2012-04-04 11:21:49</wp:comment_date>
			<wp:comment_date_gmt>2012-04-03 22:21:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The current version of the OData protocol does not support filtering inside a collection. This has been proposed in the form of "any" and "all" for the next version but not finalised yet. Therefore Linq2Rest only supports the current version.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>544</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333491709.3404";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1632</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>58.28.164.27</wp:comment_author_IP>
			<wp:comment_date>2012-04-24 09:15:05</wp:comment_date>
			<wp:comment_date_gmt>2012-04-23 20:15:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It should be fine.It depends on the ORM but LINQ queries should be composable. In other words if you have some filtering in your controller (to current employees only ) and a request comes in that further filters your entity set then you should only get a single query for the composed filter. Of course you need to check this with a SQL profiler but this should be the case as long as you are not using any evaluating functions in your controller method (e.g. ToList, ToArray etc)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1631</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1335212105.8373";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>866</wp:comment_id>
			<wp:comment_author><![CDATA[tamas]]></wp:comment_author>
			<wp:comment_author_email>singelabs@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://singelabs.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>199.76.169.69</wp:comment_author_IP>
			<wp:comment_date>2012-04-09 12:07:39</wp:comment_date>
			<wp:comment_date_gmt>2012-04-08 23:07:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Pete, 

Thanks for the informative article. I'm trying to implement this to use protobuf-net, however I'm having trouble. Any help would be appreciated. Here what I have so far.

public class ProtobufNetFormatter : MediaTypeFormatter
    {
        public ProtobufNetFormatter() { }

        protected override bool CanReadType(Type type)
        {
            return type != typeof(IKeyValueModel);
        }

        protected override bool CanWriteType(Type type)
        {
            return true;
        }

        protected override Task OnReadFromStreamAsync(Type type, Stream stream, HttpContentHeaders contentHeaders, FormatterContext formatterContext)
        {
            return Task.Factory.StartNew(() =&gt;
                {
                    
                        return Serializer.Deserialize(stream);   //this does not work??? because of type
                });
        }

        protected override Task OnWriteToStreamAsync(Type type, object value, Stream stream, HttpContentHeaders contentHeaders, FormatterContext formatterContext, TransportContext transportContext)
        {
            return Task.Factory.StartNew(() =&gt;
                {
                    Serializer.Serialize(stream, value);
                });
        }
    }]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333926459.0343";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333930428.8626";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>867</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>118.93.188.75</wp:comment_author_IP>
			<wp:comment_date>2012-04-09 13:24:25</wp:comment_date>
			<wp:comment_date_gmt>2012-04-09 00:24:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Try the following. You will need the current version of ProtoBuf v2.

https://gist.github.com/2340497]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333931065.5418";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>871</wp:comment_id>
			<wp:comment_author><![CDATA[tamas]]></wp:comment_author>
			<wp:comment_author_email>singelabs@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://singelabs.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>199.76.169.69</wp:comment_author_IP>
			<wp:comment_date>2012-04-09 16:14:15</wp:comment_date>
			<wp:comment_date_gmt>2012-04-09 03:14:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks! Good stuff. I didn't know how to access the non generic versions of those functions. You still have to register protobufnetformatter with the HttpConfiguration.Formatters correct? Also, is Queryable cross-platform compatible?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1333941255.84";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>872</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>118.93.188.75</wp:comment_author_IP>
			<wp:comment_date>2012-04-09 16:19:15</wp:comment_date>
			<wp:comment_date_gmt>2012-04-09 03:19:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, I've updated the Gist with the Global.asax.cs for adding the formatter. As for Queryable being cross-platform compatible, which platforms are you interested in?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333941555.1191";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>873</wp:comment_id>
			<wp:comment_author><![CDATA[tamas]]></wp:comment_author>
			<wp:comment_author_email>singelabs@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://singelabs.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>199.76.169.69</wp:comment_author_IP>
			<wp:comment_date>2012-04-09 16:21:35</wp:comment_date>
			<wp:comment_date_gmt>2012-04-09 03:21:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm writing primarily for .NET and I was hoping to use the same server with Java (Android) and perhaps Obj-C (iPhone) in the future.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333941695.6094";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>875</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>118.93.188.75</wp:comment_author_IP>
			<wp:comment_date>2012-04-09 16:26:07</wp:comment_date>
			<wp:comment_date_gmt>2012-04-09 03:26:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yep, the server pieces are fine for that. You should be able to issue the OData URI queries without any concern for the fact that the data is coming from an IQueryable. 

Of course you will not be able to use the standard OData client libraries for android and Obj-C as they expect Atom+XML format rather than protobuf. I guess though that you are planning to handle the deserialization yourself.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333941967.5418";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>879</wp:comment_id>
			<wp:comment_author><![CDATA[tamas]]></wp:comment_author>
			<wp:comment_author_email>singelabs@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://singelabs.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>199.76.169.69</wp:comment_author_IP>
			<wp:comment_date>2012-04-09 17:00:26</wp:comment_date>
			<wp:comment_date_gmt>2012-04-09 04:00:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Indeed that was the case. How would I go about implementing the RestClient for protobuf since it isn't JSON or xml? Thanks for the continued help.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333944026.4415";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>880</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>118.93.188.75</wp:comment_author_IP>
			<wp:comment_date>2012-04-09 17:02:57</wp:comment_date>
			<wp:comment_date_gmt>2012-04-09 04:02:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[For Java and Obj-C? I'm afraid I have no clue. The RestClient for .Net is in the Gist.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333944177.3791";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>881</wp:comment_id>
			<wp:comment_author><![CDATA[tamas]]></wp:comment_author>
			<wp:comment_author_email>singelabs@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://singelabs.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>199.76.169.69</wp:comment_author_IP>
			<wp:comment_date>2012-04-09 17:05:53</wp:comment_date>
			<wp:comment_date_gmt>2012-04-09 04:05:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ah I missed it. Thank you. Also, when I navigate to {server address}/api/{controllername} I get a XML output instead of some binary file. Why is that?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333944353.7784";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>883</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>118.93.188.75</wp:comment_author_IP>
			<wp:comment_date>2012-04-09 17:12:40</wp:comment_date>
			<wp:comment_date_gmt>2012-04-09 04:12:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ahhh. That is due to the fact that your browser is sending the accepts header for xml etc. The Web API will pick the formatter according to the accepts header. To be able to see the appropriate format you need to modify the accepts header. 

The best way to do this is to use Fiddler http://www.fiddler2.com/fiddler2/version.asp

With fiddler open, issue the request in your browser. You should see it appear in fiddler. Drag the row from the sessions in fiddler to the Composer tab on the right. Then change the Accept: line to read:

Accept: application/x-protobuf

With that done hit execute in fiddler and it should execute the request. If everything worked ok then you should see a reduced message size in the request that just got served in fiddler.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333944760.4488";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>887</wp:comment_id>
			<wp:comment_author><![CDATA[tamas]]></wp:comment_author>
			<wp:comment_author_email>singelabs@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://singelabs.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>199.76.169.69</wp:comment_author_IP>
			<wp:comment_date>2012-04-09 17:25:19</wp:comment_date>
			<wp:comment_date_gmt>2012-04-09 04:25:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That makes sense. Alright, one more thing. I can use other methods of accessing the Web API data other than Linq2Rest, correct? I could use something like WebClient or something like RestSharp, correct?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333945519.7723";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>894</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>118.93.188.75</wp:comment_author_IP>
			<wp:comment_date>2012-04-09 17:59:04</wp:comment_date>
			<wp:comment_date_gmt>2012-04-09 04:59:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Of course. What I wanted to show here was the conversion of an IQueryable expression to OData URIs. You could just issue the uri query yourself against the service using WebClient or RestSharp or HttpClient etc.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333947544.4978";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1677</wp:comment_id>
			<wp:comment_author><![CDATA[Bryan]]></wp:comment_author>
			<wp:comment_author_email>bmonsterman@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>216.110.80.194</wp:comment_author_IP>
			<wp:comment_date>2012-11-27 09:55:52</wp:comment_date>
			<wp:comment_date_gmt>2012-11-26 20:55:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great post.  I've added $inline count to a project POC that I've started based on your work.  The only problem with my (and your) solution is the lack of projection and __deferred metadata for lazy loading.  This is something I can live with in a POC, but I'm going to want it before I start producing production code.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1353963352.8313";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1355782346.9734";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1692</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>58.28.164.27</wp:comment_author_IP>
			<wp:comment_date>2012-12-18 11:17:39</wp:comment_date>
			<wp:comment_date_gmt>2012-12-17 22:17:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, this stuff is probably getting out of date with the arrival of the fall update. When I fid some time I'll give it another shot with the latest bits. Unfortunately the open source story for the client bits is not quite there.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1677</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1355782659.3947";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1694</wp:comment_id>
			<wp:comment_author><![CDATA[Blue Ray Plus - Latest Technology News]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.bluerayplus.com/PeteGoo-Creating-a-Net-queryable-client-for-ASPNet-Web-API-oData-services</wp:comment_author_url>
			<wp:comment_author_IP>65.98.127.2</wp:comment_author_IP>
			<wp:comment_date>2013-05-02 02:20:57</wp:comment_date>
			<wp:comment_date_gmt>2013-05-01 13:20:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>PeteGoo | Creating a .Net queryable client for ASP.Net Web API oData services...</strong>

Thank you for submitting this cool story - Trackback from Blue Ray Plus - Latest Technology News...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1367414457.361881;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1376362530.47911;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Supporting oData expands for EF includes in ASP.Net Web API</title>
		<link>http://blog.petegoo.com/index.php/2012/03/11/supporting-odata-expands-for-ef-includes-in-asp-net-web-api/</link>
		<pubDate>Sun, 11 Mar 2012 07:46:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=318</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="alert alert-error">Hold Up!!! <a title="Updated sample using an ActionFilter" href="http://blog.petegoo.com/index.php/2012/04/29/action-filter-to-support-odata-expands-as-ef-includes-in-asp-net-web-api/">Please see the updated (and much nicer) implementation using an ActionFilter</a>.</div>  <p>Following on from my previous post on <a title="Creating a Queryable client for ASP.Net web api oData services" href="http://blog.petegoo.com/index.php/2012/03/11/creating-a-net-queryable-client-for-asp-net-web-api-odata-services/" target="_blank">creating a client API for ASP.Net Web API queryable oData services</a>, I wanted to prove that expand clauses could also work for Entity Framework object sets.</p>  <p>The <a title="oData expand" href="http://www.odata.org/developers/protocols/uri-conventions#ExpandSystemQueryOption" target="_blank">oData URI conventions</a> specifies that the desired depth of an entity can be represented in the $expand query string parameter. When using the ASP.Net Web API we need a way to pull this information from the querystring and convert it into Include statements on the ADO.Net Entity Framework object set. To achieve this I created an extension method that will pull the $expand query string parameter and translate it into multiple Include method calls.</p>  <pre class="brush: csharp;">public class NorthwindController : ApiController
{
    private readonly NorthwindEntities northwindEntities = new NorthwindEntities();

    public NorthwindController() {
        northwindEntities.ContextOptions.LazyLoadingEnabled = false;
    }

    public IQueryable&lt;Customer&gt; GetCustomers() {
        return northwindEntities.Customers.ProcessExpands();
    }   
}

public static class ObjectQueryExtensions {
    public static ObjectQuery&lt;T&gt; ProcessExpands&lt;T&gt;(this ObjectSet&lt;T&gt; source) where T : class {
        string expandsQueryString = HttpContext.Current.Request.QueryString[&quot;$expand&quot;];
        if(string.IsNullOrWhiteSpace(expandsQueryString)) {
            return source;
        }

        ObjectQuery&lt;T&gt; query = source;

        expandsQueryString.Split(',').Select(s =&gt; s.Trim()).ToList().ForEach(
            expand =&gt; {
                query = query.Include(expand.Replace(&quot;/&quot;, &quot;.&quot;));
            });

        return query;
    }
}</pre>

<p>Now all that’s left is to figure out how to provide the client side support for this….</p>

<p>Meanwhile the full source for the above project is available on github. <a href="https://github.com/PeteGoo/WebApiContext.Sample">https://github.com/PeteGoo/WebApiContext.Sample</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>318</wp:post_id>
		<wp:post_date>2012-03-11 20:46:06</wp:post_date>
		<wp:post_date_gmt>2012-03-11 07:46:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>supporting-odata-expands-for-ef-includes-in-asp-net-web-api</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="asp-net"><![CDATA[ASP.Net]]></category>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.Net]]></category>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="entity-framewok"><![CDATA[Entity Framewok]]></category>
		<category domain="category" nicename="entity-framework"><![CDATA[Entity Framework]]></category>
		<category domain="category" nicename="odata"><![CDATA[ODAta]]></category>
		<category domain="post_tag" nicename="odata-2"><![CDATA[oData]]></category>
		<category domain="category" nicename="web-api"><![CDATA[Web API]]></category>
		<category domain="post_tag" nicename="web-api"><![CDATA[Web API]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1633</wp:comment_id>
			<wp:comment_author><![CDATA[Action Filter to support oData expands as EF includes in ASP.Net Web API | PeteGoo]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.petegoo.com/index.php/2012/04/29/action-filter-to-support-odata-expands-as-ef-includes-in-asp-net-web-api/</wp:comment_author_url>
			<wp:comment_author_IP>96.31.35.44</wp:comment_author_IP>
			<wp:comment_date>2012-04-29 17:24:04</wp:comment_date>
			<wp:comment_date_gmt>2012-04-29 04:24:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] in March I wrote a quick howto on supporting $expand for entities in ASP.Net Web API. That method used an extension method to pull [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1335673444.4352";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1335673962.4973";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Introducing Pushqa&#8211;Queryable Push Messages over OData</title>
		<link>http://blog.petegoo.com/index.php/2012/03/20/introducing-pushqaqueryable-push-messages-over-odata/</link>
		<pubDate>Tue, 20 Mar 2012 09:32:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=330</guid>
		<description></description>
		<content:encoded><![CDATA[<p><strong>Pushqa is a smarter pub/sub model, allowing the subscriber to use LINQ to declare the messages they want to receive.</strong></p>  <h3>Background</h3>  <p>LINQ has revolutionised the way we work with data in .Net, allowing us to compose and query data sources of all types. When Microsoft introduced <a href="http://www.odata.org" target="_blank">OData</a> it opened up the ability to query server resources using a simple URI syntax or LINQ if you are using a .Net client. This was great news for accessing data stores like SQL using Entity Framework, NHibernate etc over HTTP such that the data manipulation and querying happens on the server before being sent to the client. A kind of LINQ remoting if you like. </p>  <p>Then came Reactive Extensions (<a title="Ractive Extensions" href="http://msdn.microsoft.com/en-us/data/gg577609" target="_blank">Rx</a>), a LINQ implementation that instead of accessing data sources, allows querying and composition of future events or event streams to produce new event streams. Rx revolutionises the event concept in .Net and makes dealing with asynchrony so much easier. </p>  <h3>Introducing Pushqa</h3>  <p>Suppose then, that we could also use Rx LINQ or OData uri syntax to filter an event stream of push messages before they leave the source. A kind of smarter Pub/Sub that allows the subscriber to specify which messages they want to receive from the server in a more natural declarative style. This is the goal of Pushqa, to give subscribers power over their own subscriptions. </p>  <p>Imagine a log viewer client that can filter to only the error level messages that happen to a specific user. Or a client cache that listens to specific domain events in order to evict only the items it cares about from it’s cache when they change.</p>  <p>By combining Rx, SignalR and OData Pushqa is able to translate LINQ queries to OData compliant URI conventions. The uri is used to initiate a persistent connection to the server that will then filter the events exposed by an Rx event stream into tailored streams for each client.</p>  <p>e.g.</p>  <p>The following code</p>  <pre class="brush: csharp;">eventProvider.Stocks
    .Where(s =&gt; 
        s.Name == &quot;GOOG&quot; || 
        s.Name == &quot;MSFT&quot;)
    .AsObservable()
    .Subscribe(s =&gt; Console.WriteLine(“{0} – {1}”, s.Name, s.Price))</pre>

<p>results in the following OData query</p>

<pre>http://my.domain.com/Stocks/?filter=(Name eq 'GOOG') or (Name eq 'MSFT')</pre>

<p>and the following output</p>

<blockquote>
  <p>MSFT - 24.11
    <br />GOOG - 457.52

    <br />MSFT - 30.11

    <br />GOOG - 576.65

    <br /></p>

  <p>…</p>
</blockquote>

<p>The stock events generated by the source on the server will be filtered to only Google and Microsoft before being sent to the subscriber one at a time using HTTP long polling or similar HTTP based push messaging as provided by SignalR.</p>

<p>Fetch the early bits from <a title="Pushqa on GitHub" href="https://github.com/PeteGoo/Pushqa" target="_blank">GitHub</a>. Be warned these bits are early but hopefully the sample projects will give you some ideas. Samples include:</p>

<ul>
  <li>Using Skip and Take to complete event streams. </li>

  <li>A Process Viewer showing the server’s process information with live updates. </li>

  <li>A Stock ticker. </li>

  <li>WPF and Web examples. </li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>330</wp:post_id>
		<wp:post_date>2012-03-20 22:32:17</wp:post_date>
		<wp:post_date_gmt>2012-03-20 09:32:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introducing-pushqaqueryable-push-messages-over-odata</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="linq"><![CDATA[Linq]]></category>
		<category domain="category" nicename="odata"><![CDATA[ODAta]]></category>
		<category domain="post_tag" nicename="odata-2"><![CDATA[oData]]></category>
		<category domain="category" nicename="pushqa"><![CDATA[Pushqa]]></category>
		<category domain="post_tag" nicename="pushqa"><![CDATA[Pushqa]]></category>
		<category domain="category" nicename="rx"><![CDATA[Rx]]></category>
		<category domain="post_tag" nicename="rx"><![CDATA[Rx]]></category>
		<category domain="post_tag" nicename="signalr"><![CDATA[SignalR]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1635</wp:comment_id>
			<wp:comment_author><![CDATA[Jackie]]></wp:comment_author>
			<wp:comment_author_email>jackielainew@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>122.59.109.219</wp:comment_author_IP>
			<wp:comment_date>2012-05-08 18:25:36</wp:comment_date>
			<wp:comment_date_gmt>2012-05-08 05:25:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Does this support self hosted scenario instead of IIS hosted?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1336465171.7537";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1336454736.9532";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1636</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>118.92.141.169</wp:comment_author_IP>
			<wp:comment_date>2012-05-08 21:20:19</wp:comment_date>
			<wp:comment_date_gmt>2012-05-08 08:20:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[To be honest, I haven't tried. I can't think of any reason why it would not work with SignalR's self-hosted model but having never used it I can't be sure.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1635</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1336465219.457";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1695</wp:comment_id>
			<wp:comment_author><![CDATA[Running Pushqa push messaging service in stand-alone application | Christian Meilke&#039;s Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://christianmeilke.wordpress.com/2013/08/12/running-pushqa-push-messaging-service-in-stand-alone-application/</wp:comment_author_url>
			<wp:comment_author_IP>66.155.9.55</wp:comment_author_IP>
			<wp:comment_date>2013-08-13 03:56:09</wp:comment_date>
			<wp:comment_date_gmt>2013-08-12 14:56:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] this point is designed to be working within an ASP.NET MVC web application (see Pushqa website or this blog post for examples). This was not the kind of environment I was looking for. SignalR itself is not [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1376319369.576416;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1376334402.701983;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Contact form 1</title>
		<link>http://blog.petegoo.com/?post_type=wpcf7_contact_form&#038;p=292</link>
		<pubDate>Fri, 14 Oct 2011 06:31:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/index.php/wpcf7_contact_form/contact-form-1/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>292</wp:post_id>
		<wp:post_date>2011-10-14 19:31:58</wp:post_date>
		<wp:post_date_gmt>2011-10-14 06:31:58</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>contact-form-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>wpcf7_contact_form</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_mail</wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:7:"subject";s:14:"[your-subject]";s:6:"sender";s:26:"[your-name] <[your-email]>";s:4:"body";s:167:"From: [your-name] <[your-email]>
Subject: [your-subject]

Message Body:
[your-message]

--
This mail is sent via contact form on PeteGoo http://blog.petegoo.com";s:9:"recipient";s:16:"pete@petegoo.com";s:18:"additional_headers";s:0:"";s:11:"attachments";s:0:"";s:8:"use_html";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_mail_2</wp:meta_key>
			<wp:meta_value><![CDATA[a:8:{s:6:"active";s:0:"";s:7:"subject";s:14:"[your-subject]";s:6:"sender";s:26:"[your-name] <[your-email]>";s:4:"body";s:106:"Message body:
[your-message]

--
This mail is sent via contact form on PeteGoo http://blog.petegoo.com";s:9:"recipient";s:12:"[your-email]";s:18:"additional_headers";s:0:"";s:11:"attachments";s:0:"";s:8:"use_html";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:22:{s:12:"mail_sent_ok";s:43:"Your message was sent successfully. Thanks.";s:12:"mail_sent_ng";s:93:"Failed to send your message. Please try later or contact the administrator by another method.";s:16:"validation_error";s:74:"Validation errors occurred. Please confirm the fields and submit it again.";s:12:"accept_terms";s:35:"Please accept the terms to proceed.";s:13:"invalid_email";s:28:"Email address seems invalid.";s:16:"invalid_required";s:31:"Please fill the required field.";s:17:"akismet_says_spam";s:93:"Failed to send your message. Please try later or contact the administrator by another method.";s:17:"captcha_not_match";s:31:"Your entered code is incorrect.";s:13:"upload_failed";s:22:"Failed to upload file.";s:24:"upload_file_type_invalid";s:30:"This file type is not allowed.";s:21:"upload_file_too_large";s:23:"This file is too large.";s:23:"upload_failed_php_error";s:38:"Failed to upload file. Error occurred.";s:23:"quiz_answer_not_correct";s:27:"Your answer is not correct.";s:4:"spam";s:93:"Failed to send your message. Please try later or contact the administrator by another method.";s:12:"invalid_date";s:26:"Date format seems invalid.";s:14:"date_too_early";s:23:"This date is too early.";s:13:"date_too_late";s:22:"This date is too late.";s:14:"invalid_number";s:28:"Number format seems invalid.";s:16:"number_too_small";s:25:"This number is too small.";s:16:"number_too_large";s:25:"This number is too large.";s:11:"invalid_url";s:18:"URL seems invalid.";s:11:"invalid_tel";s:31:"Telephone number seems invalid.";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_additional_settings</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_form</wp:meta_key>
			<wp:meta_value><![CDATA[<p>Your Name (required)<br />
    [text* your-name] </p>

<p>Your Email (required)<br />
    [email* your-email] </p>

<p>Subject<br />
    [text your-subject] </p>

<p>Your Message<br />
    [textarea your-message] </p>

[captchac your-captcha]
<label>Enter the code: [captchar your-captcha]</label>

<p>[submit "Send"]</p>]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Assembly File Locking when using AppDomains in a Visual Studio package</title>
		<link>http://blog.petegoo.com/index.php/2012/03/30/assembly-file-locking-when-using-appdomains-in-a-visual-studio-package/</link>
		<pubDate>Thu, 29 Mar 2012 21:58:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=344</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Recently I was using a new AppDomain from within a Visual Studio package to reflect over a dll and get some metadata. I then unloaded the AppDomain expecting that the file locks on the dll file would be released…..but they weren’t.</p>  <p>I could see that another AppDomain in VS was holding a lock on my file. You can see this by switching on Native debugging when attaching another visual studio instance and from the immediate window use:</p>  <blockquote>   <p><font style="background-color: #ffffff">.load sos</font></p>    <p><font style="background-color: #ffffff">!dumpdomain</font></p> </blockquote>  <p>It turns out this is due to the <a href="http://msdn.microsoft.com/en-us/library/system.appdomainsetup.loaderoptimization(v=vs.80).aspx" target="_blank">LoaderOptimization</a> attribute. Set this property to SingleDomain on your AppDomainSetup object to allow the file lock to be freed when unloading your AppDomain. This translates as.</p>  <blockquote>   <p><em>Indicates that the application will probably have a single domain, and loader must not share internal resources across application domains. </em></p></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>344</wp:post_id>
		<wp:post_date>2012-03-30 10:58:00</wp:post_date>
		<wp:post_date_gmt>2012-03-29 21:58:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>assembly-file-locking-when-using-appdomains-in-a-visual-studio-package</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="category" nicename="vsx"><![CDATA[VSX]]></category>
		<category domain="post_tag" nicename="vsx"><![CDATA[VSX]]></category>
		<wp:comment>
			<wp:comment_id>1659</wp:comment_id>
			<wp:comment_author><![CDATA[Ajeeth]]></wp:comment_author>
			<wp:comment_author_email>ajeeth4u@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>203.99.197.54</wp:comment_author_IP>
			<wp:comment_date>2012-09-26 21:06:32</wp:comment_date>
			<wp:comment_date_gmt>2012-09-26 08:06:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, I am also facing the same issue. Can you tell me what you did to resolve the problem. Can you send me the code snippet to do the trick. That would be grateful.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1348646792.6464";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1348649444.3794";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1660</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>27.252.67.166</wp:comment_author_IP>
			<wp:comment_date>2012-09-26 21:52:45</wp:comment_date>
			<wp:comment_date_gmt>2012-09-26 08:52:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Don't have the code to hand but if you follow the link you should see the code that sets the LoaderOptimization property on the AppDomainSetup object.

<code>AppDomainSetup mySetupInfo = new AppDomainSetup();
	mySetupInfo.ApplicationBase = domainDir;
	mySetupInfo.ApplicationName = executableNameNoExe;
	mySetupInfo.LoaderOptimization = LoaderOptimization.SingleDomain;</code>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1659</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1348649565.3156";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1661</wp:comment_id>
			<wp:comment_author><![CDATA[Ajeeth]]></wp:comment_author>
			<wp:comment_author_email>ajeeth4u@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>115.118.120.138</wp:comment_author_IP>
			<wp:comment_date>2012-09-27 00:06:29</wp:comment_date>
			<wp:comment_date_gmt>2012-09-26 11:06:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks, How did you load your assembly in new app domain I tried different options but finally hit the wall. Please help.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1348657589.9438";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>OData V3 any/all support</title>
		<link>http://blog.petegoo.com/index.php/2012/04/21/odata-v3-anyall-support/</link>
		<pubDate>Fri, 20 Apr 2012 21:36:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=348</guid>
		<description></description>
		<content:encoded><![CDATA[<p>WCF Data Services 5 <a href="http://blogs.msdn.com/b/astoriateam/archive/2012/04/09/wcf-data-services-5-0-rtm-release.aspx" target="_blank">has been RTM’d</a> and adds support for a whole bunch of scenarios:</p>  <ul>   <li>Any/All </li>    <li>Actions </li>    <li>Collections </li>    <li>Named Streams/Stream Properties </li>    <li>PATCH Verb </li>    <li>Prefer Headers </li>    <li>Properties on Derived Types </li>    <li>Support for DateTimeOffset and TimeSpan Data Types </li>    <li>Support for DbContext as the DataService Source </li>    <li>Spatial </li>    <li>Vocabularies </li> </ul>  <p>The most interesting bit for me initially was Any/All. Basically this has been one of those things that I get asked from time to time and have to explain that you could not (until now) filter a entity set based on some values in a sub-collection. E.g. give me all the customers who have ordered “x”.</p>  <p>With the inclusion of Any and All the following code is now possible</p>  <pre>// http://foo/?filter=Orders/any(o: o/OrderItems/any(i: i.Id eq 5))
var customers = Customers
                .Where(c =&gt; 
                    c.Orders.Any(o =&gt; 
                        o.OrderItems.Any(i =&gt;     
                            i.Id == 5));</pre>

<p>&#160;</p>

<p>I like the lambda syntax in the URI $filter parameter. It makes it easy for anyone that is used to modern languages to see what is going on.</p>

<p>So right now you can get <a href="http://blogs.msdn.com/b/astoriateam/archive/2012/04/09/wcf-data-services-5-0-rtm-release.aspx" target="_blank">WCF Data Services 5</a> and start using the Any/All support in OData.</p>

<p><a href="http://www.reimers.dk/" target="_blank">Jacob Reimers</a> has also gracefully accepted and published my pull request so <a href="http://nuget.org/packages?q=linq2rest" target="_blank">Linq2Rest</a> now fully supports Any/All queries in both the server and client APIs.</p>

<p>I’ve also <a href="http://aspnetwebstack.codeplex.com/workitem/65" target="_blank">submitted an issue</a> on the ASP.Net Web API for support so please up vote that issue if it’s something that’s important to you. From that issue you can also go see the implementation that I’ve done for my fork of aspnetwebstack that implements server support for Any/All in ASP.Net Web API.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>348</wp:post_id>
		<wp:post_date>2012-04-21 10:36:14</wp:post_date>
		<wp:post_date_gmt>2012-04-20 21:36:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>odata-v3-anyall-support</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="asp-net"><![CDATA[ASP.Net]]></category>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.Net]]></category>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="linq2rest"><![CDATA[Linq2Rest]]></category>
		<category domain="category" nicename="odata"><![CDATA[ODAta]]></category>
		<category domain="post_tag" nicename="odata-2"><![CDATA[oData]]></category>
		<category domain="category" nicename="web-api"><![CDATA[Web API]]></category>
		<category domain="post_tag" nicename="web-api"><![CDATA[Web API]]></category>
		<wp:comment>
			<wp:comment_id>1649</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>118.92.10.130</wp:comment_author_IP>
			<wp:comment_date>2012-06-05 21:51:19</wp:comment_date>
			<wp:comment_date_gmt>2012-06-05 08:51:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[From the stack trace it appears that you are using WCF Data Services and Linq to SQL. Is this related to the Linq2Rest implementation I outlined above or the asp.net web api fork? If not and you are just using WCF Data Services then you are better off contacting Microsoft with your query. Thanks,
Pete]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1648</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1338886279.2261";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1650</wp:comment_id>
			<wp:comment_author><![CDATA[Jacob Reimers]]></wp:comment_author>
			<wp:comment_author_email>jacob@reimers.dk</wp:comment_author_email>
			<wp:comment_author_url>http://reimers.dk</wp:comment_author_url>
			<wp:comment_author_IP>89.101.210.150</wp:comment_author_IP>
			<wp:comment_date>2012-06-05 22:03:30</wp:comment_date>
			<wp:comment_date_gmt>2012-06-05 09:03:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Just to add to Pete's comment: Have you tried unit testing with an equivalent All query you wrote yourself and passed directly to your data service?

The Linq2Rest component will generate valid Any/All queries, but makes no guarantees that another component is able to consume them.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1338887011.0202";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1648</wp:comment_id>
			<wp:comment_author><![CDATA[Samir]]></wp:comment_author>
			<wp:comment_author_email>sameer_mowade@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.227.176.182</wp:comment_author_IP>
			<wp:comment_date>2012-06-05 20:05:02</wp:comment_date>
			<wp:comment_date_gmt>2012-06-05 07:05:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks.

I started using this but Any and All was not working with ReflectionProvider on Linq To SQl. and is failig with following error. Any pointers in how to fix this.

Unhandled Exception: System.Data.Services.Client.DataServiceQueryException: An error occurred while processing this request. ---&gt; System.Data.Services
.Client.DataServiceClientException: <code></code>An error occurred while processing this request.Argument type
s do not matchSystem.ArgumentException   at System.Linq.Expressions.Expression.Condition(Expression test, Expressio
n ifTrue, Expression ifFalse)&#xD;
   at System.Data.Linq.SqlClient.ExpressionVisitor.VisitConditional(ConditionalExpression c)&#xD;
   at System.Data.Linq.SqlClient.ExpressionVisitor.Visit(Expression exp)&#xD;
   at System.Data.Linq.SqlClient.Funcletizer.Localizer.Visit(Expression exp)&#xD;
   at System.Data.Linq.SqlClient.ExpressionVisitor.VisitExpressionList(ReadOnlyCollection`1 original)&#xD;
   at System.Data.Linq.SqlClient.ExpressionVisitor.VisitMethodCall(MethodCallExpression m)&#xD;
   at System.Data.Linq.SqlClient.ExpressionVisitor.Visit(Expression exp)&#xD;
   at System.Data.Linq.SqlClient.Funcletizer.Localizer.Visit(Expression exp)&#xD;
   at System.Data.Linq.SqlClient.ExpressionVisitor.VisitLambda(LambdaExpression lambda)&#xD;
   at System.Data.Linq.SqlClient.ExpressionVisitor.Visit(Expression exp)&#xD;
   at System.Data.Linq.SqlClient.Funcletizer.Localizer.Visit(Expression exp)&#xD;
   at System.Data.Linq.SqlClient.ExpressionVisitor.VisitUnary(UnaryExpression u)&#xD;
   at System.Data.Linq.SqlClient.ExpressionVisitor.Visit(Expression exp)&#xD;
   at System.Data.Linq.SqlClient.Funcletizer.Localizer.Visit(Expression exp)&#xD;
   at System.Data.Linq.SqlClient.ExpressionVisitor.VisitExpressionList(ReadOnlyCollection`1 original)&#xD;
   at System.Data.Linq.SqlClient.ExpressionVisitor.VisitMethodCall(MethodCallExpression m)&#xD;
   at System.Data.Linq.SqlClient.ExpressionVisitor.Visit(Expression exp)&#xD;
   at System.Data.Linq.SqlClient.Funcletizer.Localizer.Visit(Expression exp)&#xD;
   at System.Data.Linq.SqlClient.ExpressionVisitor.VisitExpressionList(ReadOnlyCollection`1 original)&#xD;
   at System.Data.Linq.SqlClient.ExpressionVisitor.VisitMethodCall(MethodCallExpression m)&#xD;
   at System.Data.Linq.SqlClient.ExpressionVisitor.Visit(Expression exp)&#xD;
   at System.Data.Linq.SqlClient.Funcletizer.Localizer.Visit(Expression exp)&#xD;
   at System.Data.Linq.SqlClient.ExpressionVisitor.VisitExpressionList(ReadOnlyCollection`1 original)&#xD;
   at System.Data.Linq.SqlClient.ExpressionVisitor.VisitMethodCall(MethodCallExpression m)&#xD;
   at System.Data.Linq.SqlClient.ExpressionVisitor.Visit(Expression exp)&#xD;
   at System.Data.Linq.SqlClient.Funcletizer.Localizer.Visit(Expression exp)&#xD;
   at System.Data.Linq.SqlClient.Funcletizer.Funcletize(Expression expression)&#xD;
   at System.Data.Linq.SqlClient.SqlProvider.System.Data.Linq.Provider.IProvider.Execute(Expression query)&#xD;
   at System.Data.Linq.DataQuery`1.System.Collections.IEnumerable.GetEnumerator()&#xD;
   at System.Data.Services.Internal.ProjectedWrapper.EnumerableWrapper.System.Collections.IEnumerable.GetEnumerator()&#xD;
   at System.Data.Services.WebUtil.GetRequestEnumerator(IEnumerable enumerable)&#xD;
   at System.Data.Services.DataService`1.SerializeResponseBody(RequestDescription description, IDataService dataService, IODataResponseMessage respons
eMessage)&#xD;
   at System.Data.Services.DataService`1.HandleNonBatchRequest(RequestDescription description)&#xD;
   at System.Data.Services.DataService`1.HandleRequest()
   at System.Data.Services.Client.QueryResult.ExecuteQuery(DataServiceContext context)
   at System.Data.Services.Client.DataServiceRequest.Execute[TElement](DataServiceContext context, QueryComponents queryComponents)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1338879902.9589";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1338886062.888";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Action Filter to support oData expands as EF includes in ASP.Net Web API</title>
		<link>http://blog.petegoo.com/index.php/2012/04/29/action-filter-to-support-odata-expands-as-ef-includes-in-asp-net-web-api/</link>
		<pubDate>Sun, 29 Apr 2012 04:23:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=351</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Back in March <a href="http://blog.petegoo.com/index.php/2012/03/11/supporting-odata-expands-for-ef-includes-in-asp-net-web-api/" target="_blank">I wrote a quick howto</a> on supporting $expand for entities in ASP.Net Web API. That method used an extension method to pull the $expand clause out of the query string an apply it to the ObjectSet.</p>  <p>I’ve now added to that sample an <a href="http://msdn.microsoft.com/en-us/library/system.web.http.filters.actionfilterattribute(v=vs.108).aspx" target="_blank">ActionFilter</a> which will do this for you without any code in your controller.</p>  <p>To use it, change your global.asax and add the ActionFilter as part of your configuration.</p>  <pre>
public static void RegisterRoutes(RouteCollection routes) {
    ...
    ...

    HttpConfiguration configuration = GlobalConfiguration.Configuration;
    configuration.Filters.Add(new EFExpandActionFilter());

    ...
    ... 
    ...
}</pre>

<p>&#160;</p>

<p>Now your api methods need only return an ObjectSet or ObjectQuery without any extension methods.</p>

<pre>
public IQueryable&lt;Customer&gt; GetCustomers() {
    return northwindEntities.Customers;
}</pre>

<p>Note that if you are using the default XML serializer you will find that the navigation properties do not serialize due to the XmlIgnore attribute, either customize your entities or use Json.Net (as in the sample project)</p>

<div class="alert alert-info"><strong>Download:</strong> <a href="https://github.com/PeteGoo/WebApiContext.Sample/commit/fadfe3649a95c36ac2b9d74d63054ff62cd89f3a" target="_blank">Source is on github</a>.</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>351</wp:post_id>
		<wp:post_date>2012-04-29 17:23:46</wp:post_date>
		<wp:post_date_gmt>2012-04-29 04:23:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>action-filter-to-support-odata-expands-as-ef-includes-in-asp-net-web-api</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="asp-net"><![CDATA[ASP.Net]]></category>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.Net]]></category>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="entity-framewok"><![CDATA[Entity Framewok]]></category>
		<category domain="category" nicename="entity-framework"><![CDATA[Entity Framework]]></category>
		<category domain="category" nicename="web-api"><![CDATA[Web API]]></category>
		<category domain="post_tag" nicename="web-api"><![CDATA[Web API]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1634</wp:comment_id>
			<wp:comment_author><![CDATA[Supporting oData expands for EF includes in ASP.Net Web API | PeteGoo]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.petegoo.com/index.php/2012/03/11/supporting-odata-expands-for-ef-includes-in-asp-net-web-api/</wp:comment_author_url>
			<wp:comment_author_IP>96.31.35.44</wp:comment_author_IP>
			<wp:comment_date>2012-04-29 17:29:50</wp:comment_date>
			<wp:comment_date_gmt>2012-04-29 04:29:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Supporting oData expands for EF includes in ASP.Net Web API Posted on March 11, 2012 at 8:46 pm.Written by PeteGoo   Note: Please see the updated (and much nicer) implementation using an ActionFilter. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1335673790.3021";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1335673960.7636";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1652</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>58.28.164.27</wp:comment_author_IP>
			<wp:comment_date>2012-06-06 10:25:39</wp:comment_date>
			<wp:comment_date_gmt>2012-06-05 21:25:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It's possible something changed in the RC. I'll try to have a look when I get some time.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1651</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1338931540.2579";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1653</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>118.92.5.52</wp:comment_author_IP>
			<wp:comment_date>2012-06-06 22:09:00</wp:comment_date>
			<wp:comment_date_gmt>2012-06-06 09:09:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've updated the github source to work with the latest RC bits. Let me know how it goes.

Pete]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1651</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1338973740.6512";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1651</wp:comment_id>
			<wp:comment_author><![CDATA[Andrew]]></wp:comment_author>
			<wp:comment_author_email>bigcoops@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>199.107.16.130</wp:comment_author_IP>
			<wp:comment_date>2012-06-06 10:22:20</wp:comment_date>
			<wp:comment_date_gmt>2012-06-05 21:22:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Am I missing something?  In your GitHub code, the following line in EFExpandActionFilter fails to compile since the Result property does not exist in HttpActionExecutedContext:
actionExecutedContext.Result.TryGetObjectValue(out responseObject);

I have installed the MVC 4 RC.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1338931340.8931";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1338931452.1132";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1657</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>58.28.164.27</wp:comment_author_IP>
			<wp:comment_date>2012-08-03 14:04:26</wp:comment_date>
			<wp:comment_date_gmt>2012-08-03 01:04:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Not sure if it would still work. We'll have to wait and see if the OData Library effort becomes usable in WebAPI. Sad news though that they decided to pull the feature]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1656</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1343955866.7405";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1656</wp:comment_id>
			<wp:comment_author><![CDATA[Nick Tullos]]></wp:comment_author>
			<wp:comment_author_email>tullostech@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>75.151.195.249</wp:comment_author_IP>
			<wp:comment_date>2012-08-02 04:38:59</wp:comment_date>
			<wp:comment_date_gmt>2012-08-01 15:38:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It looks like they remove odata support from the repo. http://aspnetwebstack.codeplex.com/sourcecontrol/changeset/af11adf6b3c5?ProjectName=aspnetwebstack  .  Does your filter still work?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1653</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1343835540.2112";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1343955866.7534";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Slides and code for an &#8220;Introduction to Rx&#8221;</title>
		<link>http://blog.petegoo.com/index.php/2012/05/27/slides-and-code-for-an-introduction-to-rx/</link>
		<pubDate>Sat, 26 May 2012 23:04:34 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=360</guid>
		<description></description>
		<content:encoded><![CDATA[<p>You can get the slides and code for my recent talk on an “Introduction to Reactive Extensions” at github on the link below. </p>  <div class="alert alert-info"><strong>Download:</strong> <a title="Introduction to Rx" href="https://github.com/PeteGoo/Presentations.IntroductionToRx">Source is in Github</a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>360</wp:post_id>
		<wp:post_date>2012-05-27 12:04:34</wp:post_date>
		<wp:post_date_gmt>2012-05-26 23:04:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>slides-and-code-for-an-introduction-to-rx</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
				<title>Nice overview of Pushqa from Bart de Smet</title>
		<link>http://blog.petegoo.com/index.php/2012/08/19/nice-overview-of-pushqa-from-bart-de-smet/</link>
		<pubDate>Sun, 19 Aug 2012 09:54:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=366</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Bart de Smet of Rx fame talks about Pushqa in his latest channel 9 instalment on RX2. If you’re not familiar with Bart’s discussions on Rx, they’re well worth watching. Make sure you have lots of coffee and your wits at the ready.</p> <p><a href="http://channel9.msdn.com/Shows/Going+Deep/Bart-De-Smet-Rx-20-RTM-and-RTW">http://channel9.msdn.com/Shows/Going+Deep/Bart-De-Smet-Rx-20-RTM-and-RTW</a> (around 15 minute mark)</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>366</wp:post_id>
		<wp:post_date>2012-08-19 22:54:58</wp:post_date>
		<wp:post_date_gmt>2012-08-19 09:54:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nice-overview-of-pushqa-from-bart-de-smet</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="pushqa"><![CDATA[Pushqa]]></category>
		<category domain="category" nicename="rx"><![CDATA[Rx]]></category>
	</item>
	<item>
				<title>Windows 8 app updates stuck on Pending</title>
		<link>http://blog.petegoo.com/index.php/2012/10/12/windows-8-app-updates-stuck-on-pending/</link>
		<pubDate>Fri, 12 Oct 2012 03:54:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=368</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I had an issue today where Windows 8 App updates were stuck on “Pending” status. This was for the Microsoft apps like Mail, Calendar, Messenger, Games, Maps etc. To workaround this problem use the following from a command prompt running as administrator.</p><pre class="brush: ps;">net stop wuauserv
rename c:\windows\SoftwareDistribution softwaredistribution.old
net start wuauserv
</pre>
<p>&nbsp;</p>
<p>Found at <a title="http://answers.microsoft.com/en-us/windows/forum/windows_8-winapps/maps-app-cannot-install-or-update-but-other-apps/01b3db2c-f805-444a-8bce-9f85733aa276" href="http://answers.microsoft.com/en-us/windows/forum/windows_8-winapps/maps-app-cannot-install-or-update-but-other-apps/01b3db2c-f805-444a-8bce-9f85733aa276">http://answers.microsoft.com/en-us/windows/forum/windows_8-winapps/maps-app-cannot-install-or-update-but-other-apps/01b3db2c-f805-444a-8bce-9f85733aa276</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>368</wp:post_id>
		<wp:post_date>2012-10-12 16:54:19</wp:post_date>
		<wp:post_date_gmt>2012-10-12 03:54:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>windows-8-app-updates-stuck-on-pending</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_format" nicename="post-format-link"><![CDATA[Link]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1690</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>58.28.164.27</wp:comment_author_IP>
			<wp:comment_date>2012-12-18 11:13:54</wp:comment_date>
			<wp:comment_date_gmt>2012-12-17 22:13:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Not really sure. Try making sure there are no updates currently running. Close the store app from task manager / drag down gesture?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1689</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1355782434.6404";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1689</wp:comment_id>
			<wp:comment_author><![CDATA[Whit Maxey]]></wp:comment_author>
			<wp:comment_author_email>atlasshrugs@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.190.166.145</wp:comment_author_IP>
			<wp:comment_date>2012-12-18 11:10:50</wp:comment_date>
			<wp:comment_date_gmt>2012-12-17 22:10:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Running second command "rename" I get "access s denied" any suggestions?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1355782250.839";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1355782353.0169";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1716</wp:comment_id>
			<wp:comment_author><![CDATA[Liang Li]]></wp:comment_author>
			<wp:comment_author_email>liang.li@live.com</wp:comment_author_email>
			<wp:comment_author_url>http://facebook.com/taiwan.liang</wp:comment_author_url>
			<wp:comment_author_IP>118.232.0.7</wp:comment_author_IP>
			<wp:comment_date>2014-04-21 22:08:31</wp:comment_date>
			<wp:comment_date_gmt>2014-04-21 09:08:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You have to run as administrator.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1689</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1398106364.9978311;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1398071311.2078171;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:121:{s:15:"comment_post_ID";i:368;s:14:"comment_author";s:8:"Liang Li";s:20:"comment_author_email";s:17:"liang.li@live.com";s:18:"comment_author_url";s:25:"facebook.com/taiwan.liang";s:15:"comment_content";s:33:"You have to run as administrator.";s:12:"comment_type";s:0:"";s:14:"comment_parent";i:1689;s:7:"user_ID";i:0;s:7:"user_ip";s:11:"118.232.0.7";s:10:"user_agent";s:68:"Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko";s:8:"referrer";s:45:"http://jetpack.wordpress.com/jetpack-comment/";s:4:"blog";s:23:"http://blog.petegoo.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:84:"http://blog.petegoo.com/index.php/2012/10/12/windows-8-app-updates-stuck-on-pending/";s:21:"akismet_comment_nonce";s:6:"failed";s:15:"POST_hc_post_as";s:5:"guest";s:12:"POST_comment";s:33:"You have to run as administrator.";s:10:"POST_email";s:17:"liang.li@live.com";s:11:"POST_author";s:8:"Liang Li";s:8:"POST_url";s:25:"facebook.com/taiwan.liang";s:19:"POST_subscribe_blog";s:9:"subscribe";s:20:"POST_comment_post_ID";s:3:"368";s:19:"POST_comment_parent";s:4:"1689";s:14:"POST_hc_avatar";s:165:"http://0.gravatar.com/avatar/ff7ace8aedb957bab34f7f5f6e902ce9?s=80&d=http%3A%2F%2Fs2.wp.com%2Fwp-content%2Fmu-plugins%2Fhighlander-comments%2Fimages%2Fwplogo.png&r=G";s:23:"POST_subscribe_comments";s:9:"subscribe";s:8:"POST_sig";s:40:"7a4ce385fe17fb54261aeb8f1208d63e1b36dfc6";s:15:"SERVER_SOFTWARE";s:17:"Microsoft-IIS/7.0";s:11:"REQUEST_URI";s:33:"/wp-comments-post.php?for=jetpack";s:13:"_FCGI_X_PIPE_";s:53:"\\.\pipe\IISFCGI-8f693b7c-1709-46e8-854f-4990926e8736";s:15:"ALLUSERSPROFILE";s:14:"C:\ProgramData";s:7:"APPDATA";s:56:"C:\Windows\system32\config\systemprofile\AppData\Roaming";s:11:"APP_POOL_ID";s:18:"customerPool_12212";s:18:"CommonProgramFiles";s:35:"C:\Program Files (x86)\Common Files";s:23:"CommonProgramFiles(x86)";s:35:"C:\Program Files (x86)\Common Files";s:18:"CommonProgramW6432";s:29:"C:\Program Files\Common Files";s:12:"COMPUTERNAME";s:3:"W04";s:7:"ComSpec";s:27:"C:\Windows\system32\cmd.exe";s:16:"FP_NO_HOST_CHECK";s:2:"NO";s:12:"LOCALAPPDATA";s:54:"C:\Windows\system32\config\systemprofile\AppData\Local";s:20:"NUMBER_OF_PROCESSORS";s:2:"16";s:2:"OS";s:10:"Windows_NT";s:4:"Path";s:318:"C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Program Files (x86)\Dell\SysMgt\oma\bin;C:\Program Files (x86)\Dell\SysMgt\idrac;c:\php;C:\Windows\System32\WindowsPowerShell\v1.0\;c:\Users\administrator.WINHOST\AppData\Roaming\npm;c:\Program Files (x86)\nodejs\;C:\Program Files (x86)\Dell\SysMgt\shared\bin";s:7:"PATHEXT";s:53:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC";s:22:"PROCESSOR_ARCHITECTURE";s:3:"x86";s:22:"PROCESSOR_ARCHITEW6432";s:5:"AMD64";s:20:"PROCESSOR_IDENTIFIER";s:50:"Intel64 Family 6 Model 26 Stepping 5, GenuineIntel";s:15:"PROCESSOR_LEVEL";s:1:"6";s:18:"PROCESSOR_REVISION";s:4:"1a05";s:11:"ProgramData";s:14:"C:\ProgramData";s:12:"ProgramFiles";s:22:"C:\Program Files (x86)";s:17:"ProgramFiles(x86)";s:22:"C:\Program Files (x86)";s:12:"ProgramW6432";s:16:"C:\Program Files";s:12:"PSModulePath";s:51:"C:\Windows\system32\WindowsPowerShell\v1.0\Modules\";s:6:"PUBLIC";s:15:"C:\Users\Public";s:11:"SystemDrive";s:2:"C:";s:10:"SystemRoot";s:10:"C:\Windows";s:4:"TEMP";s:15:"C:\Windows\TEMP";s:3:"TMP";s:15:"C:\Windows\TEMP";s:10:"USERDOMAIN";s:7:"WINHOST";s:8:"USERNAME";s:4:"W04$";s:11:"USERPROFILE";s:40:"C:\Windows\system32\config\systemprofile";s:6:"windir";s:10:"C:\Windows";s:9:"FCGI_ROLE";s:9:"RESPONDER";s:18:"HTTP_CACHE_CONTROL";s:8:"no-cache";s:15:"HTTP_CONNECTION";s:10:"Keep-Alive";s:19:"HTTP_CONTENT_LENGTH";s:3:"483";s:17:"HTTP_CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:11:"HTTP_ACCEPT";s:37:"text/html, application/xhtml+xml, */*";s:20:"HTTP_ACCEPT_ENCODING";s:13:"gzip, deflate";s:20:"HTTP_ACCEPT_LANGUAGE";s:45:"en-US,en;q=0.8,zh-Hant-TW;q=0.5,zh-Hant;q=0.3";s:9:"HTTP_HOST";s:16:"blog.petegoo.com";s:12:"HTTP_REFERER";s:45:"http://jetpack.wordpress.com/jetpack-comment/";s:15:"HTTP_USER_AGENT";s:68:"Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko";s:8:"HTTP_DNT";s:1:"1";s:19:"HTTP_X_ORIGINAL_URL";s:33:"/wp-comments-post.php?for=jetpack";s:13:"DOCUMENT_ROOT";s:15:"E:\web\petegooc";s:13:"INSTANCE_NAME";s:11:"PETEGOO.COM";s:15:"SCRIPT_FILENAME";s:46:"E:\web\petegooc\wordpress\wp-comments-post.php";s:19:"IIS_WasUrlRewritten";s:1:"1";s:13:"UNENCODED_URL";s:33:"/wp-comments-post.php?for=jetpack";s:20:"IIS_UrlRewriteModule";s:10:"7.1.0761.0";s:12:"APPL_MD_PATH";s:20:"/LM/W3SVC/12212/ROOT";s:18:"APPL_PHYSICAL_PATH";s:16:"E:\web\petegooc\";s:9:"AUTH_TYPE";s:0:"";s:13:"AUTH_PASSWORD";s:0:"";s:9:"AUTH_USER";s:0:"";s:11:"CERT_COOKIE";s:0:"";s:10:"CERT_FLAGS";s:0:"";s:11:"CERT_ISSUER";s:0:"";s:17:"CERT_SERIALNUMBER";s:0:"";s:12:"CERT_SUBJECT";s:0:"";s:14:"CONTENT_LENGTH";s:3:"483";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:5:"HTTPS";s:3:"off";s:13:"HTTPS_KEYSIZE";s:0:"";s:19:"HTTPS_SECRETKEYSIZE";s:0:"";s:19:"HTTPS_SERVER_ISSUER";s:0:"";s:20:"HTTPS_SERVER_SUBJECT";s:0:"";s:11:"INSTANCE_ID";s:5:"12212";s:18:"INSTANCE_META_PATH";s:15:"/LM/W3SVC/12212";s:10:"LOCAL_ADDR";s:11:"96.31.35.44";s:10:"LOGON_USER";s:0:"";s:15:"PATH_TRANSLATED";s:46:"E:\web\petegooc\wordpress\wp-comments-post.php";s:12:"QUERY_STRING";s:11:"for=jetpack";s:11:"REMOTE_ADDR";s:11:"118.232.0.7";s:11:"REMOTE_HOST";s:11:"118.232.0.7";s:11:"REMOTE_PORT";s:5:"50453";s:11:"REMOTE_USER";s:0:"";s:14:"REQUEST_METHOD";s:4:"POST";s:11:"SCRIPT_NAME";s:31:"/wordpress/wp-comments-post.php";s:11:"SERVER_NAME";s:16:"blog.petegoo.com";s:11:"SERVER_PORT";s:2:"80";s:18:"SERVER_PORT_SECURE";s:1:"0";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:3:"URL";s:31:"/wordpress/wp-comments-post.php";s:14:"ORIG_PATH_INFO";s:31:"/wordpress/wp-comments-post.php";s:8:"PHP_SELF";s:31:"/wordpress/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1398071310";s:25:"comment_post_modified_gmt";s:19:"2013-08-13 12:29:51";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Creating an Autocomplete search box for Windows Store apps in XAML</title>
		<link>http://blog.petegoo.com/index.php/2012/10/20/creating-an-autocomplete-search-box-for-windows-store-apps-in-xaml/</link>
		<pubDate>Sat, 20 Oct 2012 10:19:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=370</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I’ve modified the code from my previous post on <a href="http://blog.petegoo.com/index.php/2011/11/22/building-an-auto-complete-control-with-reactive-extensions-rx/">creating an AutoComplete search box using Reactive Extensions</a> to work in XAML under WinRT in a Windows Store (Metro) app. This uses the latest version of Rx and can be found in the github repository below.</p><iframe height="281" src="http://player.vimeo.com/video/51804587" frameborder="0" width="500" mozallowfullscreen webkitallowfullscreen allowfullscreen></iframe> <p><a href="http://vimeo.com/51804587">AutoCompleteInWin8Xaml</a> from <a href="http://vimeo.com/user3050044">Peter Goodman</a> on <a href="http://vimeo.com">Vimeo</a>.</p> <div class="alert alert-info"><strong>Download:</strong> <a title="AutoComplete Sample on github" href="https://github.com/PeteGoo/WindowsStoreSamples">Source is in Github</a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[<iframe src="http://vimeo.com/51804587" 
frameborder="0" width="1200" height="670" webkitAllowFullScreen 
mozallowfullscreen allowFullScreen></iframe>]]></excerpt:encoded>
		<wp:post_id>370</wp:post_id>
		<wp:post_date>2012-10-20 23:19:09</wp:post_date>
		<wp:post_date_gmt>2012-10-20 10:19:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creating-an-autocomplete-search-box-for-windows-store-apps-in-xaml</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_format" nicename="post-format-video"><![CDATA[Video]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Creating an NHibernate OData service using ASP.Net Web API Fall Update</title>
		<link>http://blog.petegoo.com/index.php/2012/11/11/creating-an-nhibernate-odata-service-using-asp-net-web-api-fall-update/</link>
		<pubDate>Sun, 11 Nov 2012 09:03:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=372</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>NHibernate Query Service</h2> <p><br>&nbsp; <h3>Overview</h3> <p><br>The <a href="http://www.asp.net/vnext" target="_blank">Fall Update</a> to ASP.Net Web API re-implements the OData support from the beta releases. This time it is using the ODataLib libraries from the OData team. Getting it to work with NHibernate however can be a bit of a nightmare. As we’ll see though, it is possible. The code for this article is available on <a href="https://github.com/PeteGoo/NHibernate.QueryService" target="_blank">github</a>.<br> <h3>Setting up the database</h3> <p><br>There is a SQL 2012 backup of the database in the root folder which requires a login "queryservice".<br> <h3>Implementation</h3> <p><br>There are a number of issues to solve out of the box when trying to serve NHibernate objects directly over ASP.Net Web API. <br> <h4>"You should be using DTOs", they will say</h4> <p><br>A lot of people will argue that you should really be serving DTOs instead of your actual model classes over the service boundary. They are normally correct but as this is the query side of a sort of CQRS implementation, my concerns are different. I actually just want to serve queryable data to the client.<br> <h4>&nbsp;</h4> <h4>Providing an NHibernate session</h4> <p><br>To execute any command in Nhibernate the API call must be made in the context of "Session". This session represents the lifetime of the database connection and the first level cache of retrieved objects and their change tracking.</p> <p>We could just construct our session in our controller action but that would involve some boilerplate repetition. Another issue is that, due to the compositional nature of action filters and hence the Web API OData implementation, we need the session to survive beyond the lifetime of the action method so that it can service the late bound evaluation of LINQ operators like Where and Expand.</p> <p>To solve this issue the web api sample here uses constructor based dependency injection and <a href="http://www.ninject.org/" target="_blank">Ninject</a> to pass the session to the api controller and dispose of it when the request is complete. using an override of the Dispose method on the controller.</p> <h4>Serialization of Dynamic Proxies</h4> <p><br>NHibernate uses dynamic proxy types which are derived versions of model types, generated at runtime. When code tries to evaluate any properties on instances of these types, commands will be issued to the database in order to lazily fetch the data to populate the instance. </p> <p>This lazy loading means that any serializer will cause the endless fetching of all data related to an entity regardless of whether it was requested or not.</p> <p>To solve this issue for the <a href="http://json.codeplex.com" target="_blank">JSON.Net</a> serializer we use a ContractResolver to serialize the dynamic proxy class as if it were its base type. We then use a custom JsonConverter to write null out for any proxy instance or an uninitialized collection, the collection equivalent of the dynamic proxy.<br></p> <h4>Processing the $expand OData operator</h4> <p><br>The $expand operator allows the requester to specify the depth of the data that they want retrieved. This is equivalent to the Include operator in Entity Framework and the NHibernate LINQ equivalent is Fetch. To implement this the sample uses an Action Filter which will run its Executed method after the Web API OData action filters. In this it will apply any expands directives and force the enumeration of the results.</p> <p>Unfortunately the ASP.Net Web API throws an exception when an $expand querystring parameter is found. This is due to the fact that it has not yet been implemented in the fall update and is not expected till 2013. Therefore we also need to derive our own <a href="http://aspnetwebstack.codeplex.com/workitem/370" target="_blank">QueryableAttribute</a> and override the validate method to allow $expand.</p> <p>&nbsp;</p> <h4>Outstanding Issues</h4> <p><br>* Need to implement odata model and enable $metadata support.<br>* Need to switch on syscache2 support for sql dependency based cache eviction.   <div class="alert alert-info"><strong>Download:</strong> <a title="NHibernate queryable Web API Sample on github" href="https://github.com/PeteGoo/NHibernate.QueryService">Source is in Github</a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>372</wp:post_id>
		<wp:post_date>2012-11-11 22:03:36</wp:post_date>
		<wp:post_date_gmt>2012-11-11 09:03:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creating-an-nhibernate-odata-service-using-asp-net-web-api-fall-update</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="asp-net"><![CDATA[ASP.Net]]></category>
		<category domain="category" nicename="nhibernate"><![CDATA[NHibernate]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="category" nicename="web-api"><![CDATA[Web API]]></category>
		<wp:comment>
			<wp:comment_id>1712</wp:comment_id>
			<wp:comment_author><![CDATA[ridermansb]]></wp:comment_author>
			<wp:comment_author_email>ridermansb@bindsolution.com</wp:comment_author_email>
			<wp:comment_author_url>http://careers.stackoverflow.com/ridermansb</wp:comment_author_url>
			<wp:comment_author_IP>177.19.25.211</wp:comment_author_IP>
			<wp:comment_date>2013-12-19 07:41:48</wp:comment_date>
			<wp:comment_date_gmt>2013-12-18 18:41:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Firstly congratulations on the article and the project.

I'm working on a project where I am having various difficulties to deploy webapi + OData with NHibernate.

They are:

1. Filters with substringof command (just do not work)

2. Child objects (eg / odata / users? CriadoPor &amp; $ expand = $ select = Id, CriadoPor / Id, CriadoPor / name) are not returned when null (this example when the CriadoPor is null)

3. $ expand does not work


The closest solution I found are [NHibernate.Odata](https://github.com/pvginkel/NHibernate.OData) and [Breeze](http://www.breezejs.com/) however unable to implement them in my project.

Could you give me some tips?
Maybe some sample project?


The project is of type 5 with Asp.net MVC. Webapi net 4.5 and 2]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387392108.6770239;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1388102453.8378019;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1713</wp:comment_id>
			<wp:comment_author><![CDATA[PeteGoo]]></wp:comment_author>
			<wp:comment_author_email>pete@petegoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.petegoo.com</wp:comment_author_url>
			<wp:comment_author_IP>27.252.252.184</wp:comment_author_IP>
			<wp:comment_date>2013-12-27 13:17:58</wp:comment_date>
			<wp:comment_date_gmt>2013-12-27 00:17:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sorry, I've not been in this space for a while now.

If I get some time to revisit it at some point I will update this post but I wouldn't hold my breath. Sorry.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>1712</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1388103478.3971951;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>My experience submitting an app to the Windows Store</title>
		<link>http://blog.petegoo.com/index.php/2012/11/25/my-experience-submitting-an-app-to-the-windows-store/</link>
		<pubDate>Sun, 25 Nov 2012 03:43:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=380</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I thought I should document the experience I have had in getting an app submitted to the Windows Store. I guess this process is new but the pains in getting an app submitted can be quite extraordinary.</p> <h3>October 18th 2012</h3> <p>Created developer account. <br>Some issues with entering the account details of my credit card. <br>Used a different card, all good.</p> <h3>October 19th 2012 (1 Day)</h3> <p>Submitted the app I had been working on. Sweet! (It’s not my best work, I’m not normally a UI guy but I like to try to challenge myself and someone might find it useful, pay me for the advanced features, I dunno)</p> <p>Uh-Oh. Stuck on first step as I need to verify my account details. This involves getting a code from a temporary “holding��� charge on my credit card account. </p> <p>No worries, lets just check the account, Hmmmm 6 charges on my account instead of one, at least they’ll all be refunded eh? Now, which one to choose…lets start at the latest one….<br>Second?….<br>(Some time later)<br>Ok one more attempt I am told and then I’ll be locked out of verification, lets choose the last one….<br>Ok. No more attempts and I am locked out of ever verifying without help from support.<br>From outside the U.S. you can only contact support by email or online chat if within U.S. working hours.<br>Lets try the online chat, Chat window opens, I am told that I am chatting with …for the sake of anonymity lets call him Dave.<br><em>Dave…Dave?</em></p> <p>Some time passes, I try reconnecting to chat, 2 different browsers, I even get dressed go to work logon there and I still get Dave, and Dave is still not answering. What gives Dave? I assume Dave is doing something with hookers, hotel rooms and cocaine. I need to stop watching TV.<br><br></p> <h3><strong>October 20th 2012 (2 Days)</strong></h3> <p>I email support using the online form. I tell them that I have no more attempts to verify and therefore I cannot verify my account via the dashboard.</p> <h3><strong>October 21st 2012 (3 Days)</strong></h3> <p>Get a reply from support. They confirm that I need to verify my account via the dashboard. <em>sigh.</em> They did also say that I could send them my statement. Ok, slightly worried about security but what the hell…<strong></strong></p> <h3><strong>October 23rd 2012 (5 Days)</strong></h3> <p>Must have been a busy day on the 22nd. I send my credit card statement to MS support. I consider censoring the iTunes app charges to save their feelings but think better of it in case they think its porn.</p> <h3><strong>October 25th 2012 (7 Days)</strong></h3> <p>I don’t have a reply yet but I realise that I now have a 7th charge on my credit card that has been reimbursed immediately but the first 6 charges have not been reimbursed yet. Oh well, maybe I’ll get shares.</p> <h3><strong>October 30th 2012 (12 Days)</strong></h3> <p>Try the chat again, get through to, let’s call him Bob. Bob has a look and confirms that there is a problem with their end, he will chase it up for me. Sweet! Progress!</p> <h3><strong>October 31st 2012 (13 Days)</strong></h3> <p>Get a reply from support, Bob’s done the job and inserted the boot in the posterior, GO BOB!! Support ask me to clear my browser cache and try again. I get flashbacks of my days in Dell tech support, asking people to reboot their machines as it took roughly the same time then as smoking a cigarette and getting a curly wurly from the vending machine.</p> <h3><strong>November 1st 2012 (14 Days)</strong></h3> <p>Reply from support! Should now be solved. Click the link and be on your merry way young traveller!</p> <p>Reply from me: <em>Nope. Same error message. Tried 2 browsers, reformatted my machine and reinstalled windows</em>. </p> <p>Not that I thought it was necessary to reformat, it was due for a clean anyways, besides it put the browser cache thing to bed in a suitably drastic way.</p> <h3><strong>November 6th 2012 (19 Days)</strong></h3> <p>I send a prompting email asking for details on what is happening. My tone is starting to change in an attempt to invoke some empathy. You know that tone that you use when you think you are hard done by but you realise that being a dick about it is more likely to cost you, like, <em>“I’m sure you can understand how frustrating this could be….”. </em>I like to pretend at this point that I’m wearing a suit, leaning on a counter with my elbow and making circular movements with the stems of my glasses. I wish I wore glasses, I think I could really use the new injection of body language expressions effectively.</p> <p>Reply from support, “<em>I have a team looking into the matter</em>”. Looks like the glasses did the trick!</p> <p>Another reply from support (definitely the glasses). <em>Try again, team says we’re good.</em></p> <p>Reply from me: “<em>Nope, still the same</em>”. There may have been some desperate blubbering tone in this email. I think I’d just watched Ghost or something.</p> <h3><strong>November 7th 2012 (20 Days)</strong></h3> <p>Reply from support: “<em>Thanks for letting us know…..we’ll keep you posted”</em></p> <h3><strong>November 14th 2012 (27 Days)</strong></h3> <p>I try again just for the shizzles and the gizzles and Bam! It now works!! I can proceed!</p> <p>I send them an email to tell them that they resolved it and that they still haven’t reimbursed me for the 6 credit card charges.</p> <h3><strong>November 20th 2012 (33 Days)</strong></h3> <p>App failed submission. Needs a privacy policy and it crashed at some point apparently.</p> <p>I add a privacy policy and fix some bugs that may have caused issues if the user performed a certain action inside the app. I resubmit my app.</p><strong> <h3><strong><strong>November 21st 2012 (34 Days)</strong></strong></h3></strong> <p>Quick response from certification. Failed again. I wonder why it was so fast this time, is it like getting a recheck on your car warrant? Anyhoo, now the problem is just that it crashed.</p> <p>The thing is, there is only a PDF file attached to the dashboard notice with a bunch of placeholders for screenshots, all of which are blank. I find some testers notes that say:</p> <p><em>”B:: This app stopped responding during the review and we couldn't complete the review of it.”</em></p> <p>Ignoring the fact this guy has the coolest name ever, I could be mean and deconstruct the grammar here but the real tragedy is the lack of info. I mean when? on what hardware? what were you doing at the time? Did you try shaking it?</p> <h3><strong>November 22nd 2012 (35 Days)</strong></h3> <p>(I can’t believe you’re still reading this, well done, it gets a little better but you could just cut your losses if you’re about to miss the insult-boo/compliment-cheer roulette part of tonight’s X-Factor)</p> <p>I use the online chat to ask Windows Store support folks about the lack of detail. This time I get……Brock. Brock tells me that he’ll have a look. Brock then stops talking and/or responding.</p> <p>I reconnect my chat and get Randy (It’s really hard to pick a mildly amusing name without appearing culturally or racially offensive). I tell Randy everything again and he tells me that Brock’s machine crashed. I jokingly suggest it was my app, but he quite seriously reassures me that it isn’t. I guess irony is tough on chat rooms. </p> <p>While chatting to Randy we figure out that the PDF certification report is trying to tell me that the app crashed on launch, that is why it failed. Randy tells me to contact technical support now as there is nothing he can do. Oh, and apparently you pay for tech support but they <em>may not charge me and that most developers are entitled to a free issue or two.</em></p> <h3><strong>November 25th 2012 (38 Days)</strong></h3> <p>I try to raise a tech support request call using the website, after picking a bunch of filters you are told that they will charge you $259.00 per issue. I start filling out the form, telling them that I want my free issue please otherwise I’m not interested. I mean $259.00 for an event log entry seems a bit steep.</p> <p>On submitting the form I am told my session has expired and I have to login again. Twice. Aghhhh!!!!! The session timeout I have estimated is around 3 minutes. I use notepad as my word processor and copy and paste as my close close friends to get around this limitation. Don’t get me wrong, I can type fast, I just change my mind often. You know, you start with mother-goat comparison insults, proof-read it, think better of it then work you way down through the Monty Python lexicon of mild insults until gradually you think that you are being relatively polite and constructive. </p> <p>Next stage in the tech support issue raising <strike>dance</strike> workflow is verifying your payment method. This is a basic address verification.</p> <p>I fill in my street address.</p> <p>It asks me for a U.S. State. Hmmmm, lets just change the country. Wait, What? I can’t change the country. Ok, lets pick Alabama, its fun to say. Nope rejected, can’t complete the form, can’t submit a tech support support request. </p> <p>Game over. Back to the forums for some witty repartee.</p> <h3><strong>December 6th 2012 (49 Days)</strong></h3> <p>Reimbursed for 6 erroneous charges. Thank you to the support team. I can’t say enough about how helpful they have been in the recent emails.</p> <p>In the mean time I have also learned that the support team have no access to the testers. I can only assume there must be a backlog of apps to fail and they don’t want the testers disturbed by trivial things like questions about why apps fail.</p> <p>I’ve also come to the conclusion that a large vector based map of the world (Yes, I know) in the background of my app could affect startup perf although I don’t really see it on a Surface RT or Intel machine.I’ve removed it and resubmitted the app. Here’s hoping…</p> <h3><strong>To be continued….</strong></h3>]]></content:encoded>
		<excerpt:encoded><![CDATA[I get flashbacks of my days in Dell tech support, asking people to reboot their machines as it took roughly the same time then as smoking a cigarette and getting a curly wurly from the vending machine.]]></excerpt:encoded>
		<wp:post_id>380</wp:post_id>
		<wp:post_date>2012-11-25 16:43:15</wp:post_date>
		<wp:post_date_gmt>2012-11-25 03:43:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-experience-submitting-an-app-to-the-windows-store</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="rant"><![CDATA[Rant]]></category>
		<category domain="category" nicename="windows-store"><![CDATA[Windows Store]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Reactive Extensions in Message Processing</title>
		<link>http://blog.petegoo.com/index.php/2013/01/20/reactive-extensions-in-message-processing/</link>
		<pubDate>Sun, 20 Jan 2013 10:04:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=400</guid>
		<description></description>
		<content:encoded><![CDATA[I’ve had a few occasions recently to use Reactive Extensions in production for message processing. Once you finally bend your brain around Rx, you started seeing uses for it everywhere you look, it really is a LINQ style awakening moment when you suddenly start to see all the places that you should be using it.

I’m going to walk through a scenario we had and explain where we used Reactive Extensions to tame some of the messaging bottlenecks we had. In our scenario we were trying to funnel workflow tracking messages into a sort of log table in a SQL database but there should be some mileage here anywhere you are raising asynchronous messages and want to optimize the throughput effectively.

I will note that we did not need strict guaranteed delivery, that is to say, it was not absolutely critical that our messages get to the database. I’m not saying that this approach would not work for another scenario that needs it, I’m just pointing out that we have not tested it under those conditions.
<h3>Original Implementation</h3>
In our enterprise workflow system we can have any number of workflow definitions running under different web applications scaled out over many web farm nodes. Each of these workflow web applications could have any number of running instances at any one time. Each workflow emits tracking records which log the progress through each activity in the workflow, any exceptions etc. The thing about processing workflow tracking records is that you need to get rid of the messages as quickly as possible as you do not want to adversely affect the performance of the workflow instances themselves.

If we were to just process the messages synchronously in the workflow tracking participant (the plugin class that handles tracking messages as they are raised) then we would see the following type of message pipeline where each message is handled as a single unit and written to the database one at a time.
<p align="center"><a href="http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing1.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="RxMessageProcessing1" alt="RxMessageProcessing1" src="http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing1_thumb.png" width="454" height="193" border="0" /></a></p>
The problem with this approach is that many instances of many workflows on many web applications from many server nodes would all be sending messages to this single service. Even if that service is load balanced you can get into a scenario where peak loads can cause a lot of contention on this service which backs up onto the workflows themselves causing an overall degradation in performance and can affect user experience. Therefore the secret to absorbing some of this peak load is to implement some sort of “<a href="http://msdn.microsoft.com/en-us/library/windowsazure/hh367516.aspx" target="_blank">Load Levelling</a>” where the load is normalised over a period of time.
<p align="center"><a href="http://blog.petegoo.com/wp-content/uploads/2013/01/LoadLevelling.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="LoadLevelling" alt="LoadLevelling" src="http://blog.petegoo.com/wp-content/uploads/2013/01/LoadLevelling_thumb.png" width="497" height="672" border="0" /></a></p>
The messages are essentially throttled to only process so many at a time, processing will continue long after the load has subsided. We decided in the first place to put these messages onto our own messaging infrastructure which is basically an MSMQ queue, another windows service process will pick up these messages later and funnel them into the database, another way to do this would be Azure Service Bus Queues, they often talk up the load-levelling characteristics of queuing. Initially this approach was fine, the messages would be placed asynchronously on a queue and later they would be processed one at a time and written to the tracking database table. Each message was processed as a single transaction.
<p align="center"><a href="http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing2.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="RxMessageProcessing2" alt="RxMessageProcessing2" src="http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing2_thumb.png" width="454" height="193" border="0" /></a></p>
The side effect of this approach is that the load is moved to another process, our message listener at the time was single threaded so each message would get processed before the next message was picked up off the queue. This resulted in the levelling that I described above.

This worked well, until we met a client who pushed the limits of what we had tested and found that they could create quite a lot of work for the message processor. In fact they created so much work that the messages were expiring on the queue due to the load on the message processor. In other words the single-threaded pipeline could not process the messages fast enough before the TTL on the messages expired. We needed to add more threads to this sucker but a thread per message could be excessive, creating threads is not completely free. We could just have used the Task Parallel Library but as we will see using Rx we can easily extend the behaviour of the message pipeline as required.
<h3>Using Rx to Batch a Message Pipeline</h3>
I knew I wanted to use reactive extensions to compose the message pipeline. The first task was to convert the pipeline code from an event based model to an Rx <a href="http://msdn.microsoft.com/en-us/library/hh244252(v=vs.103).aspx" target="_blank">Observable</a> so I could start. For this, the easiest thing was to simply use the <a href="http://msdn.microsoft.com/en-us/library/system.reactive.linq.observable.fromeventpattern(v=vs.103).aspx" target="_blank">FromEventPattern</a> method on Observable.
<pre class="brush: csharp;">trackingRecords =
    Observable.FromEventPattern&lt;MessageEventArgs&gt;(
        ev =&gt; messageSource.MessageReceived += ev,
        ev =&gt; messageSource.MessageReceived -= ev)</pre>
Next thing was to figure out how to process more of the messages at a time so that they did not expire on the queue. This is where the Rx <a href="http://msdn.microsoft.com/en-us/library/hh229145(v=vs.103).aspx" target="_blank">Buffer</a> operator comes in, basically pass it a batch size and timeout period and the incoming messages will be batched up into a collection, the size of the collection is based on receiving 500 items or a 1 second window, whichever happens first. Once the collection is created a new one will start being buffered.
<pre class="brush: csharp;">activityTrackSubscription = trackingRecords
    .Buffer(TimeSpan.FromSeconds(1), 500)
    .Where(items =&gt; items.Any())
    .Subscribe(records =&gt; {
          repository.RecordWorkflowTrack(records);
    });</pre>
In the diagram below you can see that we move from a stream of messages to a stream of message collections. Each of these is then handled on its own thread while the aggregating of the next batch continues.

Then I handed this collection over to our ORM (NHibernate) to write in a single transaction to the database instead of multiple individual transactions. Wicked! Just a few lines of code and already we have a batch that is constructed from a stream of messages and handled as a batch command rather than one at a time.

<a href="http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing3.png"><img style="background-image: none; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; margin-right: auto; border: 0px;" title="RxMessageProcessing3" alt="RxMessageProcessing3" src="http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing3_thumb.png" width="454" height="195" border="0" /></a>

Think about what this would have involved if you wanted to write it yourself. You would have had to keep a collection of messages and timestamp in some sort of state/fields, then you would have had to copy the message collection, clear the fields, add the threading code to create a new thread to process the batch. Not undoable but a pain all the same.

This helped us survive for a while but we started to get some reports of more similar CPU activity, this time on this message listener and SQL server. After looking into it we discovered 2 things, the first was that the ORM wasn’t actually batching the inserts, sure they were in a single transaction but each were individual inserts. Problem solved with SQL bulk copy.

The second issue was actually due to the second usage of this event stream, apart from inserting each message into a log table we also updated a summary table which held a single row per workflow instance. This row had the last action date and other summary information that was included in each tracking message of a certain type. These messages were still being processed one at a time, and for each one we would load the row into memory, perform the changes through a mapper and update the row, all the while taking locks etc.You see, when a workflow executes there is a pulse of activity until it idles, during this pulse of activity we may emit many tracking records therefore processing these one at a time can be expensive.

To solve this we needed to group incoming records according to the instance id of the workflow and make the changes in memory before writing to the database. Effectively we were changing the approach from making many consecutive changes in the database to an approach which made those changes in memory first and wrote the final result to the database.
<h3>Batching a message pipeline according to the Message Content</h3>
So for this task I used the Group operator. I always found it difficult to understand what the group operator was doing. I wondered, “How can it group events into a dictionary of messages when it doesn’t know what the groups (keys) will be?”. If you think of the LINQ Group function as grouping items in a collection into a keyed collection of collections (a dictionary), the Rx Group function actually groups into a keyed observable of observables. Who said this was hard?

Once we have our grouped observables we can buffer each group to achieve a batch in the same way we did before. The result of this is an observable stream that produces events where each event is a collection of messages for the same workflow instance.
<p align="center"><a href="http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing4.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="RxMessageProcessing4" alt="RxMessageProcessing4" src="http://blog.petegoo.com/wp-content/uploads/2013/01/RxMessageProcessing4_thumb.png" width="454" height="195" border="0" /></a></p>
Although this time instead of bulk insert we are going to map each message into the same instance of our persisted row. In other words for each batch we will start by loading the single workflow summary row once, then run it through our mapper for each message in the batch and then persist the result to the database.
<pre class="brush: csharp;">workflowSummarySubscription = trackingRecords
    .Where(record =&gt; IsSummaryInformation(record))
    .GroupBy(record =&gt; record.InstanceId)
    .SelectMany(group =&gt; group.Buffer(TimeSpan.FromSeconds(1), 500))
    .Subscribe(records =&gt; {
        var row = GetRow(records.First().InstanceId);
        foreach(var record in records){
            UpdateRowFromRecord(record, row);
        }
        SaveRow(row);
    });</pre>
The result of this last set of changes is that we greatly improved the message pipeline throughput from ~50 messages/sec to 2700 messages/sec before the messages started backing up on the queue. The recoverability of the pipeline under peak load also improved such that the backlog was cleared in a matter of seconds.
<h3>Summary</h3>
If you have an asynchronous message pipeline, consider consuming it in Rx. Optimizing the stream becomes trivial after that as you can add context back into a stream of individual messages to create batches optimised for your consumption case.

<strong>Update</strong>

Jacob Reimers asked the following question on twitter
<blockquote>@jjrdk: @petegoo Cool blog post. Had similar issue at work recently. How would you deal with group streams that you need to close?</blockquote>
The trick here is to change the GroupBy to a GroupByUntil with a throttle. This will complete each group when a period of inactivity is reached (say 30 seconds), if more activity happens for that group later then it will get recreated.

<pre class="brush: csharp;">workflowSummarySubscription = trackingRecords
    .Where(record =&gt; IsSummaryInformation(record))
    .GroupByUntil(record =&gt; record.InstanceId, g =&gt; g.Throttle(TimeSpan.FromSeconds(30)).Take(1))
    .SelectMany(group =&gt; group.Buffer(TimeSpan.FromSeconds(1), 500))
    .Subscribe(records =&gt; {
        var row = GetRow(records.First().InstanceId);
        foreach(var record in records){
            UpdateRowFromRecord(record, row);
        }
        SaveRow(row);
    });</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>400</wp:post_id>
		<wp:post_date>2013-01-20 23:04:36</wp:post_date>
		<wp:post_date_gmt>2013-01-20 10:04:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>reactive-extensions-in-message-processing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="category" nicename="rx"><![CDATA[Rx]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[390]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Pipelining a query provider onto Linq to Objects</title>
		<link>http://blog.petegoo.com/index.php/2013/02/01/pipelining-a-query-provider-onto-linq-to-objects/</link>
		<pubDate>Fri, 01 Feb 2013 10:41:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=404</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Recently I’ve seen a few problems occur in our codebase that made me think, there must be an obvious solution to this. Basically we have a bunch of <em>data provider</em> classes that expose a GetQuery method that returns an IQueryable&lt;T&gt;, we use these generically in our UI controls such that the control will have no knowledge of the data provider it has, only that it can get the queryable via GetQuery and due to deferred execution the control is able to schedule it on a background thread instead of blocking the UI thread.</p> <p>This is all very cool and works fine until a specific data provider needs to do some kind of processing that isn’t supported by OData. You see once we reach the limits of the OData query provider we have to transition to Linq to Objects if we want to do a contains or something similar (like <em>if the category is in this predefined list</em>). This presents us with a problem as the data provider must choose to evaluate the OData query on the UI thread so that it can post-process the result and hence block the UI thread leaving our users with an experience that is not quite <em>fast and fluid</em>.</p> <p>Well, I sat down to try to figure this out and realised it’s as easy as calling AsEnumerable. This may be obvious to you dear reader but I just never knew this trick. You see the AsEnumerable extension method on an IQueryable will not immediately evaluate the query like ToArray or ToList. Instead it will simply move into Linq to Objects as the query provider writing an As operator into the existing expression tree thus building a pipeline from Linq to OData to Linq to Objects retaining the deferred execution behavior. The result is the code below.</p> <p>&nbsp;</p><pre class="brush: csharp;">public class MainWindowViewModel {
    private readonly ObservableCollection&lt;Title&gt; titles = new ObservableCollection&lt;Title&gt;();

    public async Task EvaluateQuery() {
        IQueryable&lt;Title&gt; queryable = GetDataProvider().GetQuery();
        // At this point we have not yet sent a request over the wire
        // Now evaluate our queryable, it will execute a pipeline of two steps, Linq to OData | Linq to Objects
        var result = await Task.Factory.StartNew(() =&gt; queryable.ToArray());
        // We now update our UI bound property
        titles.Clear();
        result.ToList().ForEach(titles.Add);
    }

    public ObservableCollection&lt;Title&gt; Titles {
        get { return titles; }
    }

    private DataProvider GetDataProvider() {
        // Normally this would be some sort of factory code to get a data provider
        return new DataProvider();
    }
}

public class DataProvider {
    public IQueryable&lt;Title&gt; GetQuery() {
        return new NetflixCatalog(new Uri("http://odata.netflix.com/Catalog/"))
            .Titles
            .Where(t =&gt; t.Name.Contains("dude"))
            .AsEnumerable() // Transfer into Linq to Objects for this part but keep deferred execution
            .Where(s =&gt; IsMatch(s.Name))
            .AsQueryable();
    }

    public bool IsMatch(string name) {
        // Do some complicated filtering logic that can't be represented on an OData URI
        return true;
    }
}
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>404</wp:post_id>
		<wp:post_date>2013-02-01 23:41:48</wp:post_date>
		<wp:post_date_gmt>2013-02-01 10:41:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pipelining-a-query-provider-onto-linq-to-objects</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="category" nicename="linq-2"><![CDATA[LINQ]]></category>
		<category domain="category" nicename="wpf"><![CDATA[WPF]]></category>
	</item>
	<item>
				<title>Nokia 920 vs HTC 8x</title>
		<link>http://blog.petegoo.com/index.php/2013/03/05/nokia-920-vs-htc-8x/</link>
		<pubDate>Tue, 05 Mar 2013 07:32:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=410</guid>
		<description></description>
		<content:encoded><![CDATA[<p><strong>TLDR; </strong>The Nokia has a much better, brighter screen which means easier typing, much better camera, twice the storage but it’s still a big ass-phone.</p> <p>When Windows Phone 8 was announced I knew I would be buying a device as soon as they came out. The LG Optimus 7 that I got as a PDC gift when Windows Phone 7 came out was starting to show its age although it had lasted me well (with no screen scratches I might add).</p> <p>When I was considering which of the two flagship phones to get I always had the feeling from looking at the specs that the Nokia was just a big-ass phone, too big to be practical. This was confirmed when a colleague returned with the Nokia 920 from the Build conference. So I put in my order for an HTC 8x.</p> <p>I had the 8x happily for 2 months and everything was good, people would ask me about it and much preferred the sleek and light 8x to the 920. Then one day I noticed a scratch, not a huge scratch but a scratch none-the-less. I complained to HTC who said take it back to the retailer and they said, well they didn’t say anything actually, they didn’t reply to my email. A few days later I picked up the 8x after setting it down 10 minutes earlier and the screen wouldn’t turn on, it wouldn’t charge and the reset key combination did nothing. This time the retailer did reply and arranged for it to be sent back to them at their expense. </p> <p>As a result of this I borrowed the previously mentioned 920 from the office for a period of 7 weeks while my 8x was being “repaired” and eventually replaced (only when I pressed them for a status). I would say at this point to beware of buying parallel imported phone from overseas companies like Expansys but the thing is 3 of us at the office bought new HTC WP8 phones. The other two guys bought 8s’s, one smashed the screen from a 2 foot drop onto a soft floor, the other cracked the full length of the screen from having it in a backpack on his back. Neither of them were able to get replacements or repairs any faster and they both bought from carriers (in fact one guy switched to the Nokia 820 in disgust). </p> <p>Anyways, that wasn’t the point of this post. I was fully expecting to hate the 920, I thought I was going to have to reinforce my trouser pockets, start wearing braces and use two hands to operate it. Not so it would seem. In fact I grew to rather like it.</p> <p>The first thing I noticed was the keyboard, I had constantly been making typing mistakes on the 8x, The most annoying of which seemed to have been accidentally hitting space which creates a new word and turns the first part of the word into a random auto-corrected bunch of gibberish. No more. The extra 0.2” screen width on the 920 meant that the keys weren’t quite as small and I made less mistakes.</p> <p>As time passed I started to get used to the extra weight and bulk. The next thing I noticed was the camera. The shots I was taking now were far superior to the 8x, especially video.</p> <p>7 weeks passed and I got my 8x back. Sitting the two side by side it was easy to see the screen difference. The 920 has a much brighter screen, far superior contrast and those on-screen-keyboard keys were noticeably bigger.</p> <p>I was a little torn for a few minutes but the 8x is so light and slim compared to the 920. The specs don’t really show it but in the hand, it is a much more comfortable device. In the pocket it is really noticeable, with the 8x I always have to tap my pocket to check if I’ve got my phone on me, with the 920 I can just feel it. Constantly.</p> <p><a href="http://blog.petegoo.com/wp-content/uploads/2013/03/IMG_0012.jpg"><img title="IMG_0012" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="IMG_0012" src="http://blog.petegoo.com/wp-content/uploads/2013/03/IMG_0012_thumb.jpg" width="522" height="390"></a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>410</wp:post_id>
		<wp:post_date>2013-03-05 20:32:16</wp:post_date>
		<wp:post_date_gmt>2013-03-05 07:32:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nokia-920-vs-htc-8x</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="htc"><![CDATA[HTC]]></category>
		<category domain="post_tag" nicename="nokia"><![CDATA[Nokia]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="category" nicename="tech"><![CDATA[Tech]]></category>
		<category domain="post_tag" nicename="wp8"><![CDATA[WP8]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[408]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Fibre driven development</title>
		<link>http://blog.petegoo.com/index.php/2013/04/28/fibre-driven-development/</link>
		<pubDate>Sun, 28 Apr 2013 09:22:34 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=412</guid>
		<description></description>
		<content:encoded><![CDATA[<p>So, I’ve been a bit quiet recently. There’s been no blogging and even my twitter activity has dwindled of late so what gives?</p> <p>Well I quit my old job building software for the legal market and started a new role at <a href="http://www.markermetro.com/" target="_blank">Marker Metro</a>, building apps exclusively for the windows eco-system (phone and win 8). During this transition I have been relatively quiet as I wrestle with <a href="http://www.hanselman.com/blog/ImAPhonyAreYou.aspx" target="_blank">imposter syndrome</a> and ramp up, therefore I am not blogging or making authoritative statements about the stuff that I am doing. I should however probably be blogging my experiences of learning the new tech and tools. Hmmmm, note to self…</p> <h4>Why move?</h4> <h5>Productivity</h5> <p>In my previous role I was finding myself in more and more meetings, training people more, fielding questions and generally getting distracted from the reason I do this job, writing code. Don’t get me wrong, I still got to write code and I did enjoy some these other activities to a degree but here’s the thing – you can’t write great code in the 30-45 minute breaks between other activities. You need prolonged periods of focus for that. I was getting increasingly frustrated with what I saw as a lack of productivity in myself.</p> <h5>Culture</h5> <p>I’m not going to say much here except that a company culture can wander off course gradually and almost imperceptibly but steering it back can be a mammoth (some say impossible) task.</p> <h5>Stagnation</h5> <p>I learned a heck of a lot from some of the smartest people I have ever met but the subject matter and the slowing rate of change were such that I was finding myself searching for alternative sources of challenges outside of the day-to-day. This is not such a bad thing but if I wasn’t doing that I was unhappy. I needed to be happy just working, anything else is a bonus.</p> <h4>So what to do?</h4> <p>Well, I figured that I’ve been in the same job for 6 years since moving from the other side of the world to New Zealand so I need to find out what opportunities are out there. Rumors had been circulating internally that there were no other good employers in NZ. Pah!</p> <p>There is a huge problem in our industry, there are far too many developers working in silos being rockstars in their own garages impressing only their mums. Especially in the .Net community. I had a little exposure to the community through speaking at Tech-Ed NZ and user groups so I decided to expand my circle of influence and see what came of it. I went along to meetups, gave a few more talks, started tweeting more, posted a few more blog articles and started participating in open-source.</p> <p>I met some awesome people like <a href="http://www.twitter.com/kiwipom" target="_blank">@kiwipom</a>, <a href="http://www.twitter.com/kiwidev" target="_blank">@kiwidev</a> and <a href="http://www.twitter.com/nigelsampson" target="_blank">@nigelsampson</a> and really started enjoying being a part of the dev community. From that came a DM on twitter and an informal chat before I found my new role. I suppose the lesson here is, get out more ya freaks! And for fucks sake get a github account. What does a potential employer want to know? Can this muppet code? –&gt; github account. Can this code-monkey interact with other reasonable humans without freaking them out, killing them or indecently exposing themselves? –&gt; meetups/the twitters</p> <p>Don’t get me wrong, I’m not an advocate of this “define your personal brand” style of self-promotion. It just seems awfully contrived and disingenuous. Just get out there and start interacting, there are incredibly smart and generous people in this community with a lot to share.</p> <h4>Why this move?</h4> <p>To be honest I wasn’t 100% sold on being a Windows Phone / Windows 8 developer, it is an unproven market and in the case of Windows 8 an immature platform. I have never been a UX kind of guy, I have ashamedly in the past hidden behind that lazy developer’s mantra “<em>I don’t really do UI stuff, you know? I’m more of a back-end kind of guy</em>”. I mean I’d spent the last 6 years building APIs, services, an enterprise workflow system, messaging doo-daddys……so going to an informal chat with Keith and Ben at Marker Metro I wasn’t sure this would be the right move for me. I was curious, but in no way convinced.</p> <p>But, I left that chat hoping desperately that I would get a follow up. Why? Well here’s the thing – I’ve been inspired by <a href="http://www.twitter.com/kellabyte" target="_blank">@kellabyte</a>’s mantra “<strong>Do Hard Shit!</strong>”, this isn’t a recommendation on daily fibre intake but rather a call for people to challenge themselves and pick tasks that they otherwise would not, in the belief that valuable learning will inevitably come of it. There are mountains of things I don’t know about WinRT, Xaml, Mobile development and UX, and here are a bunch of people that know a metric fuckload about things I have no idea about. What’s more, the sheer passion in the way that Keith and Ben spoke about their work and the plans for the company is infectious. Oh, and they have Epic beer on Fridays.</p> <p>So now I’m head-down soaking up the experiences and knowledge trying to provide value and genuinely enjoying it. Hopefully that means I will be able to share some of that here soon.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>412</wp:post_id>
		<wp:post_date>2013-04-28 22:22:34</wp:post_date>
		<wp:post_date_gmt>2013-04-28 09:22:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fibre-driven-development</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="productivity"><![CDATA[Productivity]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="category" nicename="rant"><![CDATA[Rant]]></category>
	</item>
	<item>
				<title>XAML surround templates for Resharper</title>
		<link>http://blog.petegoo.com/index.php/2013/07/01/xaml-surround-templates-for-resharper/</link>
		<pubDate>Mon, 01 Jul 2013 08:40:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=419</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Lately I’ve been more active than usual about extolling the virtues of Jetbrains Resharper. Despite the recent additions to the Visual Studio 2013 refactoring tools in my mind resharper is an absolute must have.</p> <p>In the <a href="http://channel9.msdn.com/Events/Build/2013/2-164" target="_blank">Build 2013 talk by Tim Heuer</a> on “What’s New in XAML” he showed a neat trick of being able to surround one or more xaml elements in a StackPanel with a quick shortcut. I thought, this should be possible with resharper surround templates today so here goes.</p> <ol> <li>From the Resharper menu choose “Templates Explorer”<br><br><a href="http://blog.petegoo.com/wp-content/uploads/2013/07/image.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://blog.petegoo.com/wp-content/uploads/2013/07/image_thumb.png" width="460" height="367"></a><br><br> <li>Select XML (no XAML&nbsp; scope right now) and click the new template button<br><a href="http://blog.petegoo.com/wp-content/uploads/2013/07/image1.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://blog.petegoo.com/wp-content/uploads/2013/07/image_thumb1.png" width="42" height="38"></a>  <li>This should open a new document with the string “$SELECTION$” in it. This is simply the tag replacement for the currently selected text in the editor. Put a &lt;StackPanel&gt; on a line above and a closing &lt;/StackPanel&gt; below. <br><br> <li>Then give the template a description like ooh, I dunno “StackPanel” and save it.<br><br> <li>In template explorer, drag that bad-boi onto the quicklist.<br><br> <li>Repeat for a Grid.</li></ol> <p>Now you can simply select a bunch of XAML and hit CTRL+E, CTRL+U. Type the number of the template in the quick list and you are done. Instant gratification.</p> <p><a href="http://blog.petegoo.com/wp-content/uploads/2013/07/image2.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://blog.petegoo.com/wp-content/uploads/2013/07/image_thumb2.png" width="244" height="158"></a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>419</wp:post_id>
		<wp:post_date>2013-07-01 21:40:03</wp:post_date>
		<wp:post_date_gmt>2013-07-01 08:40:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xaml-surround-templates-for-resharper</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[418]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Making the SysTray transparent on Windows Phone</title>
		<link>http://blog.petegoo.com/index.php/2013/08/06/making-the-systray-transparent-on-windows-phone/</link>
		<pubDate>Tue, 06 Aug 2013 10:30:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=423</guid>
		<description></description>
		<content:encoded><![CDATA[I’ve used a semi-transparent AppBar on windows phone a number of times to get the visual effect I wanted and to stop the dreaded jumping frame when transitioning pages but I didn’t think it would be possible with the SysTray. Turns out that the SysTray in Windows Phone can be made transparent.

This is pretty useful if you want to keep an image background that spans the entire height of the screen. Simply add the attributes below to your root PhoneApplicationPage element.

<pre class="brush:xml">
shell:SystemTray.IsVisible="True"
shell:SystemTray.ForegroundColor="Yellow"
shell:SystemTray.Opacity="0"
</pre>

and the result should look like this:

<img class="alignnone size-medium wp-image-424" alt="systray" src="http://blog.petegoo.com/wp-content/uploads/2013/08/systray1-300x94.png" width="300" height="94" />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>423</wp:post_id>
		<wp:post_date>2013-08-06 23:30:01</wp:post_date>
		<wp:post_date_gmt>2013-08-06 10:30:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>making-the-systray-transparent-on-windows-phone</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Introducing mmbot, a C# Hubot port</title>
		<link>http://blog.petegoo.com/index.php/2013/10/13/introducing-mmbot-a-c-hubot-port/</link>
		<pubDate>Sat, 12 Oct 2013 23:45:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.petegoo.com/?p=451</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I’ve been playing recently with github’s <a href="http://github.com/github/hubot" target="_blank">Hubot</a> chat bot, written in Coffee script on Node. I wanted to connect it to our <a href="http://about.jabbr.net" target="_blank">jabbr</a> instance with the least amount of friction and to provide our team with an office jukebox, build automation and various meme-oriented distractions. There is a <a href="https://github.com/smoak/hubot-jabbr" target="_blank">pretty good adapter</a> for Hubot to do this but after having a few issues I decided it might be easier to do a port to C# so I could more easily write scripts and connect to jabbr (which is written in C# and has some ready made APIs).</p> <p>The result is <a href="http://github.com/petegoo/mmbot" target="_blank">mmbot</a>, a hubot port that follows the same basic architecture of Hubot with minimal changes. The basic goals of mmbot are thusly:</p> <ol> <li><strong>Provide a chat bot written in C# with all the functionality of Hubot but with a script environment more familiar to .Net devs.</strong>  <li><strong>Hubot scripts should be easy to convert into mmbot scripts.<br></strong>This may mean that there are some weird overloads in the API for writing scripts that look like hubot scripts but it should still be very usable, customizable and familiar to .Net devs. <li><strong>ScriptCS style scripts should be automatically picked up and run from a scripts folder</strong>  <li><strong>Hubot scripts should be easy to convert into mmbot scripts.<br></strong>There are some blockers here in the NuGet package resolution and <a href="https://github.com/scriptcs/scriptcs/issues/243">dynamic loading of scripts</a></li></ol> <p>Currently there are 2 adapters for mmbot - jabbr and HipChat. The jabbr adapter is the most used at the moment but the HipChat one should also be working.</p> <p>Scripts can be written in code by implementing IMMBotScript or by dropping a scriptcs csx file into a scripts folder beside the executable. The pre-compiled approach gives you the power of async/await and the speed of using dynamic while scriptcs means you don’t need to create dll. The experience of porting Hubot scripts has so far been pretty painless as the API was designed to make this process incredibly easy.</p> <p>Here is the hubot math script in scriptcs form</p><script src="https://gist.github.com/PeteGoo/6956172.js"></script> <p>And as an IMMBot script</p><script src="https://gist.github.com/PeteGoo/6956182.js"></script> <p>Notice that there is an Http fluent style helper for creating requests and processing the responses using HttpClient and Json.Net.</p> <h2>Starting mmbot</h2> <p>Starting mmbot is easy. You can choose to configure him by environment variables or by passing in config parameters in code</p><script src="https://gist.github.com/PeteGoo/6956204.js"></script> <h2>What scripts does it have?</h2> <p>mmbot currently has the following scripts</p> <ul> <li>Searching for images, animated gifs, cats, pugs, maps, youtube videos</li> <li>Urban Dictionary definitions</li> <li>Ascii art generator</li> <li>Mustache me (place a mustache on someone’s face)</li> <li>Xkcd comics</li> <li>Spotify player /office jukebox with playlist, query, album, track playing and queuing and volume control.</li> <li>Jetbrains TeamCity build server – querying build status, starting builds etc.</li></ul> <p>Thanks to <a href="http://dkdevelopment.net" target="_blank">Damian Karzon</a> for contributing some of the scripts. Check out the current catalog at <a href="http://github.com/petegoo/mmbot">http://github.com/petegoo/mmbot</a></p> <h2>What's next?</h2> <p>Next for mmbot is to try to implement a few cooler features like loading and saving scripts from gists, starting from scriptcs (some issues here currently) and to get the script catalog expanded.</p> <p><a href="http://github.com/petegoo/mmbot" target="_blank">Go check out the mmbot code on github</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>451</wp:post_id>
		<wp:post_date>2013-10-13 12:45:29</wp:post_date>
		<wp:post_date_gmt>2013-10-12 23:45:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introducing-mmbot-a-c-hubot-port</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bot"><![CDATA[bot]]></category>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="github"><![CDATA[github]]></category>
		<category domain="post_tag" nicename="hubot"><![CDATA[hubot]]></category>
		<category domain="post_tag" nicename="jabbr"><![CDATA[jabbr]]></category>
		<category domain="category" nicename="main-page"><![CDATA[Main Page]]></category>
		<category domain="post_tag" nicename="mmbot"><![CDATA[mmbot]]></category>
		<category domain="category" nicename="oss"><![CDATA[OSS]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
